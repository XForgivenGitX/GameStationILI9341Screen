
Snake_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d4  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000138  08010228  08010228  00020228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001c8  08010360  08010360  00020360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08010528  08010528  00020528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0801053c  0801053c  0002053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000854  20000000  08010544  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000288  20000854  08010d98  00030854  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000adc  08010d98  00030adc  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00030854  2**0
                  CONTENTS, READONLY
 11 .debug_info   000649a7  00000000  00000000  0003087d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000897a  00000000  00000000  00095224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00022d75  00000000  00000000  0009db9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  000c0918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003228  00000000  00000000  000c1c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207f9  00000000  00000000  000c4e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029990  00000000  00000000  000e5649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099acb  00000000  00000000  0010efd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b80  00000000  00000000  001a8af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001b0674  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001b0728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000854 	.word	0x20000854
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ee3c 	.word	0x0800ee3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000858 	.word	0x20000858
 8000148:	0800ee3c 	.word	0x0800ee3c

0800014c <d_make_comp>:
 800014c:	4684      	mov	ip, r0
 800014e:	1e48      	subs	r0, r1, #1
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	284f      	cmp	r0, #79	; 0x4f
 8000154:	d842      	bhi.n	80001dc <d_make_comp+0x90>
 8000156:	e8df f000 	tbb	[pc, r0]
 800015a:	2828      	.short	0x2828
 800015c:	41412828 	.word	0x41412828
 8000160:	3f3f4141 	.word	0x3f3f4141
 8000164:	3f3f3f28 	.word	0x3f3f3f28
 8000168:	3f3f3f3f 	.word	0x3f3f3f3f
 800016c:	3f3f3f3f 	.word	0x3f3f3f3f
 8000170:	2a2a413f 	.word	0x2a2a413f
 8000174:	2a2a2a2a 	.word	0x2a2a2a2a
 8000178:	3f282a2a 	.word	0x3f282a2a
 800017c:	3f3f3f3f 	.word	0x3f3f3f3f
 8000180:	292a3f41 	.word	0x292a3f41
 8000184:	2a284128 	.word	0x2a284128
 8000188:	41293f2a 	.word	0x41293f2a
 800018c:	3f3f3f41 	.word	0x3f3f3f41
 8000190:	28282828 	.word	0x28282828
 8000194:	28283f28 	.word	0x28283f28
 8000198:	4141283f 	.word	0x4141283f
 800019c:	413f3f3f 	.word	0x413f3f3f
 80001a0:	3f3f4141 	.word	0x3f3f4141
 80001a4:	282a283f 	.word	0x282a283f
 80001a8:	2a2a      	.short	0x2a2a
 80001aa:	b1ba      	cbz	r2, 80001dc <d_make_comp+0x90>
 80001ac:	b1b3      	cbz	r3, 80001dc <d_make_comp+0x90>
 80001ae:	e9dc 4005 	ldrd	r4, r0, [ip, #20]
 80001b2:	4284      	cmp	r4, r0
 80001b4:	da12      	bge.n	80001dc <d_make_comp+0x90>
 80001b6:	2600      	movs	r6, #0
 80001b8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80001bc:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 80001c0:	eb05 008e 	add.w	r0, r5, lr, lsl #2
 80001c4:	3401      	adds	r4, #1
 80001c6:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80001ca:	f8cc 4014 	str.w	r4, [ip, #20]
 80001ce:	f805 102e 	strb.w	r1, [r5, lr, lsl #2]
 80001d2:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80001d6:	bd70      	pop	{r4, r5, r6, pc}
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d1e8      	bne.n	80001ae <d_make_comp+0x62>
 80001dc:	2000      	movs	r0, #0
 80001de:	bd70      	pop	{r4, r5, r6, pc}

080001e0 <d_number>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	68c2      	ldr	r2, [r0, #12]
 80001e4:	4686      	mov	lr, r0
 80001e6:	7811      	ldrb	r1, [r2, #0]
 80001e8:	296e      	cmp	r1, #110	; 0x6e
 80001ea:	d024      	beq.n	8000236 <d_number+0x56>
 80001ec:	3930      	subs	r1, #48	; 0x30
 80001ee:	b2cb      	uxtb	r3, r1
 80001f0:	2b09      	cmp	r3, #9
 80001f2:	d82a      	bhi.n	800024a <d_number+0x6a>
 80001f4:	2600      	movs	r6, #0
 80001f6:	2000      	movs	r0, #0
 80001f8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80001fc:	4c14      	ldr	r4, [pc, #80]	; (8000250 <d_number+0x70>)
 80001fe:	e006      	b.n	800020e <d_number+0x2e>
 8000200:	4619      	mov	r1, r3
 8000202:	1aeb      	subs	r3, r5, r3
 8000204:	fba4 c303 	umull	ip, r3, r4, r3
 8000208:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 800020c:	dc10      	bgt.n	8000230 <d_number+0x50>
 800020e:	3201      	adds	r2, #1
 8000210:	f8ce 200c 	str.w	r2, [lr, #12]
 8000214:	7813      	ldrb	r3, [r2, #0]
 8000216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800021a:	3b30      	subs	r3, #48	; 0x30
 800021c:	fa5f fc83 	uxtb.w	ip, r3
 8000220:	f1bc 0f09 	cmp.w	ip, #9
 8000224:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8000228:	d9ea      	bls.n	8000200 <d_number+0x20>
 800022a:	b106      	cbz	r6, 800022e <d_number+0x4e>
 800022c:	4240      	negs	r0, r0
 800022e:	bd70      	pop	{r4, r5, r6, pc}
 8000230:	f04f 30ff 	mov.w	r0, #4294967295
 8000234:	bd70      	pop	{r4, r5, r6, pc}
 8000236:	1c53      	adds	r3, r2, #1
 8000238:	60c3      	str	r3, [r0, #12]
 800023a:	7851      	ldrb	r1, [r2, #1]
 800023c:	3930      	subs	r1, #48	; 0x30
 800023e:	b2ca      	uxtb	r2, r1
 8000240:	2a09      	cmp	r2, #9
 8000242:	d802      	bhi.n	800024a <d_number+0x6a>
 8000244:	461a      	mov	r2, r3
 8000246:	2601      	movs	r6, #1
 8000248:	e7d5      	b.n	80001f6 <d_number+0x16>
 800024a:	2000      	movs	r0, #0
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	bf00      	nop
 8000250:	cccccccd 	.word	0xcccccccd

08000254 <d_call_offset>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4604      	mov	r4, r0
 8000258:	b929      	cbnz	r1, 8000266 <d_call_offset+0x12>
 800025a:	68c3      	ldr	r3, [r0, #12]
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	b16a      	cbz	r2, 800027c <d_call_offset+0x28>
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	60c2      	str	r2, [r0, #12]
 8000264:	7819      	ldrb	r1, [r3, #0]
 8000266:	2968      	cmp	r1, #104	; 0x68
 8000268:	d017      	beq.n	800029a <d_call_offset+0x46>
 800026a:	2976      	cmp	r1, #118	; 0x76
 800026c:	d106      	bne.n	800027c <d_call_offset+0x28>
 800026e:	4620      	mov	r0, r4
 8000270:	f7ff ffb6 	bl	80001e0 <d_number>
 8000274:	68e3      	ldr	r3, [r4, #12]
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	2a5f      	cmp	r2, #95	; 0x5f
 800027a:	d001      	beq.n	8000280 <d_call_offset+0x2c>
 800027c:	2000      	movs	r0, #0
 800027e:	bd10      	pop	{r4, pc}
 8000280:	3301      	adds	r3, #1
 8000282:	4620      	mov	r0, r4
 8000284:	60e3      	str	r3, [r4, #12]
 8000286:	f7ff ffab 	bl	80001e0 <d_number>
 800028a:	68e3      	ldr	r3, [r4, #12]
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	2a5f      	cmp	r2, #95	; 0x5f
 8000290:	d1f4      	bne.n	800027c <d_call_offset+0x28>
 8000292:	2001      	movs	r0, #1
 8000294:	4403      	add	r3, r0
 8000296:	60e3      	str	r3, [r4, #12]
 8000298:	bd10      	pop	{r4, pc}
 800029a:	4620      	mov	r0, r4
 800029c:	f7ff ffa0 	bl	80001e0 <d_number>
 80002a0:	e7f3      	b.n	800028a <d_call_offset+0x36>
 80002a2:	bf00      	nop

080002a4 <d_ref_qualifier>:
 80002a4:	b410      	push	{r4}
 80002a6:	68c3      	ldr	r3, [r0, #12]
 80002a8:	460a      	mov	r2, r1
 80002aa:	7819      	ldrb	r1, [r3, #0]
 80002ac:	2952      	cmp	r1, #82	; 0x52
 80002ae:	d00d      	beq.n	80002cc <d_ref_qualifier+0x28>
 80002b0:	294f      	cmp	r1, #79	; 0x4f
 80002b2:	d002      	beq.n	80002ba <d_ref_qualifier+0x16>
 80002b4:	4610      	mov	r0, r2
 80002b6:	bc10      	pop	{r4}
 80002b8:	4770      	bx	lr
 80002ba:	2120      	movs	r1, #32
 80002bc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80002be:	3403      	adds	r4, #3
 80002c0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80002c2:	1c5c      	adds	r4, r3, #1
 80002c4:	60c4      	str	r4, [r0, #12]
 80002c6:	2300      	movs	r3, #0
 80002c8:	bc10      	pop	{r4}
 80002ca:	e73f      	b.n	800014c <d_make_comp>
 80002cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80002ce:	211f      	movs	r1, #31
 80002d0:	3402      	adds	r4, #2
 80002d2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80002d4:	e7f5      	b.n	80002c2 <d_ref_qualifier+0x1e>
 80002d6:	bf00      	nop

080002d8 <d_count_templates_scopes>:
 80002d8:	2900      	cmp	r1, #0
 80002da:	d065      	beq.n	80003a8 <d_count_templates_scopes+0xd0>
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4606      	mov	r6, r0
 80002e0:	460c      	mov	r4, r1
 80002e2:	68a3      	ldr	r3, [r4, #8]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	f103 0301 	add.w	r3, r3, #1
 80002ea:	dc36      	bgt.n	800035a <d_count_templates_scopes+0x82>
 80002ec:	f8d6 511c 	ldr.w	r5, [r6, #284]	; 0x11c
 80002f0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80002f4:	dc31      	bgt.n	800035a <d_count_templates_scopes+0x82>
 80002f6:	7822      	ldrb	r2, [r4, #0]
 80002f8:	60a3      	str	r3, [r4, #8]
 80002fa:	1e53      	subs	r3, r2, #1
 80002fc:	2b4f      	cmp	r3, #79	; 0x4f
 80002fe:	d82c      	bhi.n	800035a <d_count_templates_scopes+0x82>
 8000300:	e8df f003 	tbb	[pc, r3]
 8000304:	4b303030 	.word	0x4b303030
 8000308:	2c2c2b2b 	.word	0x2c2c2b2b
 800030c:	30303030 	.word	0x30303030
 8000310:	30303030 	.word	0x30303030
 8000314:	30303030 	.word	0x30303030
 8000318:	2b303030 	.word	0x2b303030
 800031c:	30303030 	.word	0x30303030
 8000320:	30303030 	.word	0x30303030
 8000324:	41413030 	.word	0x41413030
 8000328:	302b3030 	.word	0x302b3030
 800032c:	28303030 	.word	0x28303030
 8000330:	30303030 	.word	0x30303030
 8000334:	302c2b30 	.word	0x302c2b30
 8000338:	30303030 	.word	0x30303030
 800033c:	30303030 	.word	0x30303030
 8000340:	30303030 	.word	0x30303030
 8000344:	28302b2b 	.word	0x28302b2b
 8000348:	2b282828 	.word	0x2b282828
 800034c:	30303030 	.word	0x30303030
 8000350:	30303030 	.word	0x30303030
 8000354:	68e4      	ldr	r4, [r4, #12]
 8000356:	2c00      	cmp	r4, #0
 8000358:	d1c3      	bne.n	80002e2 <d_count_templates_scopes+0xa>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	6924      	ldr	r4, [r4, #16]
 800035e:	2c00      	cmp	r4, #0
 8000360:	d1bf      	bne.n	80002e2 <d_count_templates_scopes+0xa>
 8000362:	e7fa      	b.n	800035a <d_count_templates_scopes+0x82>
 8000364:	68e1      	ldr	r1, [r4, #12]
 8000366:	3501      	adds	r5, #1
 8000368:	4630      	mov	r0, r6
 800036a:	f8c6 511c 	str.w	r5, [r6, #284]	; 0x11c
 800036e:	f7ff ffb3 	bl	80002d8 <d_count_templates_scopes>
 8000372:	4630      	mov	r0, r6
 8000374:	6921      	ldr	r1, [r4, #16]
 8000376:	f7ff ffaf 	bl	80002d8 <d_count_templates_scopes>
 800037a:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
 800037e:	3b01      	subs	r3, #1
 8000380:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	68e1      	ldr	r1, [r4, #12]
 8000388:	780b      	ldrb	r3, [r1, #0]
 800038a:	2b05      	cmp	r3, #5
 800038c:	d1eb      	bne.n	8000366 <d_count_templates_scopes+0x8e>
 800038e:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
 8000392:	3301      	adds	r3, #1
 8000394:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
 8000398:	e7e5      	b.n	8000366 <d_count_templates_scopes+0x8e>
 800039a:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
 800039e:	68e1      	ldr	r1, [r4, #12]
 80003a0:	3301      	adds	r3, #1
 80003a2:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 80003a6:	e7de      	b.n	8000366 <d_count_templates_scopes+0x8e>
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop

080003ac <d_discriminator>:
 80003ac:	68c3      	ldr	r3, [r0, #12]
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	2a5f      	cmp	r2, #95	; 0x5f
 80003b2:	d001      	beq.n	80003b8 <d_discriminator+0xc>
 80003b4:	2001      	movs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	b510      	push	{r4, lr}
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	60c2      	str	r2, [r0, #12]
 80003be:	785a      	ldrb	r2, [r3, #1]
 80003c0:	4604      	mov	r4, r0
 80003c2:	2a5f      	cmp	r2, #95	; 0x5f
 80003c4:	d004      	beq.n	80003d0 <d_discriminator+0x24>
 80003c6:	f7ff ff0b 	bl	80001e0 <d_number>
 80003ca:	43c0      	mvns	r0, r0
 80003cc:	0fc0      	lsrs	r0, r0, #31
 80003ce:	bd10      	pop	{r4, pc}
 80003d0:	3302      	adds	r3, #2
 80003d2:	60c3      	str	r3, [r0, #12]
 80003d4:	f7ff ff04 	bl	80001e0 <d_number>
 80003d8:	2800      	cmp	r0, #0
 80003da:	db09      	blt.n	80003f0 <d_discriminator+0x44>
 80003dc:	2809      	cmp	r0, #9
 80003de:	dd09      	ble.n	80003f4 <d_discriminator+0x48>
 80003e0:	68e3      	ldr	r3, [r4, #12]
 80003e2:	781a      	ldrb	r2, [r3, #0]
 80003e4:	2a5f      	cmp	r2, #95	; 0x5f
 80003e6:	d103      	bne.n	80003f0 <d_discriminator+0x44>
 80003e8:	3301      	adds	r3, #1
 80003ea:	2001      	movs	r0, #1
 80003ec:	60e3      	str	r3, [r4, #12]
 80003ee:	bd10      	pop	{r4, pc}
 80003f0:	2000      	movs	r0, #0
 80003f2:	bd10      	pop	{r4, pc}
 80003f4:	2001      	movs	r0, #1
 80003f6:	bd10      	pop	{r4, pc}

080003f8 <d_index_template_argument.part.0>:
 80003f8:	b928      	cbnz	r0, 8000406 <d_index_template_argument.part.0+0xe>
 80003fa:	e009      	b.n	8000410 <d_index_template_argument.part.0+0x18>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	dd08      	ble.n	8000412 <d_index_template_argument.part.0+0x1a>
 8000400:	6900      	ldr	r0, [r0, #16]
 8000402:	3901      	subs	r1, #1
 8000404:	b140      	cbz	r0, 8000418 <d_index_template_argument.part.0+0x20>
 8000406:	7803      	ldrb	r3, [r0, #0]
 8000408:	2b2f      	cmp	r3, #47	; 0x2f
 800040a:	d0f7      	beq.n	80003fc <d_index_template_argument.part.0+0x4>
 800040c:	2000      	movs	r0, #0
 800040e:	4770      	bx	lr
 8000410:	4770      	bx	lr
 8000412:	d1fb      	bne.n	800040c <d_index_template_argument.part.0+0x14>
 8000414:	68c0      	ldr	r0, [r0, #12]
 8000416:	4770      	bx	lr
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop

0800041c <d_growable_string_callback_adapter>:
 800041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041e:	4614      	mov	r4, r2
 8000420:	6852      	ldr	r2, [r2, #4]
 8000422:	68a5      	ldr	r5, [r4, #8]
 8000424:	1c4b      	adds	r3, r1, #1
 8000426:	4413      	add	r3, r2
 8000428:	42ab      	cmp	r3, r5
 800042a:	460e      	mov	r6, r1
 800042c:	4607      	mov	r7, r0
 800042e:	b083      	sub	sp, #12
 8000430:	d811      	bhi.n	8000456 <d_growable_string_callback_adapter+0x3a>
 8000432:	68e5      	ldr	r5, [r4, #12]
 8000434:	b96d      	cbnz	r5, 8000452 <d_growable_string_callback_adapter+0x36>
 8000436:	6863      	ldr	r3, [r4, #4]
 8000438:	6820      	ldr	r0, [r4, #0]
 800043a:	4632      	mov	r2, r6
 800043c:	4418      	add	r0, r3
 800043e:	4639      	mov	r1, r7
 8000440:	f00d fd4e 	bl	800dee0 <memcpy>
 8000444:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000448:	4433      	add	r3, r6
 800044a:	549d      	strb	r5, [r3, r2]
 800044c:	6863      	ldr	r3, [r4, #4]
 800044e:	4433      	add	r3, r6
 8000450:	6063      	str	r3, [r4, #4]
 8000452:	b003      	add	sp, #12
 8000454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000456:	68e2      	ldr	r2, [r4, #12]
 8000458:	2a00      	cmp	r2, #0
 800045a:	d1fa      	bne.n	8000452 <d_growable_string_callback_adapter+0x36>
 800045c:	b155      	cbz	r5, 8000474 <d_growable_string_callback_adapter+0x58>
 800045e:	006d      	lsls	r5, r5, #1
 8000460:	42ab      	cmp	r3, r5
 8000462:	d8fc      	bhi.n	800045e <d_growable_string_callback_adapter+0x42>
 8000464:	4629      	mov	r1, r5
 8000466:	6820      	ldr	r0, [r4, #0]
 8000468:	f00d fdaa 	bl	800dfc0 <realloc>
 800046c:	b138      	cbz	r0, 800047e <d_growable_string_callback_adapter+0x62>
 800046e:	6020      	str	r0, [r4, #0]
 8000470:	60a5      	str	r5, [r4, #8]
 8000472:	e7de      	b.n	8000432 <d_growable_string_callback_adapter+0x16>
 8000474:	2b02      	cmp	r3, #2
 8000476:	f04f 0502 	mov.w	r5, #2
 800047a:	d8f0      	bhi.n	800045e <d_growable_string_callback_adapter+0x42>
 800047c:	e7f2      	b.n	8000464 <d_growable_string_callback_adapter+0x48>
 800047e:	9001      	str	r0, [sp, #4]
 8000480:	6820      	ldr	r0, [r4, #0]
 8000482:	f00d fad9 	bl	800da38 <free>
 8000486:	2201      	movs	r2, #1
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	e9c4 3300 	strd	r3, r3, [r4]
 800048e:	e9c4 3202 	strd	r3, r2, [r4, #8]
 8000492:	e7de      	b.n	8000452 <d_growable_string_callback_adapter+0x36>

08000494 <next_is_type_qual.isra.0>:
 8000494:	7803      	ldrb	r3, [r0, #0]
 8000496:	2b72      	cmp	r3, #114	; 0x72
 8000498:	d007      	beq.n	80004aa <next_is_type_qual.isra.0+0x16>
 800049a:	2b56      	cmp	r3, #86	; 0x56
 800049c:	d005      	beq.n	80004aa <next_is_type_qual.isra.0+0x16>
 800049e:	2b4b      	cmp	r3, #75	; 0x4b
 80004a0:	d003      	beq.n	80004aa <next_is_type_qual.isra.0+0x16>
 80004a2:	2b44      	cmp	r3, #68	; 0x44
 80004a4:	d003      	beq.n	80004ae <next_is_type_qual.isra.0+0x1a>
 80004a6:	2000      	movs	r0, #0
 80004a8:	4770      	bx	lr
 80004aa:	2001      	movs	r0, #1
 80004ac:	4770      	bx	lr
 80004ae:	7840      	ldrb	r0, [r0, #1]
 80004b0:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 80004b4:	2b4f      	cmp	r3, #79	; 0x4f
 80004b6:	d0f8      	beq.n	80004aa <next_is_type_qual.isra.0+0x16>
 80004b8:	3877      	subs	r0, #119	; 0x77
 80004ba:	2801      	cmp	r0, #1
 80004bc:	bf8c      	ite	hi
 80004be:	2000      	movhi	r0, #0
 80004c0:	2001      	movls	r0, #1
 80004c2:	4770      	bx	lr

080004c4 <d_append_char>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	460d      	mov	r5, r1
 80004c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80004cc:	4604      	mov	r4, r0
 80004ce:	29ff      	cmp	r1, #255	; 0xff
 80004d0:	d006      	beq.n	80004e0 <d_append_char+0x1c>
 80004d2:	1c4b      	adds	r3, r1, #1
 80004d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80004d8:	5465      	strb	r5, [r4, r1]
 80004da:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80004e6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80004ea:	4798      	blx	r3
 80004ec:	2301      	movs	r3, #1
 80004ee:	4631      	mov	r1, r6
 80004f0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80004f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80004f8:	441a      	add	r2, r3
 80004fa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80004fe:	5465      	strb	r5, [r4, r1]
 8000500:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8000504:	bd70      	pop	{r4, r5, r6, pc}
 8000506:	bf00      	nop

08000508 <d_lookup_template_argument>:
 8000508:	4603      	mov	r3, r0
 800050a:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 800050e:	b190      	cbz	r0, 8000536 <d_lookup_template_argument+0x2e>
 8000510:	68cb      	ldr	r3, [r1, #12]
 8000512:	6842      	ldr	r2, [r0, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	6910      	ldr	r0, [r2, #16]
 8000518:	db0b      	blt.n	8000532 <d_lookup_template_argument+0x2a>
 800051a:	b920      	cbnz	r0, 8000526 <d_lookup_template_argument+0x1e>
 800051c:	e009      	b.n	8000532 <d_lookup_template_argument+0x2a>
 800051e:	b13b      	cbz	r3, 8000530 <d_lookup_template_argument+0x28>
 8000520:	6900      	ldr	r0, [r0, #16]
 8000522:	3b01      	subs	r3, #1
 8000524:	b130      	cbz	r0, 8000534 <d_lookup_template_argument+0x2c>
 8000526:	7802      	ldrb	r2, [r0, #0]
 8000528:	2a2f      	cmp	r2, #47	; 0x2f
 800052a:	d0f8      	beq.n	800051e <d_lookup_template_argument+0x16>
 800052c:	2000      	movs	r0, #0
 800052e:	4770      	bx	lr
 8000530:	68c0      	ldr	r0, [r0, #12]
 8000532:	4770      	bx	lr
 8000534:	4770      	bx	lr
 8000536:	2201      	movs	r2, #1
 8000538:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <d_find_pack>:
 8000540:	2900      	cmp	r1, #0
 8000542:	d042      	beq.n	80005ca <d_find_pack+0x8a>
 8000544:	b538      	push	{r3, r4, r5, lr}
 8000546:	4605      	mov	r5, r0
 8000548:	460c      	mov	r4, r1
 800054a:	7823      	ldrb	r3, [r4, #0]
 800054c:	2b4c      	cmp	r3, #76	; 0x4c
 800054e:	d832      	bhi.n	80005b6 <d_find_pack+0x76>
 8000550:	e8df f003 	tbb	[pc, r3]
 8000554:	3131312f 	.word	0x3131312f
 8000558:	372f2731 	.word	0x372f2731
 800055c:	31313137 	.word	0x31313137
 8000560:	31313131 	.word	0x31313131
 8000564:	31313131 	.word	0x31313131
 8000568:	31313131 	.word	0x31313131
 800056c:	3131312f 	.word	0x3131312f
 8000570:	31313131 	.word	0x31313131
 8000574:	31313131 	.word	0x31313131
 8000578:	2f313131 	.word	0x2f313131
 800057c:	31313131 	.word	0x31313131
 8000580:	3131312f 	.word	0x3131312f
 8000584:	372f3131 	.word	0x372f3131
 8000588:	31313131 	.word	0x31313131
 800058c:	31313131 	.word	0x31313131
 8000590:	31313131 	.word	0x31313131
 8000594:	312f2f31 	.word	0x312f2f31
 8000598:	2f2f3131 	.word	0x2f2f3131
 800059c:	2f31312f 	.word	0x2f31312f
 80005a0:	2f          	.byte	0x2f
 80005a1:	00          	.byte	0x00
 80005a2:	4621      	mov	r1, r4
 80005a4:	4628      	mov	r0, r5
 80005a6:	f7ff ffaf 	bl	8000508 <d_lookup_template_argument>
 80005aa:	b110      	cbz	r0, 80005b2 <d_find_pack+0x72>
 80005ac:	7803      	ldrb	r3, [r0, #0]
 80005ae:	2b2f      	cmp	r3, #47	; 0x2f
 80005b0:	d000      	beq.n	80005b4 <d_find_pack+0x74>
 80005b2:	2000      	movs	r0, #0
 80005b4:	bd38      	pop	{r3, r4, r5, pc}
 80005b6:	4628      	mov	r0, r5
 80005b8:	68e1      	ldr	r1, [r4, #12]
 80005ba:	f7ff ffc1 	bl	8000540 <d_find_pack>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d1f8      	bne.n	80005b4 <d_find_pack+0x74>
 80005c2:	6924      	ldr	r4, [r4, #16]
 80005c4:	2c00      	cmp	r4, #0
 80005c6:	d1c0      	bne.n	800054a <d_find_pack+0xa>
 80005c8:	e7f3      	b.n	80005b2 <d_find_pack+0x72>
 80005ca:	2000      	movs	r0, #0
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <d_append_string>:
 80005d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d4:	4604      	mov	r4, r0
 80005d6:	4608      	mov	r0, r1
 80005d8:	460d      	mov	r5, r1
 80005da:	f005 fdad 	bl	8006138 <strlen>
 80005de:	b340      	cbz	r0, 8000632 <d_append_string+0x62>
 80005e0:	3d01      	subs	r5, #1
 80005e2:	f04f 0800 	mov.w	r8, #0
 80005e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80005ea:	182f      	adds	r7, r5, r0
 80005ec:	e009      	b.n	8000602 <d_append_string+0x32>
 80005ee:	460b      	mov	r3, r1
 80005f0:	42bd      	cmp	r5, r7
 80005f2:	f101 0101 	add.w	r1, r1, #1
 80005f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80005fa:	54e6      	strb	r6, [r4, r3]
 80005fc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000600:	d017      	beq.n	8000632 <d_append_string+0x62>
 8000602:	29ff      	cmp	r1, #255	; 0xff
 8000604:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000608:	d1f1      	bne.n	80005ee <d_append_string+0x1e>
 800060a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800060e:	4620      	mov	r0, r4
 8000610:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000614:	4798      	blx	r3
 8000616:	2101      	movs	r1, #1
 8000618:	2300      	movs	r3, #0
 800061a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800061e:	42bd      	cmp	r5, r7
 8000620:	440a      	add	r2, r1
 8000622:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8000626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800062a:	54e6      	strb	r6, [r4, r3]
 800062c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000630:	d1e7      	bne.n	8000602 <d_append_string+0x32>
 8000632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000636:	bf00      	nop

08000638 <d_template_param>:
 8000638:	b538      	push	{r3, r4, r5, lr}
 800063a:	68c3      	ldr	r3, [r0, #12]
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	2a54      	cmp	r2, #84	; 0x54
 8000640:	d125      	bne.n	800068e <d_template_param+0x56>
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60c2      	str	r2, [r0, #12]
 8000646:	785a      	ldrb	r2, [r3, #1]
 8000648:	4604      	mov	r4, r0
 800064a:	2a5f      	cmp	r2, #95	; 0x5f
 800064c:	d021      	beq.n	8000692 <d_template_param+0x5a>
 800064e:	2a6e      	cmp	r2, #110	; 0x6e
 8000650:	d01d      	beq.n	800068e <d_template_param+0x56>
 8000652:	f7ff fdc5 	bl	80001e0 <d_number>
 8000656:	1c42      	adds	r2, r0, #1
 8000658:	d419      	bmi.n	800068e <d_template_param+0x56>
 800065a:	68e3      	ldr	r3, [r4, #12]
 800065c:	7819      	ldrb	r1, [r3, #0]
 800065e:	295f      	cmp	r1, #95	; 0x5f
 8000660:	d115      	bne.n	800068e <d_template_param+0x56>
 8000662:	3301      	adds	r3, #1
 8000664:	60e3      	str	r3, [r4, #12]
 8000666:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800066a:	428b      	cmp	r3, r1
 800066c:	da0f      	bge.n	800068e <d_template_param+0x56>
 800066e:	2500      	movs	r5, #0
 8000670:	f04f 0e05 	mov.w	lr, #5
 8000674:	6921      	ldr	r1, [r4, #16]
 8000676:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800067a:	eb01 008c 	add.w	r0, r1, ip, lsl #2
 800067e:	3301      	adds	r3, #1
 8000680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8000684:	6163      	str	r3, [r4, #20]
 8000686:	f801 e02c 	strb.w	lr, [r1, ip, lsl #2]
 800068a:	60c2      	str	r2, [r0, #12]
 800068c:	bd38      	pop	{r3, r4, r5, pc}
 800068e:	2000      	movs	r0, #0
 8000690:	bd38      	pop	{r3, r4, r5, pc}
 8000692:	3302      	adds	r3, #2
 8000694:	2200      	movs	r2, #0
 8000696:	60c3      	str	r3, [r0, #12]
 8000698:	e7e5      	b.n	8000666 <d_template_param+0x2e>
 800069a:	bf00      	nop

0800069c <d_append_num>:
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a0:	b088      	sub	sp, #32
 80006a2:	460a      	mov	r2, r1
 80006a4:	4604      	mov	r4, r0
 80006a6:	491a      	ldr	r1, [pc, #104]	; (8000710 <d_append_num+0x74>)
 80006a8:	a801      	add	r0, sp, #4
 80006aa:	f00b fbbb 	bl	800be24 <siprintf>
 80006ae:	a801      	add	r0, sp, #4
 80006b0:	f005 fd42 	bl	8006138 <strlen>
 80006b4:	b340      	cbz	r0, 8000708 <d_append_num+0x6c>
 80006b6:	ad01      	add	r5, sp, #4
 80006b8:	f04f 0800 	mov.w	r8, #0
 80006bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80006c0:	182f      	adds	r7, r5, r0
 80006c2:	e009      	b.n	80006d8 <d_append_num+0x3c>
 80006c4:	460b      	mov	r3, r1
 80006c6:	42af      	cmp	r7, r5
 80006c8:	f101 0101 	add.w	r1, r1, #1
 80006cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80006d0:	54e6      	strb	r6, [r4, r3]
 80006d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80006d6:	d017      	beq.n	8000708 <d_append_num+0x6c>
 80006d8:	29ff      	cmp	r1, #255	; 0xff
 80006da:	f815 6b01 	ldrb.w	r6, [r5], #1
 80006de:	d1f1      	bne.n	80006c4 <d_append_num+0x28>
 80006e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80006e4:	4620      	mov	r0, r4
 80006e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80006ea:	4798      	blx	r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80006f4:	42af      	cmp	r7, r5
 80006f6:	440a      	add	r2, r1
 80006f8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80006fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000700:	54e6      	strb	r6, [r4, r3]
 8000702:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000706:	d1e7      	bne.n	80006d8 <d_append_num+0x3c>
 8000708:	b008      	add	sp, #32
 800070a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800070e:	bf00      	nop
 8000710:	0800f988 	.word	0x0800f988

08000714 <d_source_name>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	4604      	mov	r4, r0
 8000718:	f7ff fd62 	bl	80001e0 <d_number>
 800071c:	1e05      	subs	r5, r0, #0
 800071e:	dd46      	ble.n	80007ae <d_source_name+0x9a>
 8000720:	68e6      	ldr	r6, [r4, #12]
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	1b9b      	subs	r3, r3, r6
 8000726:	429d      	cmp	r5, r3
 8000728:	dc3e      	bgt.n	80007a8 <d_source_name+0x94>
 800072a:	68a2      	ldr	r2, [r4, #8]
 800072c:	1973      	adds	r3, r6, r5
 800072e:	0752      	lsls	r2, r2, #29
 8000730:	60e3      	str	r3, [r4, #12]
 8000732:	d504      	bpl.n	800073e <d_source_name+0x2a>
 8000734:	5d72      	ldrb	r2, [r6, r5]
 8000736:	2a24      	cmp	r2, #36	; 0x24
 8000738:	bf04      	itt	eq
 800073a:	3301      	addeq	r3, #1
 800073c:	60e3      	streq	r3, [r4, #12]
 800073e:	2d09      	cmp	r5, #9
 8000740:	dd22      	ble.n	8000788 <d_source_name+0x74>
 8000742:	2208      	movs	r2, #8
 8000744:	4630      	mov	r0, r6
 8000746:	4929      	ldr	r1, [pc, #164]	; (80007ec <d_source_name+0xd8>)
 8000748:	f00d fbba 	bl	800dec0 <memcmp>
 800074c:	b930      	cbnz	r0, 800075c <d_source_name+0x48>
 800074e:	7a33      	ldrb	r3, [r6, #8]
 8000750:	2b2e      	cmp	r3, #46	; 0x2e
 8000752:	d02e      	beq.n	80007b2 <d_source_name+0x9e>
 8000754:	2b5f      	cmp	r3, #95	; 0x5f
 8000756:	d02c      	beq.n	80007b2 <d_source_name+0x9e>
 8000758:	2b24      	cmp	r3, #36	; 0x24
 800075a:	d02a      	beq.n	80007b2 <d_source_name+0x9e>
 800075c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000760:	4293      	cmp	r3, r2
 8000762:	da21      	bge.n	80007a8 <d_source_name+0x94>
 8000764:	2200      	movs	r2, #0
 8000766:	6920      	ldr	r0, [r4, #16]
 8000768:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800076c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000770:	3301      	adds	r3, #1
 8000772:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8000776:	6163      	str	r3, [r4, #20]
 8000778:	2300      	movs	r3, #0
 800077a:	7003      	strb	r3, [r0, #0]
 800077c:	e9c0 6503 	strd	r6, r5, [r0, #12]
 8000780:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8000784:	62a0      	str	r0, [r4, #40]	; 0x28
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800078c:	4293      	cmp	r3, r2
 800078e:	da0b      	bge.n	80007a8 <d_source_name+0x94>
 8000790:	2200      	movs	r2, #0
 8000792:	6920      	ldr	r0, [r4, #16]
 8000794:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000798:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800079c:	3301      	adds	r3, #1
 800079e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80007a2:	6163      	str	r3, [r4, #20]
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	d1e7      	bne.n	8000778 <d_source_name+0x64>
 80007a8:	2000      	movs	r0, #0
 80007aa:	62a0      	str	r0, [r4, #40]	; 0x28
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	2000      	movs	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	7a73      	ldrb	r3, [r6, #9]
 80007b4:	2b4e      	cmp	r3, #78	; 0x4e
 80007b6:	d1d1      	bne.n	800075c <d_source_name+0x48>
 80007b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007ba:	6963      	ldr	r3, [r4, #20]
 80007bc:	69a1      	ldr	r1, [r4, #24]
 80007be:	3216      	adds	r2, #22
 80007c0:	1b55      	subs	r5, r2, r5
 80007c2:	428b      	cmp	r3, r1
 80007c4:	62e5      	str	r5, [r4, #44]	; 0x2c
 80007c6:	daef      	bge.n	80007a8 <d_source_name+0x94>
 80007c8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80007cc:	3301      	adds	r3, #1
 80007ce:	6163      	str	r3, [r4, #20]
 80007d0:	2115      	movs	r1, #21
 80007d2:	2300      	movs	r3, #0
 80007d4:	6922      	ldr	r2, [r4, #16]
 80007d6:	4d06      	ldr	r5, [pc, #24]	; (80007f0 <d_source_name+0xdc>)
 80007d8:	0086      	lsls	r6, r0, #2
 80007da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80007de:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80007e2:	5593      	strb	r3, [r2, r6]
 80007e4:	e9c0 5103 	strd	r5, r1, [r0, #12]
 80007e8:	e7df      	b.n	80007aa <d_source_name+0x96>
 80007ea:	bf00      	nop
 80007ec:	0800f98c 	.word	0x0800f98c
 80007f0:	0800f998 	.word	0x0800f998

080007f4 <d_substitution>:
 80007f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f8:	68c3      	ldr	r3, [r0, #12]
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	2a53      	cmp	r2, #83	; 0x53
 80007fe:	d131      	bne.n	8000864 <d_substitution+0x70>
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	60c2      	str	r2, [r0, #12]
 8000804:	785a      	ldrb	r2, [r3, #1]
 8000806:	4604      	mov	r4, r0
 8000808:	b3a2      	cbz	r2, 8000874 <d_substitution+0x80>
 800080a:	1c9a      	adds	r2, r3, #2
 800080c:	60c2      	str	r2, [r0, #12]
 800080e:	785a      	ldrb	r2, [r3, #1]
 8000810:	2a5f      	cmp	r2, #95	; 0x5f
 8000812:	d044      	beq.n	800089e <d_substitution+0xaa>
 8000814:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8000818:	b2c3      	uxtb	r3, r0
 800081a:	2b09      	cmp	r3, #9
 800081c:	d826      	bhi.n	800086c <d_substitution+0x78>
 800081e:	2100      	movs	r1, #0
 8000820:	e00d      	b.n	800083e <d_substitution+0x4a>
 8000822:	3b30      	subs	r3, #48	; 0x30
 8000824:	4299      	cmp	r1, r3
 8000826:	d81d      	bhi.n	8000864 <d_substitution+0x70>
 8000828:	68e1      	ldr	r1, [r4, #12]
 800082a:	780a      	ldrb	r2, [r1, #0]
 800082c:	1c48      	adds	r0, r1, #1
 800082e:	b11a      	cbz	r2, 8000838 <d_substitution+0x44>
 8000830:	60e0      	str	r0, [r4, #12]
 8000832:	780a      	ldrb	r2, [r1, #0]
 8000834:	2a5f      	cmp	r2, #95	; 0x5f
 8000836:	d03c      	beq.n	80008b2 <d_substitution+0xbe>
 8000838:	4619      	mov	r1, r3
 800083a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800083e:	b2c0      	uxtb	r0, r0
 8000840:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000844:	2809      	cmp	r0, #9
 8000846:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800084a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800084e:	d9e8      	bls.n	8000822 <d_substitution+0x2e>
 8000850:	f1bc 0f19 	cmp.w	ip, #25
 8000854:	d806      	bhi.n	8000864 <d_substitution+0x70>
 8000856:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800085a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800085e:	3b37      	subs	r3, #55	; 0x37
 8000860:	4299      	cmp	r1, r3
 8000862:	d9e1      	bls.n	8000828 <d_substitution+0x34>
 8000864:	2500      	movs	r5, #0
 8000866:	4628      	mov	r0, r5
 8000868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800086c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8000870:	2b19      	cmp	r3, #25
 8000872:	d9d4      	bls.n	800081e <d_substitution+0x2a>
 8000874:	68a3      	ldr	r3, [r4, #8]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2501      	movne	r5, #1
 8000880:	2500      	moveq	r5, #0
 8000882:	d100      	bne.n	8000886 <d_substitution+0x92>
 8000884:	b9b9      	cbnz	r1, 80008b6 <d_substitution+0xc2>
 8000886:	4b40      	ldr	r3, [pc, #256]	; (8000988 <d_substitution+0x194>)
 8000888:	2174      	movs	r1, #116	; 0x74
 800088a:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 800088e:	e001      	b.n	8000894 <d_substitution+0xa0>
 8000890:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
 8000894:	4291      	cmp	r1, r2
 8000896:	d015      	beq.n	80008c4 <d_substitution+0xd0>
 8000898:	4283      	cmp	r3, r0
 800089a:	d1f9      	bne.n	8000890 <d_substitution+0x9c>
 800089c:	e7e2      	b.n	8000864 <d_substitution+0x70>
 800089e:	2300      	movs	r3, #0
 80008a0:	6a22      	ldr	r2, [r4, #32]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d9de      	bls.n	8000864 <d_substitution+0x70>
 80008a6:	69e2      	ldr	r2, [r4, #28]
 80008a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80008ac:	4628      	mov	r0, r5
 80008ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008b2:	3301      	adds	r3, #1
 80008b4:	e7f4      	b.n	80008a0 <d_substitution+0xac>
 80008b6:	68e3      	ldr	r3, [r4, #12]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3b43      	subs	r3, #67	; 0x43
 80008bc:	2b01      	cmp	r3, #1
 80008be:	bf98      	it	ls
 80008c0:	460d      	movls	r5, r1
 80008c2:	e7e0      	b.n	8000886 <d_substitution+0x92>
 80008c4:	695e      	ldr	r6, [r3, #20]
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d056      	beq.n	8000978 <d_substitution+0x184>
 80008ca:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80008ce:	4282      	cmp	r2, r0
 80008d0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80008d4:	da55      	bge.n	8000982 <d_substitution+0x18e>
 80008d6:	f04f 0e00 	mov.w	lr, #0
 80008da:	f04f 0918 	mov.w	r9, #24
 80008de:	6927      	ldr	r7, [r4, #16]
 80008e0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80008e4:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80008e8:	3201      	adds	r2, #1
 80008ea:	e9c1 ee01 	strd	lr, lr, [r1, #4]
 80008ee:	6162      	str	r2, [r4, #20]
 80008f0:	f807 902c 	strb.w	r9, [r7, ip, lsl #2]
 80008f4:	e9c1 6803 	strd	r6, r8, [r1, #12]
 80008f8:	62a1      	str	r1, [r4, #40]	; 0x28
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d039      	beq.n	8000972 <d_substitution+0x17e>
 80008fe:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
 8000902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000904:	4290      	cmp	r0, r2
 8000906:	440b      	add	r3, r1
 8000908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800090a:	dd38      	ble.n	800097e <d_substitution+0x18a>
 800090c:	2600      	movs	r6, #0
 800090e:	f04f 0c18 	mov.w	ip, #24
 8000912:	6923      	ldr	r3, [r4, #16]
 8000914:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000918:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800091c:	3201      	adds	r2, #1
 800091e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000922:	6162      	str	r2, [r4, #20]
 8000924:	f803 c020 	strb.w	ip, [r3, r0, lsl #2]
 8000928:	e9c5 7103 	strd	r7, r1, [r5, #12]
 800092c:	68e3      	ldr	r3, [r4, #12]
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	2a42      	cmp	r2, #66	; 0x42
 8000932:	d198      	bne.n	8000866 <d_substitution+0x72>
 8000934:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000936:	3301      	adds	r3, #1
 8000938:	60e3      	str	r3, [r4, #12]
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff feea 	bl	8000714 <d_source_name>
 8000940:	462a      	mov	r2, r5
 8000942:	4603      	mov	r3, r0
 8000944:	214c      	movs	r1, #76	; 0x4c
 8000946:	4620      	mov	r0, r4
 8000948:	f7ff fc00 	bl	800014c <d_make_comp>
 800094c:	68e3      	ldr	r3, [r4, #12]
 800094e:	4605      	mov	r5, r0
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	2a42      	cmp	r2, #66	; 0x42
 8000954:	d0ef      	beq.n	8000936 <d_substitution+0x142>
 8000956:	62a6      	str	r6, [r4, #40]	; 0x28
 8000958:	2800      	cmp	r0, #0
 800095a:	d083      	beq.n	8000864 <d_substitution+0x70>
 800095c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000960:	4293      	cmp	r3, r2
 8000962:	f6bf af7f 	bge.w	8000864 <d_substitution+0x70>
 8000966:	69e1      	ldr	r1, [r4, #28]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800096e:	6222      	str	r2, [r4, #32]
 8000970:	e779      	b.n	8000866 <d_substitution+0x72>
 8000972:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
 8000976:	e7c4      	b.n	8000902 <d_substitution+0x10e>
 8000978:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800097c:	e7bd      	b.n	80008fa <d_substitution+0x106>
 800097e:	2500      	movs	r5, #0
 8000980:	e7d4      	b.n	800092c <d_substitution+0x138>
 8000982:	2100      	movs	r1, #0
 8000984:	e7b8      	b.n	80008f8 <d_substitution+0x104>
 8000986:	bf00      	nop
 8000988:	0800ee54 	.word	0x0800ee54

0800098c <d_print_java_identifier>:
 800098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000990:	188f      	adds	r7, r1, r2
 8000992:	42b9      	cmp	r1, r7
 8000994:	d24a      	bcs.n	8000a2c <d_print_java_identifier+0xa0>
 8000996:	460c      	mov	r4, r1
 8000998:	4605      	mov	r5, r0
 800099a:	f04f 0800 	mov.w	r8, #0
 800099e:	e00c      	b.n	80009ba <d_print_java_identifier+0x2e>
 80009a0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80009a4:	29ff      	cmp	r1, #255	; 0xff
 80009a6:	d033      	beq.n	8000a10 <d_print_java_identifier+0x84>
 80009a8:	1c4b      	adds	r3, r1, #1
 80009aa:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80009ae:	546e      	strb	r6, [r5, r1]
 80009b0:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 80009b4:	3401      	adds	r4, #1
 80009b6:	42a7      	cmp	r7, r4
 80009b8:	d938      	bls.n	8000a2c <d_print_java_identifier+0xa0>
 80009ba:	1b3b      	subs	r3, r7, r4
 80009bc:	2b03      	cmp	r3, #3
 80009be:	7826      	ldrb	r6, [r4, #0]
 80009c0:	ddee      	ble.n	80009a0 <d_print_java_identifier+0x14>
 80009c2:	2e5f      	cmp	r6, #95	; 0x5f
 80009c4:	d1ec      	bne.n	80009a0 <d_print_java_identifier+0x14>
 80009c6:	7863      	ldrb	r3, [r4, #1]
 80009c8:	2b5f      	cmp	r3, #95	; 0x5f
 80009ca:	d1e9      	bne.n	80009a0 <d_print_java_identifier+0x14>
 80009cc:	78a3      	ldrb	r3, [r4, #2]
 80009ce:	2b55      	cmp	r3, #85	; 0x55
 80009d0:	d1e6      	bne.n	80009a0 <d_print_java_identifier+0x14>
 80009d2:	1ce2      	adds	r2, r4, #3
 80009d4:	4297      	cmp	r7, r2
 80009d6:	d9e3      	bls.n	80009a0 <d_print_java_identifier+0x14>
 80009d8:	2100      	movs	r1, #0
 80009da:	e005      	b.n	80009e8 <d_print_java_identifier+0x5c>
 80009dc:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
 80009e0:	42ba      	cmp	r2, r7
 80009e2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80009e6:	d023      	beq.n	8000a30 <d_print_java_identifier+0xa4>
 80009e8:	4691      	mov	r9, r2
 80009ea:	f812 6b01 	ldrb.w	r6, [r2], #1
 80009ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	2809      	cmp	r0, #9
 80009f6:	f1a6 0c41 	sub.w	ip, r6, #65	; 0x41
 80009fa:	d9f1      	bls.n	80009e0 <d_print_java_identifier+0x54>
 80009fc:	f1bc 0f05 	cmp.w	ip, #5
 8000a00:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8000a04:	d9ea      	bls.n	80009dc <d_print_java_identifier+0x50>
 8000a06:	2b05      	cmp	r3, #5
 8000a08:	d814      	bhi.n	8000a34 <d_print_java_identifier+0xa8>
 8000a0a:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
 8000a0e:	e7e7      	b.n	80009e0 <d_print_java_identifier+0x54>
 8000a10:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	; 0x108
 8000a14:	4628      	mov	r0, r5
 8000a16:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 8000a1a:	4798      	blx	r3
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000a22:	2100      	movs	r1, #0
 8000a24:	441a      	add	r2, r3
 8000a26:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 8000a2a:	e7be      	b.n	80009aa <d_print_java_identifier+0x1e>
 8000a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a30:	265f      	movs	r6, #95	; 0x5f
 8000a32:	e7b5      	b.n	80009a0 <d_print_java_identifier+0x14>
 8000a34:	454f      	cmp	r7, r9
 8000a36:	d9fb      	bls.n	8000a30 <d_print_java_identifier+0xa4>
 8000a38:	2e5f      	cmp	r6, #95	; 0x5f
 8000a3a:	d1f9      	bne.n	8000a30 <d_print_java_identifier+0xa4>
 8000a3c:	29ff      	cmp	r1, #255	; 0xff
 8000a3e:	d8af      	bhi.n	80009a0 <d_print_java_identifier+0x14>
 8000a40:	b2ce      	uxtb	r6, r1
 8000a42:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8000a46:	29ff      	cmp	r1, #255	; 0xff
 8000a48:	d007      	beq.n	8000a5a <d_print_java_identifier+0xce>
 8000a4a:	1c4b      	adds	r3, r1, #1
 8000a4c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000a50:	464c      	mov	r4, r9
 8000a52:	546e      	strb	r6, [r5, r1]
 8000a54:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 8000a58:	e7ac      	b.n	80009b4 <d_print_java_identifier+0x28>
 8000a5a:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	; 0x108
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 8000a64:	4798      	blx	r3
 8000a66:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 8000a72:	e7ea      	b.n	8000a4a <d_print_java_identifier+0xbe>

08000a74 <d_type>:
 8000a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a78:	68c2      	ldr	r2, [r0, #12]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	4610      	mov	r0, r2
 8000a80:	f7ff fd08 	bl	8000494 <next_is_type_qual.isra.0>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d16e      	bne.n	8000b66 <d_type+0xf2>
 8000a88:	7811      	ldrb	r1, [r2, #0]
 8000a8a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000a8e:	2b4a      	cmp	r3, #74	; 0x4a
 8000a90:	d864      	bhi.n	8000b5c <d_type+0xe8>
 8000a92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a96:	00b9      	.short	0x00b9
 8000a98:	00b900b9 	.word	0x00b900b9
 8000a9c:	00b900b9 	.word	0x00b900b9
 8000aa0:	00b900b9 	.word	0x00b900b9
 8000aa4:	00b900b9 	.word	0x00b900b9
 8000aa8:	006300b9 	.word	0x006300b9
 8000aac:	00630063 	.word	0x00630063
 8000ab0:	00630063 	.word	0x00630063
 8000ab4:	00630063 	.word	0x00630063
 8000ab8:	006301ff 	.word	0x006301ff
 8000abc:	014400ce 	.word	0x014400ce
 8000ac0:	013e0063 	.word	0x013e0063
 8000ac4:	006301e1 	.word	0x006301e1
 8000ac8:	00630063 	.word	0x00630063
 8000acc:	00630063 	.word	0x00630063
 8000ad0:	00b90241 	.word	0x00b90241
 8000ad4:	01c501d3 	.word	0x01c501d3
 8000ad8:	01b70063 	.word	0x01b70063
 8000adc:	00f4011a 	.word	0x00f4011a
 8000ae0:	006300dc 	.word	0x006300dc
 8000ae4:	00630063 	.word	0x00630063
 8000ae8:	00b90063 	.word	0x00b90063
 8000aec:	00630063 	.word	0x00630063
 8000af0:	00630063 	.word	0x00630063
 8000af4:	00630063 	.word	0x00630063
 8000af8:	00980098 	.word	0x00980098
 8000afc:	00980098 	.word	0x00980098
 8000b00:	00980098 	.word	0x00980098
 8000b04:	00980098 	.word	0x00980098
 8000b08:	00980098 	.word	0x00980098
 8000b0c:	00980063 	.word	0x00980063
 8000b10:	00980098 	.word	0x00980098
 8000b14:	00630098 	.word	0x00630098
 8000b18:	00630063 	.word	0x00630063
 8000b1c:	00980098 	.word	0x00980098
 8000b20:	009801ef 	.word	0x009801ef
 8000b24:	00980098 	.word	0x00980098
 8000b28:	00980098 	.word	0x00980098
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000b30:	4620      	mov	r0, r4
 8000b32:	6323      	str	r3, [r4, #48]	; 0x30
 8000b34:	f001 fbfa 	bl	800232c <d_expression_1>
 8000b38:	6325      	str	r5, [r4, #48]	; 0x30
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2143      	movs	r1, #67	; 0x43
 8000b40:	4620      	mov	r0, r4
 8000b42:	f7ff fb03 	bl	800014c <d_make_comp>
 8000b46:	4605      	mov	r5, r0
 8000b48:	9001      	str	r0, [sp, #4]
 8000b4a:	b138      	cbz	r0, 8000b5c <d_type+0xe8>
 8000b4c:	68e3      	ldr	r3, [r4, #12]
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	b122      	cbz	r2, 8000b5c <d_type+0xe8>
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60e2      	str	r2, [r4, #12]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b45      	cmp	r3, #69	; 0x45
 8000b5a:	d05c      	beq.n	8000c16 <d_type+0x1a2>
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4628      	mov	r0, r5
 8000b60:	b003      	add	sp, #12
 8000b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b66:	2200      	movs	r2, #0
 8000b68:	4620      	mov	r0, r4
 8000b6a:	a901      	add	r1, sp, #4
 8000b6c:	f001 fe3a 	bl	80027e4 <d_cv_qualifiers>
 8000b70:	4605      	mov	r5, r0
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d0f2      	beq.n	8000b5c <d_type+0xe8>
 8000b76:	68e3      	ldr	r3, [r4, #12]
 8000b78:	4620      	mov	r0, r4
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b46      	cmp	r3, #70	; 0x46
 8000b7e:	d01e      	beq.n	8000bbe <d_type+0x14a>
 8000b80:	f7ff ff78 	bl	8000a74 <d_type>
 8000b84:	6028      	str	r0, [r5, #0]
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d0e8      	beq.n	8000b5c <d_type+0xe8>
 8000b8a:	7803      	ldrb	r3, [r0, #0]
 8000b8c:	3b1f      	subs	r3, #31
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d805      	bhi.n	8000b9e <d_type+0x12a>
 8000b92:	9a01      	ldr	r2, [sp, #4]
 8000b94:	68c3      	ldr	r3, [r0, #12]
 8000b96:	60c2      	str	r2, [r0, #12]
 8000b98:	682a      	ldr	r2, [r5, #0]
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	602b      	str	r3, [r5, #0]
 8000b9e:	9d01      	ldr	r5, [sp, #4]
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0db      	beq.n	8000b5c <d_type+0xe8>
 8000ba4:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	dad7      	bge.n	8000b5c <d_type+0xe8>
 8000bac:	4628      	mov	r0, r5
 8000bae:	69e1      	ldr	r1, [r4, #28]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000bb6:	6222      	str	r2, [r4, #32]
 8000bb8:	b003      	add	sp, #12
 8000bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bbe:	f000 fc69 	bl	8001494 <d_function_type>
 8000bc2:	6028      	str	r0, [r5, #0]
 8000bc4:	e7df      	b.n	8000b86 <d_type+0x112>
 8000bc6:	48b2      	ldr	r0, [pc, #712]	; (8000e90 <d_type+0x41c>)
 8000bc8:	3961      	subs	r1, #97	; 0x61
 8000bca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000bce:	6963      	ldr	r3, [r4, #20]
 8000bd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000bd4:	69a0      	ldr	r0, [r4, #24]
 8000bd6:	4283      	cmp	r3, r0
 8000bd8:	f280 835a 	bge.w	8001290 <d_type+0x81c>
 8000bdc:	1c57      	adds	r7, r2, #1
 8000bde:	f04f 0c27 	mov.w	ip, #39	; 0x27
 8000be2:	2200      	movs	r2, #0
 8000be4:	6920      	ldr	r0, [r4, #16]
 8000be6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8000bea:	eb00 0586 	add.w	r5, r0, r6, lsl #2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	e9c5 2201 	strd	r2, r2, [r5, #4]
 8000bf4:	6163      	str	r3, [r4, #20]
 8000bf6:	f800 c026 	strb.w	ip, [r0, r6, lsl #2]
 8000bfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bfc:	60e9      	str	r1, [r5, #12]
 8000bfe:	6849      	ldr	r1, [r1, #4]
 8000c00:	60e7      	str	r7, [r4, #12]
 8000c02:	440b      	add	r3, r1
 8000c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c06:	e7aa      	b.n	8000b5e <d_type+0xea>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f000 fe11 	bl	8001830 <d_name>
 8000c0e:	4605      	mov	r5, r0
 8000c10:	9001      	str	r0, [sp, #4]
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0a2      	beq.n	8000b5c <d_type+0xe8>
 8000c16:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	da9e      	bge.n	8000b5c <d_type+0xe8>
 8000c1e:	69e1      	ldr	r1, [r4, #28]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000c26:	9d01      	ldr	r5, [sp, #4]
 8000c28:	6222      	str	r2, [r4, #32]
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	b003      	add	sp, #12
 8000c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c32:	3201      	adds	r2, #1
 8000c34:	60e2      	str	r2, [r4, #12]
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff ff1c 	bl	8000a74 <d_type>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4602      	mov	r2, r0
 8000c40:	2125      	movs	r1, #37	; 0x25
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fa82 	bl	800014c <d_make_comp>
 8000c48:	4605      	mov	r5, r0
 8000c4a:	9001      	str	r0, [sp, #4]
 8000c4c:	e7e1      	b.n	8000c12 <d_type+0x19e>
 8000c4e:	3201      	adds	r2, #1
 8000c50:	60e2      	str	r2, [r4, #12]
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff fd5e 	bl	8000714 <d_source_name>
 8000c58:	68e3      	ldr	r3, [r4, #12]
 8000c5a:	9001      	str	r0, [sp, #4]
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	4605      	mov	r5, r0
 8000c60:	2a49      	cmp	r2, #73	; 0x49
 8000c62:	f000 82b9 	beq.w	80011d8 <d_type+0x764>
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff ff04 	bl	8000a74 <d_type>
 8000c6c:	2121      	movs	r1, #33	; 0x21
 8000c6e:	4602      	mov	r2, r0
 8000c70:	9b01      	ldr	r3, [sp, #4]
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff fa6a 	bl	800014c <d_make_comp>
 8000c78:	4605      	mov	r5, r0
 8000c7a:	9001      	str	r0, [sp, #4]
 8000c7c:	e7c9      	b.n	8000c12 <d_type+0x19e>
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f7ff fcda 	bl	8000638 <d_template_param>
 8000c84:	68e6      	ldr	r6, [r4, #12]
 8000c86:	9001      	str	r0, [sp, #4]
 8000c88:	7833      	ldrb	r3, [r6, #0]
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	2b49      	cmp	r3, #73	; 0x49
 8000c8e:	d1c0      	bne.n	8000c12 <d_type+0x19e>
 8000c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 82c8 	bne.w	8001228 <d_type+0x7b4>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	f43f af5f 	beq.w	8000b5c <d_type+0xe8>
 8000c9e:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	f6bf af5a 	bge.w	8000b5c <d_type+0xe8>
 8000ca8:	69e1      	ldr	r1, [r4, #28]
 8000caa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8000cae:	3201      	adds	r2, #1
 8000cb0:	6222      	str	r2, [r4, #32]
 8000cb2:	7832      	ldrb	r2, [r6, #0]
 8000cb4:	3a49      	subs	r2, #73	; 0x49
 8000cb6:	2a01      	cmp	r2, #1
 8000cb8:	d805      	bhi.n	8000cc6 <d_type+0x252>
 8000cba:	3601      	adds	r6, #1
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	60e6      	str	r6, [r4, #12]
 8000cc0:	f001 fe66 	bl	8002990 <d_template_args_1>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	462a      	mov	r2, r5
 8000cc8:	e01c      	b.n	8000d04 <d_type+0x290>
 8000cca:	7853      	ldrb	r3, [r2, #1]
 8000ccc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000cd0:	2a09      	cmp	r2, #9
 8000cd2:	d905      	bls.n	8000ce0 <d_type+0x26c>
 8000cd4:	2b5f      	cmp	r3, #95	; 0x5f
 8000cd6:	d003      	beq.n	8000ce0 <d_type+0x26c>
 8000cd8:	3b41      	subs	r3, #65	; 0x41
 8000cda:	2b19      	cmp	r3, #25
 8000cdc:	f200 8297 	bhi.w	800120e <d_type+0x79a>
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fd86 	bl	80007f4 <d_substitution>
 8000ce8:	68e3      	ldr	r3, [r4, #12]
 8000cea:	9001      	str	r0, [sp, #4]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	4605      	mov	r5, r0
 8000cf0:	2a49      	cmp	r2, #73	; 0x49
 8000cf2:	f47f af34 	bne.w	8000b5e <d_type+0xea>
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60e3      	str	r3, [r4, #12]
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f001 fe48 	bl	8002990 <d_template_args_1>
 8000d00:	462a      	mov	r2, r5
 8000d02:	4603      	mov	r3, r0
 8000d04:	2104      	movs	r1, #4
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa20 	bl	800014c <d_make_comp>
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	9001      	str	r0, [sp, #4]
 8000d10:	e77f      	b.n	8000c12 <d_type+0x19e>
 8000d12:	4620      	mov	r0, r4
 8000d14:	f000 fbbe 	bl	8001494 <d_function_type>
 8000d18:	4605      	mov	r5, r0
 8000d1a:	9001      	str	r0, [sp, #4]
 8000d1c:	e779      	b.n	8000c12 <d_type+0x19e>
 8000d1e:	1c53      	adds	r3, r2, #1
 8000d20:	60e3      	str	r3, [r4, #12]
 8000d22:	7853      	ldrb	r3, [r2, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f43f af19 	beq.w	8000b5c <d_type+0xe8>
 8000d2a:	1c93      	adds	r3, r2, #2
 8000d2c:	60e3      	str	r3, [r4, #12]
 8000d2e:	7853      	ldrb	r3, [r2, #1]
 8000d30:	3b46      	subs	r3, #70	; 0x46
 8000d32:	2b30      	cmp	r3, #48	; 0x30
 8000d34:	f63f af12 	bhi.w	8000b5c <d_type+0xe8>
 8000d38:	a101      	add	r1, pc, #4	; (adr r1, 8000d40 <d_type+0x2cc>)
 8000d3a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000f49 	.word	0x08000f49
 8000d44:	08000b5d 	.word	0x08000b5d
 8000d48:	08000b5d 	.word	0x08000b5d
 8000d4c:	08000b5d 	.word	0x08000b5d
 8000d50:	08000b5d 	.word	0x08000b5d
 8000d54:	08000b5d 	.word	0x08000b5d
 8000d58:	08000b5d 	.word	0x08000b5d
 8000d5c:	08000b5d 	.word	0x08000b5d
 8000d60:	08000b5d 	.word	0x08000b5d
 8000d64:	08000b5d 	.word	0x08000b5d
 8000d68:	08000b5d 	.word	0x08000b5d
 8000d6c:	08000b5d 	.word	0x08000b5d
 8000d70:	08000b5d 	.word	0x08000b5d
 8000d74:	08000b5d 	.word	0x08000b5d
 8000d78:	08000b2d 	.word	0x08000b2d
 8000d7c:	08000b5d 	.word	0x08000b5d
 8000d80:	08000b5d 	.word	0x08000b5d
 8000d84:	08000b5d 	.word	0x08000b5d
 8000d88:	08000b5d 	.word	0x08000b5d
 8000d8c:	08000b5d 	.word	0x08000b5d
 8000d90:	08000b5d 	.word	0x08000b5d
 8000d94:	08000b5d 	.word	0x08000b5d
 8000d98:	08000b5d 	.word	0x08000b5d
 8000d9c:	08000b5d 	.word	0x08000b5d
 8000da0:	08000b5d 	.word	0x08000b5d
 8000da4:	08000b5d 	.word	0x08000b5d
 8000da8:	08000b5d 	.word	0x08000b5d
 8000dac:	08000fe9 	.word	0x08000fe9
 8000db0:	08000b5d 	.word	0x08000b5d
 8000db4:	08000fbd 	.word	0x08000fbd
 8000db8:	0800109b 	.word	0x0800109b
 8000dbc:	0800106b 	.word	0x0800106b
 8000dc0:	0800103b 	.word	0x0800103b
 8000dc4:	08000b5d 	.word	0x08000b5d
 8000dc8:	0800100b 	.word	0x0800100b
 8000dcc:	080011b9 	.word	0x080011b9
 8000dd0:	08000b5d 	.word	0x08000b5d
 8000dd4:	08000b5d 	.word	0x08000b5d
 8000dd8:	08000b5d 	.word	0x08000b5d
 8000ddc:	08000b5d 	.word	0x08000b5d
 8000de0:	0800118b 	.word	0x0800118b
 8000de4:	08000b5d 	.word	0x08000b5d
 8000de8:	08001173 	.word	0x08001173
 8000dec:	08000b5d 	.word	0x08000b5d
 8000df0:	08000b5d 	.word	0x08000b5d
 8000df4:	08001143 	.word	0x08001143
 8000df8:	08000b2d 	.word	0x08000b2d
 8000dfc:	08001113 	.word	0x08001113
 8000e00:	080010b9 	.word	0x080010b9
 8000e04:	3201      	adds	r2, #1
 8000e06:	60e2      	str	r2, [r4, #12]
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f7ff fe33 	bl	8000a74 <d_type>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4602      	mov	r2, r0
 8000e12:	2123      	movs	r1, #35	; 0x23
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff f999 	bl	800014c <d_make_comp>
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	9001      	str	r0, [sp, #4]
 8000e1e:	e6f8      	b.n	8000c12 <d_type+0x19e>
 8000e20:	3201      	adds	r2, #1
 8000e22:	60e2      	str	r2, [r4, #12]
 8000e24:	4620      	mov	r0, r4
 8000e26:	f7ff fe25 	bl	8000a74 <d_type>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	2122      	movs	r1, #34	; 0x22
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff f98b 	bl	800014c <d_make_comp>
 8000e36:	4605      	mov	r5, r0
 8000e38:	9001      	str	r0, [sp, #4]
 8000e3a:	e6ea      	b.n	8000c12 <d_type+0x19e>
 8000e3c:	3201      	adds	r2, #1
 8000e3e:	60e2      	str	r2, [r4, #12]
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff fe17 	bl	8000a74 <d_type>
 8000e46:	2300      	movs	r3, #0
 8000e48:	4602      	mov	r2, r0
 8000e4a:	2124      	movs	r1, #36	; 0x24
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff f97d 	bl	800014c <d_make_comp>
 8000e52:	4605      	mov	r5, r0
 8000e54:	9001      	str	r0, [sp, #4]
 8000e56:	e6dc      	b.n	8000c12 <d_type+0x19e>
 8000e58:	3201      	adds	r2, #1
 8000e5a:	60e2      	str	r2, [r4, #12]
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fe09 	bl	8000a74 <d_type>
 8000e62:	2300      	movs	r3, #0
 8000e64:	4602      	mov	r2, r0
 8000e66:	2126      	movs	r1, #38	; 0x26
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff f96f 	bl	800014c <d_make_comp>
 8000e6e:	4605      	mov	r5, r0
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	e6ce      	b.n	8000c12 <d_type+0x19e>
 8000e74:	3201      	adds	r2, #1
 8000e76:	60e2      	str	r2, [r4, #12]
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff fc4b 	bl	8000714 <d_source_name>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4602      	mov	r2, r0
 8000e82:	2128      	movs	r1, #40	; 0x28
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff f961 	bl	800014c <d_make_comp>
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	9001      	str	r0, [sp, #4]
 8000e8e:	e6c0      	b.n	8000c12 <d_type+0x19e>
 8000e90:	0800ef18 	.word	0x0800ef18
 8000e94:	1c51      	adds	r1, r2, #1
 8000e96:	60e1      	str	r1, [r4, #12]
 8000e98:	7853      	ldrb	r3, [r2, #1]
 8000e9a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e9c:	f000 819a 	beq.w	80011d4 <d_type+0x760>
 8000ea0:	3b30      	subs	r3, #48	; 0x30
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	f200 81a5 	bhi.w	80011f2 <d_type+0x77e>
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	461d      	mov	r5, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	60e3      	str	r3, [r4, #12]
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	3a30      	subs	r2, #48	; 0x30
 8000eb4:	2a09      	cmp	r2, #9
 8000eb6:	d9f8      	bls.n	8000eaa <d_type+0x436>
 8000eb8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	eba3 0c01 	sub.w	ip, r3, r1
 8000ec2:	f6bf ae4b 	bge.w	8000b5c <d_type+0xe8>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8000ecc:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8000ed0:	eb0e 0687 	add.w	r6, lr, r7, lsl #2
 8000ed4:	3201      	adds	r2, #1
 8000ed6:	4584      	cmp	ip, r0
 8000ed8:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000edc:	ea4f 0787 	mov.w	r7, r7, lsl #2
 8000ee0:	6162      	str	r2, [r4, #20]
 8000ee2:	f77f ae3b 	ble.w	8000b5c <d_type+0xe8>
 8000ee6:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000eea:	f80e 0007 	strb.w	r0, [lr, r7]
 8000eee:	e9c6 1c03 	strd	r1, ip, [r6, #12]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	786b      	ldrb	r3, [r5, #1]
 8000ef6:	2b5f      	cmp	r3, #95	; 0x5f
 8000ef8:	f47f ae30 	bne.w	8000b5c <d_type+0xe8>
 8000efc:	3101      	adds	r1, #1
 8000efe:	60e1      	str	r1, [r4, #12]
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fdb7 	bl	8000a74 <d_type>
 8000f06:	4632      	mov	r2, r6
 8000f08:	4603      	mov	r3, r0
 8000f0a:	212a      	movs	r1, #42	; 0x2a
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff f91d 	bl	800014c <d_make_comp>
 8000f12:	4605      	mov	r5, r0
 8000f14:	9001      	str	r0, [sp, #4]
 8000f16:	e67c      	b.n	8000c12 <d_type+0x19e>
 8000f18:	3201      	adds	r2, #1
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	60e2      	str	r2, [r4, #12]
 8000f1e:	f7ff fda9 	bl	8000a74 <d_type>
 8000f22:	4605      	mov	r5, r0
 8000f24:	2800      	cmp	r0, #0
 8000f26:	f43f ae19 	beq.w	8000b5c <d_type+0xe8>
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff fda2 	bl	8000a74 <d_type>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2800      	cmp	r0, #0
 8000f34:	f43f ae12 	beq.w	8000b5c <d_type+0xe8>
 8000f38:	462a      	mov	r2, r5
 8000f3a:	212b      	movs	r1, #43	; 0x2b
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff f905 	bl	800014c <d_make_comp>
 8000f42:	4605      	mov	r5, r0
 8000f44:	9001      	str	r0, [sp, #4]
 8000f46:	e664      	b.n	8000c12 <d_type+0x19e>
 8000f48:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	f280 81a3 	bge.w	8001298 <d_type+0x824>
 8000f52:	2600      	movs	r6, #0
 8000f54:	272c      	movs	r7, #44	; 0x2c
 8000f56:	6921      	ldr	r1, [r4, #16]
 8000f58:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000f5c:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8000f60:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	6163      	str	r3, [r4, #20]
 8000f68:	9501      	str	r5, [sp, #4]
 8000f6a:	f801 7020 	strb.w	r7, [r1, r0, lsl #2]
 8000f6e:	7893      	ldrb	r3, [r2, #2]
 8000f70:	3b30      	subs	r3, #48	; 0x30
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	bf94      	ite	ls
 8000f78:	2301      	movls	r3, #1
 8000f7a:	4633      	movhi	r3, r6
 8000f7c:	822b      	strh	r3, [r5, #16]
 8000f7e:	d803      	bhi.n	8000f88 <d_type+0x514>
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff f92d 	bl	80001e0 <d_number>
 8000f86:	9d01      	ldr	r5, [sp, #4]
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff fd73 	bl	8000a74 <d_type>
 8000f8e:	9b01      	ldr	r3, [sp, #4]
 8000f90:	60e8      	str	r0, [r5, #12]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f43f ade1 	beq.w	8000b5c <d_type+0xe8>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f7ff f920 	bl	80001e0 <d_number>
 8000fa0:	68e2      	ldr	r2, [r4, #12]
 8000fa2:	7813      	ldrb	r3, [r2, #0]
 8000fa4:	b113      	cbz	r3, 8000fac <d_type+0x538>
 8000fa6:	1c53      	adds	r3, r2, #1
 8000fa8:	60e3      	str	r3, [r4, #12]
 8000faa:	7813      	ldrb	r3, [r2, #0]
 8000fac:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	9d01      	ldr	r5, [sp, #4]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	826b      	strh	r3, [r5, #18]
 8000fba:	e5d0      	b.n	8000b5e <d_type+0xea>
 8000fbc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	f6bf adcb 	bge.w	8000b5c <d_type+0xe8>
 8000fc6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fca:	3301      	adds	r3, #1
 8000fcc:	6163      	str	r3, [r4, #20]
 8000fce:	210e      	movs	r1, #14
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6922      	ldr	r2, [r4, #16]
 8000fd4:	48b2      	ldr	r0, [pc, #712]	; (80012a0 <d_type+0x82c>)
 8000fd6:	00ae      	lsls	r6, r5, #2
 8000fd8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fdc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fe0:	5593      	strb	r3, [r2, r6]
 8000fe2:	e9c5 0103 	strd	r0, r1, [r5, #12]
 8000fe6:	e5ba      	b.n	8000b5e <d_type+0xea>
 8000fe8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fec:	4293      	cmp	r3, r2
 8000fee:	f6bf adb5 	bge.w	8000b5c <d_type+0xe8>
 8000ff2:	6922      	ldr	r2, [r4, #16]
 8000ff4:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	00ae      	lsls	r6, r5, #2
 8000ffc:	6163      	str	r3, [r4, #20]
 8000ffe:	2104      	movs	r1, #4
 8001000:	2300      	movs	r3, #0
 8001002:	48a8      	ldr	r0, [pc, #672]	; (80012a4 <d_type+0x830>)
 8001004:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8001008:	e7e8      	b.n	8000fdc <d_type+0x568>
 800100a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800100e:	4293      	cmp	r3, r2
 8001010:	f280 813e 	bge.w	8001290 <d_type+0x81c>
 8001014:	2000      	movs	r0, #0
 8001016:	2727      	movs	r7, #39	; 0x27
 8001018:	6922      	ldr	r2, [r4, #16]
 800101a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800101e:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001022:	3301      	adds	r3, #1
 8001024:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001028:	6163      	str	r3, [r4, #20]
 800102a:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 800102e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001030:	4e9d      	ldr	r6, [pc, #628]	; (80012a8 <d_type+0x834>)
 8001032:	3304      	adds	r3, #4
 8001034:	60ee      	str	r6, [r5, #12]
 8001036:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001038:	e591      	b.n	8000b5e <d_type+0xea>
 800103a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800103e:	4293      	cmp	r3, r2
 8001040:	f280 8126 	bge.w	8001290 <d_type+0x81c>
 8001044:	2000      	movs	r0, #0
 8001046:	2727      	movs	r7, #39	; 0x27
 8001048:	6922      	ldr	r2, [r4, #16]
 800104a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800104e:	4e97      	ldr	r6, [pc, #604]	; (80012ac <d_type+0x838>)
 8001050:	3301      	adds	r3, #1
 8001052:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001056:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800105a:	6163      	str	r3, [r4, #20]
 800105c:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 8001060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001062:	60ee      	str	r6, [r5, #12]
 8001064:	3309      	adds	r3, #9
 8001066:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001068:	e579      	b.n	8000b5e <d_type+0xea>
 800106a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800106e:	4293      	cmp	r3, r2
 8001070:	f280 810e 	bge.w	8001290 <d_type+0x81c>
 8001074:	2000      	movs	r0, #0
 8001076:	2727      	movs	r7, #39	; 0x27
 8001078:	6922      	ldr	r2, [r4, #16]
 800107a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800107e:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001082:	3301      	adds	r3, #1
 8001084:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001088:	6163      	str	r3, [r4, #20]
 800108a:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 800108e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001090:	4e87      	ldr	r6, [pc, #540]	; (80012b0 <d_type+0x83c>)
 8001092:	330a      	adds	r3, #10
 8001094:	60ee      	str	r6, [r5, #12]
 8001096:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001098:	e561      	b.n	8000b5e <d_type+0xea>
 800109a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800109e:	4293      	cmp	r3, r2
 80010a0:	f280 80f6 	bge.w	8001290 <d_type+0x81c>
 80010a4:	6922      	ldr	r2, [r4, #16]
 80010a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010aa:	2000      	movs	r0, #0
 80010ac:	2727      	movs	r7, #39	; 0x27
 80010ae:	4e81      	ldr	r6, [pc, #516]	; (80012b4 <d_type+0x840>)
 80010b0:	3301      	adds	r3, #1
 80010b2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010b6:	e7ce      	b.n	8001056 <d_type+0x5e2>
 80010b8:	7893      	ldrb	r3, [r2, #2]
 80010ba:	2b5f      	cmp	r3, #95	; 0x5f
 80010bc:	f000 80da 	beq.w	8001274 <d_type+0x800>
 80010c0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	f6bf ad49 	bge.w	8000b5c <d_type+0xe8>
 80010ca:	2600      	movs	r6, #0
 80010cc:	2742      	movs	r7, #66	; 0x42
 80010ce:	6922      	ldr	r2, [r4, #16]
 80010d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010d4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010d8:	3301      	adds	r3, #1
 80010da:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80010de:	4620      	mov	r0, r4
 80010e0:	6163      	str	r3, [r4, #20]
 80010e2:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 80010e6:	f7ff f87b 	bl	80001e0 <d_number>
 80010ea:	60e8      	str	r0, [r5, #12]
 80010ec:	68e3      	ldr	r3, [r4, #12]
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	2a5f      	cmp	r2, #95	; 0x5f
 80010f2:	f47f ad33 	bne.w	8000b5c <d_type+0xe8>
 80010f6:	3301      	adds	r3, #1
 80010f8:	60e3      	str	r3, [r4, #12]
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fcba 	bl	8000a74 <d_type>
 8001100:	462a      	mov	r2, r5
 8001102:	4603      	mov	r3, r0
 8001104:	212d      	movs	r1, #45	; 0x2d
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff f820 	bl	800014c <d_make_comp>
 800110c:	4605      	mov	r5, r0
 800110e:	9001      	str	r0, [sp, #4]
 8001110:	e57f      	b.n	8000c12 <d_type+0x19e>
 8001112:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001116:	4293      	cmp	r3, r2
 8001118:	f280 80ba 	bge.w	8001290 <d_type+0x81c>
 800111c:	2000      	movs	r0, #0
 800111e:	2727      	movs	r7, #39	; 0x27
 8001120:	6922      	ldr	r2, [r4, #16]
 8001122:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001126:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800112a:	3301      	adds	r3, #1
 800112c:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001130:	6163      	str	r3, [r4, #20]
 8001132:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 8001136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001138:	4e5f      	ldr	r6, [pc, #380]	; (80012b8 <d_type+0x844>)
 800113a:	3307      	adds	r3, #7
 800113c:	60ee      	str	r6, [r5, #12]
 800113e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001140:	e50d      	b.n	8000b5e <d_type+0xea>
 8001142:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001146:	4293      	cmp	r3, r2
 8001148:	f280 80a2 	bge.w	8001290 <d_type+0x81c>
 800114c:	2000      	movs	r0, #0
 800114e:	2727      	movs	r7, #39	; 0x27
 8001150:	6922      	ldr	r2, [r4, #16]
 8001152:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001156:	4e59      	ldr	r6, [pc, #356]	; (80012bc <d_type+0x848>)
 8001158:	3301      	adds	r3, #1
 800115a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800115e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001162:	6163      	str	r3, [r4, #20]
 8001164:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 8001168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800116a:	60ee      	str	r6, [r5, #12]
 800116c:	3308      	adds	r3, #8
 800116e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001170:	e4f5      	b.n	8000b5e <d_type+0xea>
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff fc7e 	bl	8000a74 <d_type>
 8001178:	2300      	movs	r3, #0
 800117a:	4602      	mov	r2, r0
 800117c:	214b      	movs	r1, #75	; 0x4b
 800117e:	4620      	mov	r0, r4
 8001180:	f7fe ffe4 	bl	800014c <d_make_comp>
 8001184:	4605      	mov	r5, r0
 8001186:	9001      	str	r0, [sp, #4]
 8001188:	e543      	b.n	8000c12 <d_type+0x19e>
 800118a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800118e:	4293      	cmp	r3, r2
 8001190:	da7e      	bge.n	8001290 <d_type+0x81c>
 8001192:	2000      	movs	r0, #0
 8001194:	2727      	movs	r7, #39	; 0x27
 8001196:	6922      	ldr	r2, [r4, #16]
 8001198:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800119c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80011a0:	3301      	adds	r3, #1
 80011a2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011a6:	6163      	str	r3, [r4, #20]
 80011a8:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 80011ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011ae:	4e44      	ldr	r6, [pc, #272]	; (80012c0 <d_type+0x84c>)
 80011b0:	3311      	adds	r3, #17
 80011b2:	60ee      	str	r6, [r5, #12]
 80011b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011b6:	e4d2      	b.n	8000b5e <d_type+0xea>
 80011b8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80011bc:	4293      	cmp	r3, r2
 80011be:	da67      	bge.n	8001290 <d_type+0x81c>
 80011c0:	6922      	ldr	r2, [r4, #16]
 80011c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011c6:	2000      	movs	r0, #0
 80011c8:	2727      	movs	r7, #39	; 0x27
 80011ca:	4e3e      	ldr	r6, [pc, #248]	; (80012c4 <d_type+0x850>)
 80011cc:	3301      	adds	r3, #1
 80011ce:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80011d2:	e7c4      	b.n	800115e <d_type+0x6ea>
 80011d4:	2600      	movs	r6, #0
 80011d6:	e691      	b.n	8000efc <d_type+0x488>
 80011d8:	3301      	adds	r3, #1
 80011da:	60e3      	str	r3, [r4, #12]
 80011dc:	4620      	mov	r0, r4
 80011de:	f001 fbd7 	bl	8002990 <d_template_args_1>
 80011e2:	462a      	mov	r2, r5
 80011e4:	4603      	mov	r3, r0
 80011e6:	2104      	movs	r1, #4
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7fe ffaf 	bl	800014c <d_make_comp>
 80011ee:	9001      	str	r0, [sp, #4]
 80011f0:	e539      	b.n	8000c66 <d_type+0x1f2>
 80011f2:	2301      	movs	r3, #1
 80011f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80011f6:	4620      	mov	r0, r4
 80011f8:	6323      	str	r3, [r4, #48]	; 0x30
 80011fa:	f001 f897 	bl	800232c <d_expression_1>
 80011fe:	6325      	str	r5, [r4, #48]	; 0x30
 8001200:	4606      	mov	r6, r0
 8001202:	2800      	cmp	r0, #0
 8001204:	f43f acaa 	beq.w	8000b5c <d_type+0xe8>
 8001208:	68e1      	ldr	r1, [r4, #12]
 800120a:	780b      	ldrb	r3, [r1, #0]
 800120c:	e673      	b.n	8000ef6 <d_type+0x482>
 800120e:	4620      	mov	r0, r4
 8001210:	f000 fb0e 	bl	8001830 <d_name>
 8001214:	4605      	mov	r5, r0
 8001216:	9001      	str	r0, [sp, #4]
 8001218:	2800      	cmp	r0, #0
 800121a:	f43f ac9f 	beq.w	8000b5c <d_type+0xe8>
 800121e:	7803      	ldrb	r3, [r0, #0]
 8001220:	2b18      	cmp	r3, #24
 8001222:	f47f acf8 	bne.w	8000c16 <d_type+0x1a2>
 8001226:	e49a      	b.n	8000b5e <d_type+0xea>
 8001228:	1c73      	adds	r3, r6, #1
 800122a:	60e3      	str	r3, [r4, #12]
 800122c:	4620      	mov	r0, r4
 800122e:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001232:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001236:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001238:	f001 fbaa 	bl	8002990 <d_template_args_1>
 800123c:	68e3      	ldr	r3, [r4, #12]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b49      	cmp	r3, #73	; 0x49
 8001242:	d007      	beq.n	8001254 <d_type+0x7e0>
 8001244:	9d01      	ldr	r5, [sp, #4]
 8001246:	60e6      	str	r6, [r4, #12]
 8001248:	f8c4 9014 	str.w	r9, [r4, #20]
 800124c:	f8c4 8020 	str.w	r8, [r4, #32]
 8001250:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001252:	e4de      	b.n	8000c12 <d_type+0x19e>
 8001254:	9a01      	ldr	r2, [sp, #4]
 8001256:	2a00      	cmp	r2, #0
 8001258:	f43f ac80 	beq.w	8000b5c <d_type+0xe8>
 800125c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8001260:	4299      	cmp	r1, r3
 8001262:	f6bf ac7b 	bge.w	8000b5c <d_type+0xe8>
 8001266:	69e5      	ldr	r5, [r4, #28]
 8001268:	4603      	mov	r3, r0
 800126a:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 800126e:	3101      	adds	r1, #1
 8001270:	6221      	str	r1, [r4, #32]
 8001272:	e547      	b.n	8000d04 <d_type+0x290>
 8001274:	2301      	movs	r3, #1
 8001276:	3203      	adds	r2, #3
 8001278:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800127a:	4620      	mov	r0, r4
 800127c:	60e2      	str	r2, [r4, #12]
 800127e:	6323      	str	r3, [r4, #48]	; 0x30
 8001280:	f001 f854 	bl	800232c <d_expression_1>
 8001284:	6325      	str	r5, [r4, #48]	; 0x30
 8001286:	4605      	mov	r5, r0
 8001288:	2800      	cmp	r0, #0
 800128a:	f47f af2f 	bne.w	80010ec <d_type+0x678>
 800128e:	e465      	b.n	8000b5c <d_type+0xe8>
 8001290:	2300      	movs	r3, #0
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	deff      	udf	#255	; 0xff
 8001298:	2300      	movs	r3, #0
 800129a:	701b      	strb	r3, [r3, #0]
 800129c:	deff      	udf	#255	; 0xff
 800129e:	bf00      	nop
 80012a0:	0800f9b8 	.word	0x0800f9b8
 80012a4:	0800f9b0 	.word	0x0800f9b0
 80012a8:	0800f15c 	.word	0x0800f15c
 80012ac:	0800f120 	.word	0x0800f120
 80012b0:	0800f148 	.word	0x0800f148
 80012b4:	0800f134 	.word	0x0800f134
 80012b8:	0800f170 	.word	0x0800f170
 80012bc:	0800f184 	.word	0x0800f184
 80012c0:	0800f1ac 	.word	0x0800f1ac
 80012c4:	0800f198 	.word	0x0800f198

080012c8 <d_operator_name>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	68c3      	ldr	r3, [r0, #12]
 80012cc:	4606      	mov	r6, r0
 80012ce:	781f      	ldrb	r7, [r3, #0]
 80012d0:	bb77      	cbnz	r7, 8001330 <d_operator_name+0x68>
 80012d2:	f04f 0e00 	mov.w	lr, #0
 80012d6:	2145      	movs	r1, #69	; 0x45
 80012d8:	2200      	movs	r2, #0
 80012da:	4d3c      	ldr	r5, [pc, #240]	; (80013cc <d_operator_name+0x104>)
 80012dc:	1a8b      	subs	r3, r1, r2
 80012de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80012e2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80012e6:	0118      	lsls	r0, r3, #4
 80012e8:	582c      	ldr	r4, [r5, r0]
 80012ea:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
 80012ee:	7820      	ldrb	r0, [r4, #0]
 80012f0:	42b8      	cmp	r0, r7
 80012f2:	d006      	beq.n	8001302 <d_operator_name+0x3a>
 80012f4:	bf8c      	ite	hi
 80012f6:	4619      	movhi	r1, r3
 80012f8:	1c5a      	addls	r2, r3, #1
 80012fa:	428a      	cmp	r2, r1
 80012fc:	d1ee      	bne.n	80012dc <d_operator_name+0x14>
 80012fe:	2000      	movs	r0, #0
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001302:	7860      	ldrb	r0, [r4, #1]
 8001304:	4570      	cmp	r0, lr
 8001306:	d1f5      	bne.n	80012f4 <d_operator_name+0x2c>
 8001308:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 800130c:	4293      	cmp	r3, r2
 800130e:	daf6      	bge.n	80012fe <d_operator_name+0x36>
 8001310:	2400      	movs	r4, #0
 8001312:	2532      	movs	r5, #50	; 0x32
 8001314:	6932      	ldr	r2, [r6, #16]
 8001316:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800131a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800131e:	3301      	adds	r3, #1
 8001320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8001324:	6173      	str	r3, [r6, #20]
 8001326:	f802 5021 	strb.w	r5, [r2, r1, lsl #2]
 800132a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60c2      	str	r2, [r0, #12]
 8001334:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001338:	781f      	ldrb	r7, [r3, #0]
 800133a:	f1be 0f00 	cmp.w	lr, #0
 800133e:	d102      	bne.n	8001346 <d_operator_name+0x7e>
 8001340:	2f76      	cmp	r7, #118	; 0x76
 8001342:	d0c8      	beq.n	80012d6 <d_operator_name+0xe>
 8001344:	e7c5      	b.n	80012d2 <d_operator_name+0xa>
 8001346:	1c9a      	adds	r2, r3, #2
 8001348:	60c2      	str	r2, [r0, #12]
 800134a:	2f76      	cmp	r7, #118	; 0x76
 800134c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001350:	d11f      	bne.n	8001392 <d_operator_name+0xca>
 8001352:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
 8001356:	b2e3      	uxtb	r3, r4
 8001358:	2b09      	cmp	r3, #9
 800135a:	d8bc      	bhi.n	80012d6 <d_operator_name+0xe>
 800135c:	f7ff f9da 	bl	8000714 <d_source_name>
 8001360:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
 8001364:	428b      	cmp	r3, r1
 8001366:	4602      	mov	r2, r0
 8001368:	dac9      	bge.n	80012fe <d_operator_name+0x36>
 800136a:	2100      	movs	r1, #0
 800136c:	6935      	ldr	r5, [r6, #16]
 800136e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001372:	0087      	lsls	r7, r0, #2
 8001374:	3301      	adds	r3, #1
 8001376:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800137a:	e9c0 1101 	strd	r1, r1, [r0, #4]
 800137e:	6173      	str	r3, [r6, #20]
 8001380:	2a00      	cmp	r2, #0
 8001382:	d0bc      	beq.n	80012fe <d_operator_name+0x36>
 8001384:	2333      	movs	r3, #51	; 0x33
 8001386:	e9c0 1101 	strd	r1, r1, [r0, #4]
 800138a:	55eb      	strb	r3, [r5, r7]
 800138c:	e9c0 4203 	strd	r4, r2, [r0, #12]
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001392:	2f63      	cmp	r7, #99	; 0x63
 8001394:	d19f      	bne.n	80012d6 <d_operator_name+0xe>
 8001396:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800139a:	d19c      	bne.n	80012d6 <d_operator_name+0xe>
 800139c:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	095b      	lsrs	r3, r3, #5
 80013a6:	6343      	str	r3, [r0, #52]	; 0x34
 80013a8:	f7ff fb64 	bl	8000a74 <d_type>
 80013ac:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80013ae:	4602      	mov	r2, r0
 80013b0:	b133      	cbz	r3, 80013c0 <d_operator_name+0xf8>
 80013b2:	2300      	movs	r3, #0
 80013b4:	2135      	movs	r1, #53	; 0x35
 80013b6:	4630      	mov	r0, r6
 80013b8:	f7fe fec8 	bl	800014c <d_make_comp>
 80013bc:	6374      	str	r4, [r6, #52]	; 0x34
 80013be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c0:	2134      	movs	r1, #52	; 0x34
 80013c2:	4630      	mov	r0, r6
 80013c4:	f7fe fec2 	bl	800014c <d_make_comp>
 80013c8:	e7f8      	b.n	80013bc <d_operator_name+0xf4>
 80013ca:	bf00      	nop
 80013cc:	0800f1c0 	.word	0x0800f1c0

080013d0 <d_parmlist>:
 80013d0:	2300      	movs	r3, #0
 80013d2:	b530      	push	{r4, r5, lr}
 80013d4:	68c2      	ldr	r2, [r0, #12]
 80013d6:	b083      	sub	sp, #12
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	7813      	ldrb	r3, [r2, #0]
 80013dc:	b323      	cbz	r3, 8001428 <d_parmlist+0x58>
 80013de:	4604      	mov	r4, r0
 80013e0:	ad01      	add	r5, sp, #4
 80013e2:	e012      	b.n	800140a <d_parmlist+0x3a>
 80013e4:	2b4f      	cmp	r3, #79	; 0x4f
 80013e6:	d016      	beq.n	8001416 <d_parmlist+0x46>
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff fb43 	bl	8000a74 <d_type>
 80013ee:	4602      	mov	r2, r0
 80013f0:	b1d0      	cbz	r0, 8001428 <d_parmlist+0x58>
 80013f2:	2300      	movs	r3, #0
 80013f4:	212e      	movs	r1, #46	; 0x2e
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7fe fea8 	bl	800014c <d_make_comp>
 80013fc:	6028      	str	r0, [r5, #0]
 80013fe:	b198      	cbz	r0, 8001428 <d_parmlist+0x58>
 8001400:	68e2      	ldr	r2, [r4, #12]
 8001402:	f100 0510 	add.w	r5, r0, #16
 8001406:	7813      	ldrb	r3, [r2, #0]
 8001408:	b143      	cbz	r3, 800141c <d_parmlist+0x4c>
 800140a:	2b45      	cmp	r3, #69	; 0x45
 800140c:	d006      	beq.n	800141c <d_parmlist+0x4c>
 800140e:	2b2e      	cmp	r3, #46	; 0x2e
 8001410:	d004      	beq.n	800141c <d_parmlist+0x4c>
 8001412:	2b52      	cmp	r3, #82	; 0x52
 8001414:	d1e6      	bne.n	80013e4 <d_parmlist+0x14>
 8001416:	7853      	ldrb	r3, [r2, #1]
 8001418:	2b45      	cmp	r3, #69	; 0x45
 800141a:	d1e5      	bne.n	80013e8 <d_parmlist+0x18>
 800141c:	9801      	ldr	r0, [sp, #4]
 800141e:	b118      	cbz	r0, 8001428 <d_parmlist+0x58>
 8001420:	6903      	ldr	r3, [r0, #16]
 8001422:	b123      	cbz	r3, 800142e <d_parmlist+0x5e>
 8001424:	b003      	add	sp, #12
 8001426:	bd30      	pop	{r4, r5, pc}
 8001428:	2000      	movs	r0, #0
 800142a:	b003      	add	sp, #12
 800142c:	bd30      	pop	{r4, r5, pc}
 800142e:	68c2      	ldr	r2, [r0, #12]
 8001430:	7811      	ldrb	r1, [r2, #0]
 8001432:	2927      	cmp	r1, #39	; 0x27
 8001434:	d1f6      	bne.n	8001424 <d_parmlist+0x54>
 8001436:	68d2      	ldr	r2, [r2, #12]
 8001438:	7c11      	ldrb	r1, [r2, #16]
 800143a:	2909      	cmp	r1, #9
 800143c:	d1f2      	bne.n	8001424 <d_parmlist+0x54>
 800143e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001440:	6852      	ldr	r2, [r2, #4]
 8001442:	1a89      	subs	r1, r1, r2
 8001444:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001446:	60c3      	str	r3, [r0, #12]
 8001448:	e7ec      	b.n	8001424 <d_parmlist+0x54>
 800144a:	bf00      	nop

0800144c <d_bare_function_type>:
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	68c3      	ldr	r3, [r0, #12]
 8001450:	4605      	mov	r5, r0
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	2a4a      	cmp	r2, #74	; 0x4a
 8001456:	d01a      	beq.n	800148e <d_bare_function_type+0x42>
 8001458:	b181      	cbz	r1, 800147c <d_bare_function_type+0x30>
 800145a:	4628      	mov	r0, r5
 800145c:	f7ff fb0a 	bl	8000a74 <d_type>
 8001460:	4604      	mov	r4, r0
 8001462:	b190      	cbz	r0, 800148a <d_bare_function_type+0x3e>
 8001464:	4628      	mov	r0, r5
 8001466:	f7ff ffb3 	bl	80013d0 <d_parmlist>
 800146a:	4603      	mov	r3, r0
 800146c:	b168      	cbz	r0, 800148a <d_bare_function_type+0x3e>
 800146e:	4622      	mov	r2, r4
 8001470:	4628      	mov	r0, r5
 8001472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001476:	2129      	movs	r1, #41	; 0x29
 8001478:	f7fe be68 	b.w	800014c <d_make_comp>
 800147c:	4628      	mov	r0, r5
 800147e:	460c      	mov	r4, r1
 8001480:	f7ff ffa6 	bl	80013d0 <d_parmlist>
 8001484:	4603      	mov	r3, r0
 8001486:	2800      	cmp	r0, #0
 8001488:	d1f1      	bne.n	800146e <d_bare_function_type+0x22>
 800148a:	2000      	movs	r0, #0
 800148c:	bd70      	pop	{r4, r5, r6, pc}
 800148e:	3301      	adds	r3, #1
 8001490:	60c3      	str	r3, [r0, #12]
 8001492:	e7e2      	b.n	800145a <d_bare_function_type+0xe>

08001494 <d_function_type>:
 8001494:	b510      	push	{r4, lr}
 8001496:	4604      	mov	r4, r0
 8001498:	6880      	ldr	r0, [r0, #8]
 800149a:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 800149e:	d10b      	bne.n	80014b8 <d_function_type+0x24>
 80014a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80014a6:	d806      	bhi.n	80014b6 <d_function_type+0x22>
 80014a8:	1c51      	adds	r1, r2, #1
 80014aa:	68e3      	ldr	r3, [r4, #12]
 80014ac:	63a1      	str	r1, [r4, #56]	; 0x38
 80014ae:	7819      	ldrb	r1, [r3, #0]
 80014b0:	2946      	cmp	r1, #70	; 0x46
 80014b2:	d007      	beq.n	80014c4 <d_function_type+0x30>
 80014b4:	63a2      	str	r2, [r4, #56]	; 0x38
 80014b6:	bd10      	pop	{r4, pc}
 80014b8:	68e3      	ldr	r3, [r4, #12]
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	2a46      	cmp	r2, #70	; 0x46
 80014be:	d001      	beq.n	80014c4 <d_function_type+0x30>
 80014c0:	2000      	movs	r0, #0
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60e2      	str	r2, [r4, #12]
 80014c8:	785a      	ldrb	r2, [r3, #1]
 80014ca:	2101      	movs	r1, #1
 80014cc:	2a59      	cmp	r2, #89	; 0x59
 80014ce:	bf04      	itt	eq
 80014d0:	3302      	addeq	r3, #2
 80014d2:	60e3      	streq	r3, [r4, #12]
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffb9 	bl	800144c <d_bare_function_type>
 80014da:	4601      	mov	r1, r0
 80014dc:	4620      	mov	r0, r4
 80014de:	f7fe fee1 	bl	80002a4 <d_ref_qualifier>
 80014e2:	68e3      	ldr	r3, [r4, #12]
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	2a45      	cmp	r2, #69	; 0x45
 80014e8:	bf04      	itt	eq
 80014ea:	3301      	addeq	r3, #1
 80014ec:	60e3      	streq	r3, [r4, #12]
 80014ee:	68a3      	ldr	r3, [r4, #8]
 80014f0:	bf18      	it	ne
 80014f2:	2000      	movne	r0, #0
 80014f4:	035b      	lsls	r3, r3, #13
 80014f6:	d4de      	bmi.n	80014b6 <d_function_type+0x22>
 80014f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014fa:	3a01      	subs	r2, #1
 80014fc:	e7da      	b.n	80014b4 <d_function_type+0x20>
 80014fe:	bf00      	nop

08001500 <d_unqualified_name>:
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	68c3      	ldr	r3, [r0, #12]
 8001504:	4604      	mov	r4, r0
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800150c:	2909      	cmp	r1, #9
 800150e:	d961      	bls.n	80015d4 <d_unqualified_name+0xd4>
 8001510:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8001514:	2919      	cmp	r1, #25
 8001516:	d814      	bhi.n	8001542 <d_unqualified_name+0x42>
 8001518:	2a6f      	cmp	r2, #111	; 0x6f
 800151a:	d104      	bne.n	8001526 <d_unqualified_name+0x26>
 800151c:	785a      	ldrb	r2, [r3, #1]
 800151e:	2a6e      	cmp	r2, #110	; 0x6e
 8001520:	bf04      	itt	eq
 8001522:	3302      	addeq	r3, #2
 8001524:	60c3      	streq	r3, [r0, #12]
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fece 	bl	80012c8 <d_operator_name>
 800152c:	4605      	mov	r5, r0
 800152e:	b110      	cbz	r0, 8001536 <d_unqualified_name+0x36>
 8001530:	7803      	ldrb	r3, [r0, #0]
 8001532:	2b32      	cmp	r3, #50	; 0x32
 8001534:	d069      	beq.n	800160a <d_unqualified_name+0x10a>
 8001536:	68e3      	ldr	r3, [r4, #12]
 8001538:	7819      	ldrb	r1, [r3, #0]
 800153a:	2942      	cmp	r1, #66	; 0x42
 800153c:	d051      	beq.n	80015e2 <d_unqualified_name+0xe2>
 800153e:	4628      	mov	r0, r5
 8001540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001542:	f1a2 0143 	sub.w	r1, r2, #67	; 0x43
 8001546:	2901      	cmp	r1, #1
 8001548:	f240 808b 	bls.w	8001662 <d_unqualified_name+0x162>
 800154c:	2a4c      	cmp	r2, #76	; 0x4c
 800154e:	d079      	beq.n	8001644 <d_unqualified_name+0x144>
 8001550:	2a55      	cmp	r2, #85	; 0x55
 8001552:	f040 8083 	bne.w	800165c <d_unqualified_name+0x15c>
 8001556:	785a      	ldrb	r2, [r3, #1]
 8001558:	2a6c      	cmp	r2, #108	; 0x6c
 800155a:	f000 80d5 	beq.w	8001708 <d_unqualified_name+0x208>
 800155e:	2a74      	cmp	r2, #116	; 0x74
 8001560:	d17c      	bne.n	800165c <d_unqualified_name+0x15c>
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60c2      	str	r2, [r0, #12]
 8001566:	7859      	ldrb	r1, [r3, #1]
 8001568:	2974      	cmp	r1, #116	; 0x74
 800156a:	f040 8098 	bne.w	800169e <d_unqualified_name+0x19e>
 800156e:	1c9a      	adds	r2, r3, #2
 8001570:	60c2      	str	r2, [r0, #12]
 8001572:	789a      	ldrb	r2, [r3, #2]
 8001574:	2a5f      	cmp	r2, #95	; 0x5f
 8001576:	f000 8147 	beq.w	8001808 <d_unqualified_name+0x308>
 800157a:	2a6e      	cmp	r2, #110	; 0x6e
 800157c:	d06e      	beq.n	800165c <d_unqualified_name+0x15c>
 800157e:	f7fe fe2f 	bl	80001e0 <d_number>
 8001582:	1c46      	adds	r6, r0, #1
 8001584:	68e3      	ldr	r3, [r4, #12]
 8001586:	f100 8128 	bmi.w	80017da <d_unqualified_name+0x2da>
 800158a:	7819      	ldrb	r1, [r3, #0]
 800158c:	295f      	cmp	r1, #95	; 0x5f
 800158e:	d177      	bne.n	8001680 <d_unqualified_name+0x180>
 8001590:	3301      	adds	r3, #1
 8001592:	60e3      	str	r3, [r4, #12]
 8001594:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001598:	4293      	cmp	r3, r2
 800159a:	f280 811d 	bge.w	80017d8 <d_unqualified_name+0x2d8>
 800159e:	2100      	movs	r1, #0
 80015a0:	2748      	movs	r7, #72	; 0x48
 80015a2:	6922      	ldr	r2, [r4, #16]
 80015a4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80015a8:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 80015ac:	3301      	adds	r3, #1
 80015ae:	e9c5 1101 	strd	r1, r1, [r5, #4]
 80015b2:	6163      	str	r3, [r4, #20]
 80015b4:	f802 7020 	strb.w	r7, [r2, r0, lsl #2]
 80015b8:	6a22      	ldr	r2, [r4, #32]
 80015ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015bc:	60ee      	str	r6, [r5, #12]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f280 8126 	bge.w	8001810 <d_unqualified_name+0x310>
 80015c4:	69e0      	ldr	r0, [r4, #28]
 80015c6:	68e3      	ldr	r3, [r4, #12]
 80015c8:	1c51      	adds	r1, r2, #1
 80015ca:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 80015ce:	6221      	str	r1, [r4, #32]
 80015d0:	7819      	ldrb	r1, [r3, #0]
 80015d2:	e7b2      	b.n	800153a <d_unqualified_name+0x3a>
 80015d4:	f7ff f89e 	bl	8000714 <d_source_name>
 80015d8:	68e3      	ldr	r3, [r4, #12]
 80015da:	4605      	mov	r5, r0
 80015dc:	7819      	ldrb	r1, [r3, #0]
 80015de:	2942      	cmp	r1, #66	; 0x42
 80015e0:	d1ad      	bne.n	800153e <d_unqualified_name+0x3e>
 80015e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015e4:	3301      	adds	r3, #1
 80015e6:	60e3      	str	r3, [r4, #12]
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff f893 	bl	8000714 <d_source_name>
 80015ee:	462a      	mov	r2, r5
 80015f0:	4603      	mov	r3, r0
 80015f2:	214c      	movs	r1, #76	; 0x4c
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7fe fda9 	bl	800014c <d_make_comp>
 80015fa:	68e3      	ldr	r3, [r4, #12]
 80015fc:	4605      	mov	r5, r0
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	2942      	cmp	r1, #66	; 0x42
 8001602:	d0ef      	beq.n	80015e4 <d_unqualified_name+0xe4>
 8001604:	4628      	mov	r0, r5
 8001606:	62a6      	str	r6, [r4, #40]	; 0x28
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800160a:	68c2      	ldr	r2, [r0, #12]
 800160c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800160e:	6891      	ldr	r1, [r2, #8]
 8001610:	3307      	adds	r3, #7
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	440b      	add	r3, r1
 8001616:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001618:	7813      	ldrb	r3, [r2, #0]
 800161a:	2b6c      	cmp	r3, #108	; 0x6c
 800161c:	d18b      	bne.n	8001536 <d_unqualified_name+0x36>
 800161e:	7853      	ldrb	r3, [r2, #1]
 8001620:	2b69      	cmp	r3, #105	; 0x69
 8001622:	d188      	bne.n	8001536 <d_unqualified_name+0x36>
 8001624:	7893      	ldrb	r3, [r2, #2]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d185      	bne.n	8001536 <d_unqualified_name+0x36>
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff f872 	bl	8000714 <d_source_name>
 8001630:	462a      	mov	r2, r5
 8001632:	4603      	mov	r3, r0
 8001634:	2137      	movs	r1, #55	; 0x37
 8001636:	4620      	mov	r0, r4
 8001638:	f7fe fd88 	bl	800014c <d_make_comp>
 800163c:	68e3      	ldr	r3, [r4, #12]
 800163e:	4605      	mov	r5, r0
 8001640:	7819      	ldrb	r1, [r3, #0]
 8001642:	e77a      	b.n	800153a <d_unqualified_name+0x3a>
 8001644:	3301      	adds	r3, #1
 8001646:	60c3      	str	r3, [r0, #12]
 8001648:	f7ff f864 	bl	8000714 <d_source_name>
 800164c:	4605      	mov	r5, r0
 800164e:	b128      	cbz	r0, 800165c <d_unqualified_name+0x15c>
 8001650:	4620      	mov	r0, r4
 8001652:	f7fe feab 	bl	80003ac <d_discriminator>
 8001656:	2800      	cmp	r0, #0
 8001658:	f47f af6d 	bne.w	8001536 <d_unqualified_name+0x36>
 800165c:	2500      	movs	r5, #0
 800165e:	4628      	mov	r0, r5
 8001660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001662:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001664:	b186      	cbz	r6, 8001688 <d_unqualified_name+0x188>
 8001666:	7831      	ldrb	r1, [r6, #0]
 8001668:	b961      	cbnz	r1, 8001684 <d_unqualified_name+0x184>
 800166a:	6931      	ldr	r1, [r6, #16]
 800166c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800166e:	440a      	add	r2, r1
 8001670:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001672:	7819      	ldrb	r1, [r3, #0]
 8001674:	2943      	cmp	r1, #67	; 0x43
 8001676:	460a      	mov	r2, r1
 8001678:	f000 8087 	beq.w	800178a <d_unqualified_name+0x28a>
 800167c:	2944      	cmp	r1, #68	; 0x44
 800167e:	d005      	beq.n	800168c <d_unqualified_name+0x18c>
 8001680:	2500      	movs	r5, #0
 8001682:	e75a      	b.n	800153a <d_unqualified_name+0x3a>
 8001684:	2918      	cmp	r1, #24
 8001686:	d0f0      	beq.n	800166a <d_unqualified_name+0x16a>
 8001688:	2a43      	cmp	r2, #67	; 0x43
 800168a:	d07e      	beq.n	800178a <d_unqualified_name+0x28a>
 800168c:	7859      	ldrb	r1, [r3, #1]
 800168e:	3930      	subs	r1, #48	; 0x30
 8001690:	2905      	cmp	r1, #5
 8001692:	d836      	bhi.n	8001702 <d_unqualified_name+0x202>
 8001694:	e8df f001 	tbb	[pc, r1]
 8001698:	35292c06 	.word	0x35292c06
 800169c:	2f32      	.short	0x2f32
 800169e:	4613      	mov	r3, r2
 80016a0:	2500      	movs	r5, #0
 80016a2:	e74a      	b.n	800153a <d_unqualified_name+0x3a>
 80016a4:	f04f 0e01 	mov.w	lr, #1
 80016a8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80016ac:	f103 0c02 	add.w	ip, r3, #2
 80016b0:	428a      	cmp	r2, r1
 80016b2:	f8c4 c00c 	str.w	ip, [r4, #12]
 80016b6:	f280 80a3 	bge.w	8001800 <d_unqualified_name+0x300>
 80016ba:	2000      	movs	r0, #0
 80016bc:	6927      	ldr	r7, [r4, #16]
 80016be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80016c2:	eb07 0581 	add.w	r5, r7, r1, lsl #2
 80016c6:	3201      	adds	r2, #1
 80016c8:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80016cc:	0089      	lsls	r1, r1, #2
 80016ce:	6162      	str	r2, [r4, #20]
 80016d0:	2e00      	cmp	r6, #0
 80016d2:	f000 8095 	beq.w	8001800 <d_unqualified_name+0x300>
 80016d6:	2208      	movs	r2, #8
 80016d8:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80016dc:	547a      	strb	r2, [r7, r1]
 80016de:	f885 e00c 	strb.w	lr, [r5, #12]
 80016e2:	612e      	str	r6, [r5, #16]
 80016e4:	7899      	ldrb	r1, [r3, #2]
 80016e6:	4663      	mov	r3, ip
 80016e8:	e727      	b.n	800153a <d_unqualified_name+0x3a>
 80016ea:	f04f 0e03 	mov.w	lr, #3
 80016ee:	e7db      	b.n	80016a8 <d_unqualified_name+0x1a8>
 80016f0:	f04f 0e02 	mov.w	lr, #2
 80016f4:	e7d8      	b.n	80016a8 <d_unqualified_name+0x1a8>
 80016f6:	f04f 0e05 	mov.w	lr, #5
 80016fa:	e7d5      	b.n	80016a8 <d_unqualified_name+0x1a8>
 80016fc:	f04f 0e04 	mov.w	lr, #4
 8001700:	e7d2      	b.n	80016a8 <d_unqualified_name+0x1a8>
 8001702:	4611      	mov	r1, r2
 8001704:	2500      	movs	r5, #0
 8001706:	e718      	b.n	800153a <d_unqualified_name+0x3a>
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60c2      	str	r2, [r0, #12]
 800170c:	7859      	ldrb	r1, [r3, #1]
 800170e:	296c      	cmp	r1, #108	; 0x6c
 8001710:	d1c5      	bne.n	800169e <d_unqualified_name+0x19e>
 8001712:	3302      	adds	r3, #2
 8001714:	60c3      	str	r3, [r0, #12]
 8001716:	f7ff fe5b 	bl	80013d0 <d_parmlist>
 800171a:	68e3      	ldr	r3, [r4, #12]
 800171c:	4606      	mov	r6, r0
 800171e:	2800      	cmp	r0, #0
 8001720:	d05b      	beq.n	80017da <d_unqualified_name+0x2da>
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	2945      	cmp	r1, #69	; 0x45
 8001726:	d1ab      	bne.n	8001680 <d_unqualified_name+0x180>
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	60e2      	str	r2, [r4, #12]
 800172c:	785a      	ldrb	r2, [r3, #1]
 800172e:	2a5f      	cmp	r2, #95	; 0x5f
 8001730:	d076      	beq.n	8001820 <d_unqualified_name+0x320>
 8001732:	2a6e      	cmp	r2, #110	; 0x6e
 8001734:	d092      	beq.n	800165c <d_unqualified_name+0x15c>
 8001736:	4620      	mov	r0, r4
 8001738:	f7fe fd52 	bl	80001e0 <d_number>
 800173c:	3001      	adds	r0, #1
 800173e:	68e3      	ldr	r3, [r4, #12]
 8001740:	d44b      	bmi.n	80017da <d_unqualified_name+0x2da>
 8001742:	7819      	ldrb	r1, [r3, #0]
 8001744:	295f      	cmp	r1, #95	; 0x5f
 8001746:	d19b      	bne.n	8001680 <d_unqualified_name+0x180>
 8001748:	3301      	adds	r3, #1
 800174a:	60e3      	str	r3, [r4, #12]
 800174c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8001750:	428a      	cmp	r2, r1
 8001752:	da42      	bge.n	80017da <d_unqualified_name+0x2da>
 8001754:	2100      	movs	r1, #0
 8001756:	f04f 0e46 	mov.w	lr, #70	; 0x46
 800175a:	6927      	ldr	r7, [r4, #16]
 800175c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8001760:	eb07 058c 	add.w	r5, r7, ip, lsl #2
 8001764:	3201      	adds	r2, #1
 8001766:	e9c5 1101 	strd	r1, r1, [r5, #4]
 800176a:	6162      	str	r2, [r4, #20]
 800176c:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
 8001770:	e9c5 6003 	strd	r6, r0, [r5, #12]
 8001774:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001778:	4282      	cmp	r2, r0
 800177a:	da2e      	bge.n	80017da <d_unqualified_name+0x2da>
 800177c:	69e1      	ldr	r1, [r4, #28]
 800177e:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8001782:	3201      	adds	r2, #1
 8001784:	6222      	str	r2, [r4, #32]
 8001786:	7819      	ldrb	r1, [r3, #0]
 8001788:	e6d7      	b.n	800153a <d_unqualified_name+0x3a>
 800178a:	785a      	ldrb	r2, [r3, #1]
 800178c:	2a49      	cmp	r2, #73	; 0x49
 800178e:	d027      	beq.n	80017e0 <d_unqualified_name+0x2e0>
 8001790:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8001794:	2904      	cmp	r1, #4
 8001796:	f63f af61 	bhi.w	800165c <d_unqualified_name+0x15c>
 800179a:	3a30      	subs	r2, #48	; 0x30
 800179c:	3302      	adds	r3, #2
 800179e:	b2d7      	uxtb	r7, r2
 80017a0:	60e3      	str	r3, [r4, #12]
 80017a2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	da16      	bge.n	80017d8 <d_unqualified_name+0x2d8>
 80017aa:	2100      	movs	r1, #0
 80017ac:	6922      	ldr	r2, [r4, #16]
 80017ae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80017b2:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 80017b6:	3301      	adds	r3, #1
 80017b8:	e9c5 1101 	strd	r1, r1, [r5, #4]
 80017bc:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 80017c0:	6163      	str	r3, [r4, #20]
 80017c2:	b34e      	cbz	r6, 8001818 <d_unqualified_name+0x318>
 80017c4:	2307      	movs	r3, #7
 80017c6:	e9c5 1101 	strd	r1, r1, [r5, #4]
 80017ca:	f802 300c 	strb.w	r3, [r2, ip]
 80017ce:	68e3      	ldr	r3, [r4, #12]
 80017d0:	732f      	strb	r7, [r5, #12]
 80017d2:	612e      	str	r6, [r5, #16]
 80017d4:	7819      	ldrb	r1, [r3, #0]
 80017d6:	e6b0      	b.n	800153a <d_unqualified_name+0x3a>
 80017d8:	68e3      	ldr	r3, [r4, #12]
 80017da:	2500      	movs	r5, #0
 80017dc:	7819      	ldrb	r1, [r3, #0]
 80017de:	e6ac      	b.n	800153a <d_unqualified_name+0x3a>
 80017e0:	1c58      	adds	r0, r3, #1
 80017e2:	60e0      	str	r0, [r4, #12]
 80017e4:	789a      	ldrb	r2, [r3, #2]
 80017e6:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80017ea:	2904      	cmp	r1, #4
 80017ec:	d81c      	bhi.n	8001828 <d_unqualified_name+0x328>
 80017ee:	3303      	adds	r3, #3
 80017f0:	3a30      	subs	r2, #48	; 0x30
 80017f2:	4620      	mov	r0, r4
 80017f4:	60e3      	str	r3, [r4, #12]
 80017f6:	b2d7      	uxtb	r7, r2
 80017f8:	f7ff f93c 	bl	8000a74 <d_type>
 80017fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017fe:	e7d0      	b.n	80017a2 <d_unqualified_name+0x2a2>
 8001800:	7899      	ldrb	r1, [r3, #2]
 8001802:	2500      	movs	r5, #0
 8001804:	4663      	mov	r3, ip
 8001806:	e698      	b.n	800153a <d_unqualified_name+0x3a>
 8001808:	3303      	adds	r3, #3
 800180a:	2600      	movs	r6, #0
 800180c:	60c3      	str	r3, [r0, #12]
 800180e:	e6c1      	b.n	8001594 <d_unqualified_name+0x94>
 8001810:	68e3      	ldr	r3, [r4, #12]
 8001812:	460d      	mov	r5, r1
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	e690      	b.n	800153a <d_unqualified_name+0x3a>
 8001818:	68e3      	ldr	r3, [r4, #12]
 800181a:	4635      	mov	r5, r6
 800181c:	7819      	ldrb	r1, [r3, #0]
 800181e:	e68c      	b.n	800153a <d_unqualified_name+0x3a>
 8001820:	3302      	adds	r3, #2
 8001822:	2000      	movs	r0, #0
 8001824:	60e3      	str	r3, [r4, #12]
 8001826:	e791      	b.n	800174c <d_unqualified_name+0x24c>
 8001828:	7859      	ldrb	r1, [r3, #1]
 800182a:	2500      	movs	r5, #0
 800182c:	4603      	mov	r3, r0
 800182e:	e684      	b.n	800153a <d_unqualified_name+0x3a>

08001830 <d_name>:
 8001830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	68c2      	ldr	r2, [r0, #12]
 8001836:	4604      	mov	r4, r0
 8001838:	7813      	ldrb	r3, [r2, #0]
 800183a:	b084      	sub	sp, #16
 800183c:	3b4e      	subs	r3, #78	; 0x4e
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d808      	bhi.n	8001854 <d_name+0x24>
 8001842:	e8df f003 	tbb	[pc, r3]
 8001846:	0731      	.short	0x0731
 8001848:	17070707 	.word	0x17070707
 800184c:	07071307 	.word	0x07071307
 8001850:	0707      	.short	0x0707
 8001852:	86          	.byte	0x86
 8001853:	00          	.byte	0x00
 8001854:	f7ff fe54 	bl	8001500 <d_unqualified_name>
 8001858:	68e3      	ldr	r3, [r4, #12]
 800185a:	4605      	mov	r5, r0
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	2a49      	cmp	r2, #73	; 0x49
 8001860:	f000 80cb 	beq.w	80019fa <d_name+0x1ca>
 8001864:	4628      	mov	r0, r5
 8001866:	b004      	add	sp, #16
 8001868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800186c:	b004      	add	sp, #16
 800186e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001872:	e645      	b.n	8001500 <d_unqualified_name>
 8001874:	7853      	ldrb	r3, [r2, #1]
 8001876:	2b74      	cmp	r3, #116	; 0x74
 8001878:	f000 80d1 	beq.w	8001a1e <d_name+0x1ee>
 800187c:	2100      	movs	r1, #0
 800187e:	f7fe ffb9 	bl	80007f4 <d_substitution>
 8001882:	68e3      	ldr	r3, [r4, #12]
 8001884:	4605      	mov	r5, r0
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	2a49      	cmp	r2, #73	; 0x49
 800188a:	d1eb      	bne.n	8001864 <d_name+0x34>
 800188c:	3301      	adds	r3, #1
 800188e:	60e3      	str	r3, [r4, #12]
 8001890:	4620      	mov	r0, r4
 8001892:	f001 f87d 	bl	8002990 <d_template_args_1>
 8001896:	4603      	mov	r3, r0
 8001898:	462a      	mov	r2, r5
 800189a:	2104      	movs	r1, #4
 800189c:	4620      	mov	r0, r4
 800189e:	b004      	add	sp, #16
 80018a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a4:	f7fe bc52 	b.w	800014c <d_make_comp>
 80018a8:	1c53      	adds	r3, r2, #1
 80018aa:	60c3      	str	r3, [r0, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	a903      	add	r1, sp, #12
 80018b0:	f000 ff98 	bl	80027e4 <d_cv_qualifiers>
 80018b4:	4607      	mov	r7, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f000 80e9 	beq.w	8001a8e <d_name+0x25e>
 80018bc:	2100      	movs	r1, #0
 80018be:	4620      	mov	r0, r4
 80018c0:	f7fe fcf0 	bl	80002a4 <d_ref_qualifier>
 80018c4:	68e2      	ldr	r2, [r4, #12]
 80018c6:	4680      	mov	r8, r0
 80018c8:	7816      	ldrb	r6, [r2, #0]
 80018ca:	b336      	cbz	r6, 800191a <d_name+0xea>
 80018cc:	f04f 0a00 	mov.w	sl, #0
 80018d0:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8001b8c <d_name+0x35c>
 80018d4:	2e44      	cmp	r6, #68	; 0x44
 80018d6:	f000 80df 	beq.w	8001a98 <d_name+0x268>
 80018da:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b1c      	cmp	r3, #28
 80018e2:	f240 811d 	bls.w	8001b20 <d_name+0x2f0>
 80018e6:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80018ea:	2b19      	cmp	r3, #25
 80018ec:	f200 811a 	bhi.w	8001b24 <d_name+0x2f4>
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff fe05 	bl	8001500 <d_unqualified_name>
 80018f6:	4605      	mov	r5, r0
 80018f8:	f1ba 0f00 	cmp.w	sl, #0
 80018fc:	d006      	beq.n	800190c <d_name+0xdc>
 80018fe:	2101      	movs	r1, #1
 8001900:	462b      	mov	r3, r5
 8001902:	4652      	mov	r2, sl
 8001904:	4620      	mov	r0, r4
 8001906:	f7fe fc21 	bl	800014c <d_make_comp>
 800190a:	4605      	mov	r5, r0
 800190c:	2e53      	cmp	r6, #83	; 0x53
 800190e:	d10e      	bne.n	800192e <d_name+0xfe>
 8001910:	46aa      	mov	sl, r5
 8001912:	68e2      	ldr	r2, [r4, #12]
 8001914:	7816      	ldrb	r6, [r2, #0]
 8001916:	2e00      	cmp	r6, #0
 8001918:	d1dc      	bne.n	80018d4 <d_name+0xa4>
 800191a:	2300      	movs	r3, #0
 800191c:	461d      	mov	r5, r3
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	e7a0      	b.n	8001864 <d_name+0x34>
 8001922:	f7ff f8a7 	bl	8000a74 <d_type>
 8001926:	4605      	mov	r5, r0
 8001928:	f1ba 0f00 	cmp.w	sl, #0
 800192c:	d1e7      	bne.n	80018fe <d_name+0xce>
 800192e:	68e2      	ldr	r2, [r4, #12]
 8001930:	7816      	ldrb	r6, [r2, #0]
 8001932:	2e45      	cmp	r6, #69	; 0x45
 8001934:	f000 80bf 	beq.w	8001ab6 <d_name+0x286>
 8001938:	2d00      	cmp	r5, #0
 800193a:	d0ee      	beq.n	800191a <d_name+0xea>
 800193c:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001940:	428b      	cmp	r3, r1
 8001942:	daea      	bge.n	800191a <d_name+0xea>
 8001944:	69e1      	ldr	r1, [r4, #28]
 8001946:	46aa      	mov	sl, r5
 8001948:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800194c:	3301      	adds	r3, #1
 800194e:	6223      	str	r3, [r4, #32]
 8001950:	e7e0      	b.n	8001914 <d_name+0xe4>
 8001952:	1c53      	adds	r3, r2, #1
 8001954:	60c3      	str	r3, [r0, #12]
 8001956:	7853      	ldrb	r3, [r2, #1]
 8001958:	2b47      	cmp	r3, #71	; 0x47
 800195a:	d002      	beq.n	8001962 <d_name+0x132>
 800195c:	2b54      	cmp	r3, #84	; 0x54
 800195e:	f040 80b8 	bne.w	8001ad2 <d_name+0x2a2>
 8001962:	4620      	mov	r0, r4
 8001964:	f000 f9d2 	bl	8001d0c <d_special_name>
 8001968:	4605      	mov	r5, r0
 800196a:	2d00      	cmp	r5, #0
 800196c:	f000 808f 	beq.w	8001a8e <d_name+0x25e>
 8001970:	68e3      	ldr	r3, [r4, #12]
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	2a45      	cmp	r2, #69	; 0x45
 8001976:	f040 808a 	bne.w	8001a8e <d_name+0x25e>
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60e2      	str	r2, [r4, #12]
 800197e:	785a      	ldrb	r2, [r3, #1]
 8001980:	2a73      	cmp	r2, #115	; 0x73
 8001982:	f000 8107 	beq.w	8001b94 <d_name+0x364>
 8001986:	2a64      	cmp	r2, #100	; 0x64
 8001988:	f000 80a8 	beq.w	8001adc <d_name+0x2ac>
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff ff4f 	bl	8001830 <d_name>
 8001992:	4603      	mov	r3, r0
 8001994:	b328      	cbz	r0, 80019e2 <d_name+0x1b2>
 8001996:	7802      	ldrb	r2, [r0, #0]
 8001998:	2a46      	cmp	r2, #70	; 0x46
 800199a:	d022      	beq.n	80019e2 <d_name+0x1b2>
 800199c:	2a48      	cmp	r2, #72	; 0x48
 800199e:	d020      	beq.n	80019e2 <d_name+0x1b2>
 80019a0:	f04f 36ff 	mov.w	r6, #4294967295
 80019a4:	4620      	mov	r0, r4
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f7fe fd00 	bl	80003ac <d_discriminator>
 80019ac:	9b01      	ldr	r3, [sp, #4]
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d06d      	beq.n	8001a8e <d_name+0x25e>
 80019b2:	1c72      	adds	r2, r6, #1
 80019b4:	d015      	beq.n	80019e2 <d_name+0x1b2>
 80019b6:	469c      	mov	ip, r3
 80019b8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f280 8118 	bge.w	8001bf2 <d_name+0x3c2>
 80019c2:	2700      	movs	r7, #0
 80019c4:	f04f 0e47 	mov.w	lr, #71	; 0x47
 80019c8:	6921      	ldr	r1, [r4, #16]
 80019ca:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80019ce:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80019d2:	3201      	adds	r2, #1
 80019d4:	e9c3 7701 	strd	r7, r7, [r3, #4]
 80019d8:	6162      	str	r2, [r4, #20]
 80019da:	f801 e020 	strb.w	lr, [r1, r0, lsl #2]
 80019de:	e9c3 c603 	strd	ip, r6, [r3, #12]
 80019e2:	782a      	ldrb	r2, [r5, #0]
 80019e4:	2a03      	cmp	r2, #3
 80019e6:	d105      	bne.n	80019f4 <d_name+0x1c4>
 80019e8:	692a      	ldr	r2, [r5, #16]
 80019ea:	7811      	ldrb	r1, [r2, #0]
 80019ec:	2929      	cmp	r1, #41	; 0x29
 80019ee:	bf04      	itt	eq
 80019f0:	2100      	moveq	r1, #0
 80019f2:	60d1      	streq	r1, [r2, #12]
 80019f4:	462a      	mov	r2, r5
 80019f6:	2102      	movs	r1, #2
 80019f8:	e750      	b.n	800189c <d_name+0x6c>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d047      	beq.n	8001a8e <d_name+0x25e>
 80019fe:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a02:	428a      	cmp	r2, r1
 8001a04:	da43      	bge.n	8001a8e <d_name+0x25e>
 8001a06:	69e1      	ldr	r1, [r4, #28]
 8001a08:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a0c:	3201      	adds	r2, #1
 8001a0e:	6222      	str	r2, [r4, #32]
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	3a49      	subs	r2, #73	; 0x49
 8001a14:	2a01      	cmp	r2, #1
 8001a16:	f67f af39 	bls.w	800188c <d_name+0x5c>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e73c      	b.n	8001898 <d_name+0x68>
 8001a1e:	3202      	adds	r2, #2
 8001a20:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001a24:	428b      	cmp	r3, r1
 8001a26:	60c2      	str	r2, [r0, #12]
 8001a28:	f280 80d1 	bge.w	8001bce <d_name+0x39e>
 8001a2c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8001a30:	3301      	adds	r3, #1
 8001a32:	6143      	str	r3, [r0, #20]
 8001a34:	2103      	movs	r1, #3
 8001a36:	2300      	movs	r3, #0
 8001a38:	6902      	ldr	r2, [r0, #16]
 8001a3a:	4855      	ldr	r0, [pc, #340]	; (8001b90 <d_name+0x360>)
 8001a3c:	00ae      	lsls	r6, r5, #2
 8001a3e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8001a42:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001a46:	5593      	strb	r3, [r2, r6]
 8001a48:	e9c5 0103 	strd	r0, r1, [r5, #12]
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff fd57 	bl	8001500 <d_unqualified_name>
 8001a52:	462a      	mov	r2, r5
 8001a54:	4603      	mov	r3, r0
 8001a56:	2101      	movs	r1, #1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7fe fb77 	bl	800014c <d_make_comp>
 8001a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a60:	68e3      	ldr	r3, [r4, #12]
 8001a62:	3203      	adds	r2, #3
 8001a64:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4605      	mov	r5, r0
 8001a6a:	2a49      	cmp	r2, #73	; 0x49
 8001a6c:	f47f aefa 	bne.w	8001864 <d_name+0x34>
 8001a70:	b168      	cbz	r0, 8001a8e <d_name+0x25e>
 8001a72:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001a76:	428a      	cmp	r2, r1
 8001a78:	da09      	bge.n	8001a8e <d_name+0x25e>
 8001a7a:	69e1      	ldr	r1, [r4, #28]
 8001a7c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001a80:	3201      	adds	r2, #1
 8001a82:	6222      	str	r2, [r4, #32]
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	3a49      	subs	r2, #73	; 0x49
 8001a88:	2a01      	cmp	r2, #1
 8001a8a:	d8c6      	bhi.n	8001a1a <d_name+0x1ea>
 8001a8c:	e6fe      	b.n	800188c <d_name+0x5c>
 8001a8e:	2500      	movs	r5, #0
 8001a90:	4628      	mov	r0, r5
 8001a92:	b004      	add	sp, #16
 8001a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a98:	7853      	ldrb	r3, [r2, #1]
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001aa0:	2b54      	cmp	r3, #84	; 0x54
 8001aa2:	f43f af3e 	beq.w	8001922 <d_name+0xf2>
 8001aa6:	f7ff fd2b 	bl	8001500 <d_unqualified_name>
 8001aaa:	4605      	mov	r5, r0
 8001aac:	f1ba 0f00 	cmp.w	sl, #0
 8001ab0:	f47f af25 	bne.w	80018fe <d_name+0xce>
 8001ab4:	e73b      	b.n	800192e <d_name+0xfe>
 8001ab6:	2315      	movs	r3, #21
 8001ab8:	fa29 f303 	lsr.w	r3, r9, r3
 8001abc:	07d9      	lsls	r1, r3, #31
 8001abe:	d540      	bpl.n	8001b42 <d_name+0x312>
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff fd1d 	bl	8001500 <d_unqualified_name>
 8001ac6:	b115      	cbz	r5, 8001ace <d_name+0x29e>
 8001ac8:	46aa      	mov	sl, r5
 8001aca:	4605      	mov	r5, r0
 8001acc:	e717      	b.n	80018fe <d_name+0xce>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	e72d      	b.n	800192e <d_name+0xfe>
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f000 f89c 	bl	8001c10 <d_encoding.part.0>
 8001ad8:	4605      	mov	r5, r0
 8001ada:	e746      	b.n	800196a <d_name+0x13a>
 8001adc:	1c9a      	adds	r2, r3, #2
 8001ade:	60e2      	str	r2, [r4, #12]
 8001ae0:	789a      	ldrb	r2, [r3, #2]
 8001ae2:	2a5f      	cmp	r2, #95	; 0x5f
 8001ae4:	f000 8081 	beq.w	8001bea <d_name+0x3ba>
 8001ae8:	2a6e      	cmp	r2, #110	; 0x6e
 8001aea:	d0d0      	beq.n	8001a8e <d_name+0x25e>
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7fe fb77 	bl	80001e0 <d_number>
 8001af2:	1c46      	adds	r6, r0, #1
 8001af4:	d4cb      	bmi.n	8001a8e <d_name+0x25e>
 8001af6:	68e3      	ldr	r3, [r4, #12]
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	2a5f      	cmp	r2, #95	; 0x5f
 8001afc:	d1c7      	bne.n	8001a8e <d_name+0x25e>
 8001afe:	3301      	adds	r3, #1
 8001b00:	60e3      	str	r3, [r4, #12]
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff fe94 	bl	8001830 <d_name>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	f43f af53 	beq.w	80019b6 <d_name+0x186>
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	2a46      	cmp	r2, #70	; 0x46
 8001b14:	f43f af4f 	beq.w	80019b6 <d_name+0x186>
 8001b18:	2a48      	cmp	r2, #72	; 0x48
 8001b1a:	f43f af4c 	beq.w	80019b6 <d_name+0x186>
 8001b1e:	e741      	b.n	80019a4 <d_name+0x174>
 8001b20:	4655      	mov	r5, sl
 8001b22:	e7c9      	b.n	8001ab8 <d_name+0x288>
 8001b24:	2e55      	cmp	r6, #85	; 0x55
 8001b26:	d02f      	beq.n	8001b88 <d_name+0x358>
 8001b28:	2e53      	cmp	r6, #83	; 0x53
 8001b2a:	d109      	bne.n	8001b40 <d_name+0x310>
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7fe fe60 	bl	80007f4 <d_substitution>
 8001b34:	4605      	mov	r5, r0
 8001b36:	f1ba 0f00 	cmp.w	sl, #0
 8001b3a:	f47f aee0 	bne.w	80018fe <d_name+0xce>
 8001b3e:	e6e7      	b.n	8001910 <d_name+0xe0>
 8001b40:	4655      	mov	r5, sl
 8001b42:	2e49      	cmp	r6, #73	; 0x49
 8001b44:	d045      	beq.n	8001bd2 <d_name+0x3a2>
 8001b46:	2e54      	cmp	r6, #84	; 0x54
 8001b48:	d055      	beq.n	8001bf6 <d_name+0x3c6>
 8001b4a:	2e45      	cmp	r6, #69	; 0x45
 8001b4c:	d009      	beq.n	8001b62 <d_name+0x332>
 8001b4e:	2e4d      	cmp	r6, #77	; 0x4d
 8001b50:	f47f aee3 	bne.w	800191a <d_name+0xea>
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	f43f aee0 	beq.w	800191a <d_name+0xea>
 8001b5a:	3201      	adds	r2, #1
 8001b5c:	46aa      	mov	sl, r5
 8001b5e:	60e2      	str	r2, [r4, #12]
 8001b60:	e6d8      	b.n	8001914 <d_name+0xe4>
 8001b62:	603d      	str	r5, [r7, #0]
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	d092      	beq.n	8001a8e <d_name+0x25e>
 8001b68:	f1b8 0f00 	cmp.w	r8, #0
 8001b6c:	d004      	beq.n	8001b78 <d_name+0x348>
 8001b6e:	9b03      	ldr	r3, [sp, #12]
 8001b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b74:	f8c8 300c 	str.w	r3, [r8, #12]
 8001b78:	68e3      	ldr	r3, [r4, #12]
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	2a45      	cmp	r2, #69	; 0x45
 8001b7e:	d186      	bne.n	8001a8e <d_name+0x25e>
 8001b80:	3301      	adds	r3, #1
 8001b82:	9d03      	ldr	r5, [sp, #12]
 8001b84:	60e3      	str	r3, [r4, #12]
 8001b86:	e66d      	b.n	8001864 <d_name+0x34>
 8001b88:	4655      	mov	r5, sl
 8001b8a:	e799      	b.n	8001ac0 <d_name+0x290>
 8001b8c:	100803ff 	.word	0x100803ff
 8001b90:	0800f9d8 	.word	0x0800f9d8
 8001b94:	3302      	adds	r3, #2
 8001b96:	4620      	mov	r0, r4
 8001b98:	60e3      	str	r3, [r4, #12]
 8001b9a:	f7fe fc07 	bl	80003ac <d_discriminator>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	f43f af75 	beq.w	8001a8e <d_name+0x25e>
 8001ba4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	da22      	bge.n	8001bf2 <d_name+0x3c2>
 8001bac:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8001bb0:	3201      	adds	r2, #1
 8001bb2:	6162      	str	r2, [r4, #20]
 8001bb4:	200e      	movs	r0, #14
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6921      	ldr	r1, [r4, #16]
 8001bba:	4e14      	ldr	r6, [pc, #80]	; (8001c0c <d_name+0x3dc>)
 8001bbc:	009f      	lsls	r7, r3, #2
 8001bbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001bc2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8001bc6:	55ca      	strb	r2, [r1, r7]
 8001bc8:	e9c3 6003 	strd	r6, r0, [r3, #12]
 8001bcc:	e709      	b.n	80019e2 <d_name+0x1b2>
 8001bce:	2500      	movs	r5, #0
 8001bd0:	e73c      	b.n	8001a4c <d_name+0x21c>
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	f43f aea1 	beq.w	800191a <d_name+0xea>
 8001bd8:	3201      	adds	r2, #1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	60e2      	str	r2, [r4, #12]
 8001bde:	f000 fed7 	bl	8002990 <d_template_args_1>
 8001be2:	46aa      	mov	sl, r5
 8001be4:	2104      	movs	r1, #4
 8001be6:	4605      	mov	r5, r0
 8001be8:	e68a      	b.n	8001900 <d_name+0xd0>
 8001bea:	3303      	adds	r3, #3
 8001bec:	2600      	movs	r6, #0
 8001bee:	60e3      	str	r3, [r4, #12]
 8001bf0:	e787      	b.n	8001b02 <d_name+0x2d2>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e6f5      	b.n	80019e2 <d_name+0x1b2>
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	46aa      	mov	sl, r5
 8001bfa:	f7fe fd1d 	bl	8000638 <d_template_param>
 8001bfe:	4605      	mov	r5, r0
 8001c00:	f1ba 0f00 	cmp.w	sl, #0
 8001c04:	f47f ae7b 	bne.w	80018fe <d_name+0xce>
 8001c08:	e691      	b.n	800192e <d_name+0xfe>
 8001c0a:	bf00      	nop
 8001c0c:	0800f9c8 	.word	0x0800f9c8

08001c10 <d_encoding.part.0>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4605      	mov	r5, r0
 8001c14:	460e      	mov	r6, r1
 8001c16:	f7ff fe0b 	bl	8001830 <d_name>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d049      	beq.n	8001cb2 <d_encoding.part.0+0xa2>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b1ee      	cbz	r6, 8001c5e <d_encoding.part.0+0x4e>
 8001c22:	68ab      	ldr	r3, [r5, #8]
 8001c24:	07db      	lsls	r3, r3, #31
 8001c26:	d41a      	bmi.n	8001c5e <d_encoding.part.0+0x4e>
 8001c28:	7823      	ldrb	r3, [r4, #0]
 8001c2a:	2b4d      	cmp	r3, #77	; 0x4d
 8001c2c:	f1a3 011c 	sub.w	r1, r3, #28
 8001c30:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8001c34:	d035      	beq.n	8001ca2 <d_encoding.part.0+0x92>
 8001c36:	d832      	bhi.n	8001c9e <d_encoding.part.0+0x8e>
 8001c38:	2904      	cmp	r1, #4
 8001c3a:	d932      	bls.n	8001ca2 <d_encoding.part.0+0x92>
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d10c      	bne.n	8001c5a <d_encoding.part.0+0x4a>
 8001c40:	6923      	ldr	r3, [r4, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d035      	beq.n	8001cb2 <d_encoding.part.0+0xa2>
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	2a4d      	cmp	r2, #77	; 0x4d
 8001c4a:	f1a2 001c 	sub.w	r0, r2, #28
 8001c4e:	f1a2 014f 	sub.w	r1, r2, #79	; 0x4f
 8001c52:	d02a      	beq.n	8001caa <d_encoding.part.0+0x9a>
 8001c54:	d827      	bhi.n	8001ca6 <d_encoding.part.0+0x96>
 8001c56:	2804      	cmp	r0, #4
 8001c58:	d927      	bls.n	8001caa <d_encoding.part.0+0x9a>
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
 8001c5e:	68eb      	ldr	r3, [r5, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f9      	beq.n	8001c5a <d_encoding.part.0+0x4a>
 8001c66:	2b45      	cmp	r3, #69	; 0x45
 8001c68:	d0f7      	beq.n	8001c5a <d_encoding.part.0+0x4a>
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	780b      	ldrb	r3, [r1, #0]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d032      	beq.n	8001cd8 <d_encoding.part.0+0xc8>
 8001c72:	d826      	bhi.n	8001cc2 <d_encoding.part.0+0xb2>
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d122      	bne.n	8001cbe <d_encoding.part.0+0xae>
 8001c78:	6909      	ldr	r1, [r1, #16]
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d1f6      	bne.n	8001c6c <d_encoding.part.0+0x5c>
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f7ff fbe4 	bl	800144c <d_bare_function_type>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b1a0      	cbz	r0, 8001cb2 <d_encoding.part.0+0xa2>
 8001c88:	b916      	cbnz	r6, 8001c90 <d_encoding.part.0+0x80>
 8001c8a:	7822      	ldrb	r2, [r4, #0]
 8001c8c:	2a02      	cmp	r2, #2
 8001c8e:	d037      	beq.n	8001d00 <d_encoding.part.0+0xf0>
 8001c90:	4622      	mov	r2, r4
 8001c92:	4628      	mov	r0, r5
 8001c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c98:	2103      	movs	r1, #3
 8001c9a:	f7fe ba57 	b.w	800014c <d_make_comp>
 8001c9e:	2a01      	cmp	r2, #1
 8001ca0:	d8db      	bhi.n	8001c5a <d_encoding.part.0+0x4a>
 8001ca2:	68e4      	ldr	r4, [r4, #12]
 8001ca4:	e7c0      	b.n	8001c28 <d_encoding.part.0+0x18>
 8001ca6:	2901      	cmp	r1, #1
 8001ca8:	d8d7      	bhi.n	8001c5a <d_encoding.part.0+0x4a>
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	6123      	str	r3, [r4, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1c9      	bne.n	8001c46 <d_encoding.part.0+0x36>
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	3b1c      	subs	r3, #28
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d908      	bls.n	8001cd0 <d_encoding.part.0+0xc0>
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	e7dd      	b.n	8001c7e <d_encoding.part.0+0x6e>
 8001cc2:	2b4d      	cmp	r3, #77	; 0x4d
 8001cc4:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8001cc8:	d002      	beq.n	8001cd0 <d_encoding.part.0+0xc0>
 8001cca:	d9f5      	bls.n	8001cb8 <d_encoding.part.0+0xa8>
 8001ccc:	2a01      	cmp	r2, #1
 8001cce:	d8f6      	bhi.n	8001cbe <d_encoding.part.0+0xae>
 8001cd0:	68c9      	ldr	r1, [r1, #12]
 8001cd2:	2900      	cmp	r1, #0
 8001cd4:	d1ca      	bne.n	8001c6c <d_encoding.part.0+0x5c>
 8001cd6:	e7d2      	b.n	8001c7e <d_encoding.part.0+0x6e>
 8001cd8:	68cb      	ldr	r3, [r1, #12]
 8001cda:	b15b      	cbz	r3, 8001cf4 <d_encoding.part.0+0xe4>
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	2908      	cmp	r1, #8
 8001ce0:	f101 32ff 	add.w	r2, r1, #4294967295
 8001ce4:	d808      	bhi.n	8001cf8 <d_encoding.part.0+0xe8>
 8001ce6:	2906      	cmp	r1, #6
 8001ce8:	d8e9      	bhi.n	8001cbe <d_encoding.part.0+0xae>
 8001cea:	2a01      	cmp	r2, #1
 8001cec:	d802      	bhi.n	8001cf4 <d_encoding.part.0+0xe4>
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f3      	bne.n	8001cdc <d_encoding.part.0+0xcc>
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	e7c2      	b.n	8001c7e <d_encoding.part.0+0x6e>
 8001cf8:	3935      	subs	r1, #53	; 0x35
 8001cfa:	bf18      	it	ne
 8001cfc:	2101      	movne	r1, #1
 8001cfe:	e7be      	b.n	8001c7e <d_encoding.part.0+0x6e>
 8001d00:	7802      	ldrb	r2, [r0, #0]
 8001d02:	2a29      	cmp	r2, #41	; 0x29
 8001d04:	bf08      	it	eq
 8001d06:	60c6      	streq	r6, [r0, #12]
 8001d08:	e7c2      	b.n	8001c90 <d_encoding.part.0+0x80>
 8001d0a:	bf00      	nop

08001d0c <d_special_name>:
 8001d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d10:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001d12:	68c3      	ldr	r3, [r0, #12]
 8001d14:	f101 0214 	add.w	r2, r1, #20
 8001d18:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	2a54      	cmp	r2, #84	; 0x54
 8001d20:	d078      	beq.n	8001e14 <d_special_name+0x108>
 8001d22:	2a47      	cmp	r2, #71	; 0x47
 8001d24:	d128      	bne.n	8001d78 <d_special_name+0x6c>
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60c2      	str	r2, [r0, #12]
 8001d2a:	785a      	ldrb	r2, [r3, #1]
 8001d2c:	b322      	cbz	r2, 8001d78 <d_special_name+0x6c>
 8001d2e:	1c9a      	adds	r2, r3, #2
 8001d30:	60c2      	str	r2, [r0, #12]
 8001d32:	785a      	ldrb	r2, [r3, #1]
 8001d34:	2a56      	cmp	r2, #86	; 0x56
 8001d36:	d822      	bhi.n	8001d7e <d_special_name+0x72>
 8001d38:	2a40      	cmp	r2, #64	; 0x40
 8001d3a:	d91d      	bls.n	8001d78 <d_special_name+0x6c>
 8001d3c:	3a41      	subs	r2, #65	; 0x41
 8001d3e:	2a15      	cmp	r2, #21
 8001d40:	d81a      	bhi.n	8001d78 <d_special_name+0x6c>
 8001d42:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001d46:	0127      	.short	0x0127
 8001d48:	00190019 	.word	0x00190019
 8001d4c:	00190019 	.word	0x00190019
 8001d50:	00190019 	.word	0x00190019
 8001d54:	00190019 	.word	0x00190019
 8001d58:	00190019 	.word	0x00190019
 8001d5c:	00190019 	.word	0x00190019
 8001d60:	00190019 	.word	0x00190019
 8001d64:	00190019 	.word	0x00190019
 8001d68:	00190105 	.word	0x00190105
 8001d6c:	001900eb 	.word	0x001900eb
 8001d70:	00e1      	.short	0x00e1
 8001d72:	68e3      	ldr	r3, [r4, #12]
 8001d74:	3302      	adds	r3, #2
 8001d76:	60e3      	str	r3, [r4, #12]
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7e:	2a72      	cmp	r2, #114	; 0x72
 8001d80:	d1fa      	bne.n	8001d78 <d_special_name+0x6c>
 8001d82:	f7fe fa2d 	bl	80001e0 <d_number>
 8001d86:	2801      	cmp	r0, #1
 8001d88:	ddf6      	ble.n	8001d78 <d_special_name+0x6c>
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	d0f2      	beq.n	8001d78 <d_special_name+0x6c>
 8001d92:	1c5e      	adds	r6, r3, #1
 8001d94:	60e6      	str	r6, [r4, #12]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b5f      	cmp	r3, #95	; 0x5f
 8001d9a:	d1ed      	bne.n	8001d78 <d_special_name+0x6c>
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f04f 0841 	mov.w	r8, #65	; 0x41
 8001da2:	4617      	mov	r7, r2
 8001da4:	1e45      	subs	r5, r0, #1
 8001da6:	7833      	ldrb	r3, [r6, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0e5      	beq.n	8001d78 <d_special_name+0x6c>
 8001dac:	2b24      	cmp	r3, #36	; 0x24
 8001dae:	f040 81e6 	bne.w	800217e <d_special_name+0x472>
 8001db2:	7873      	ldrb	r3, [r6, #1]
 8001db4:	2b53      	cmp	r3, #83	; 0x53
 8001db6:	f000 8207 	beq.w	80021c8 <d_special_name+0x4bc>
 8001dba:	2b5f      	cmp	r3, #95	; 0x5f
 8001dbc:	f000 8202 	beq.w	80021c4 <d_special_name+0x4b8>
 8001dc0:	2b24      	cmp	r3, #36	; 0x24
 8001dc2:	d1d9      	bne.n	8001d78 <d_special_name+0x6c>
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	dad1      	bge.n	8001d72 <d_special_name+0x66>
 8001dce:	6926      	ldr	r6, [r4, #16]
 8001dd0:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 8001dd4:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 8001dd8:	3001      	adds	r0, #1
 8001dda:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8001dde:	6160      	str	r0, [r4, #20]
 8001de0:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
 8001de4:	68e6      	ldr	r6, [r4, #12]
 8001de6:	60d9      	str	r1, [r3, #12]
 8001de8:	3602      	adds	r6, #2
 8001dea:	3d02      	subs	r5, #2
 8001dec:	60e6      	str	r6, [r4, #12]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	f000 81e6 	beq.w	80021c0 <d_special_name+0x4b4>
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7fe f9a8 	bl	800014c <d_make_comp>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d0ba      	beq.n	8001d78 <d_special_name+0x6c>
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	dccf      	bgt.n	8001da6 <d_special_name+0x9a>
 8001e06:	4620      	mov	r0, r4
 8001e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	213f      	movs	r1, #63	; 0x3f
 8001e10:	f7fe b99c 	b.w	800014c <d_make_comp>
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	60c2      	str	r2, [r0, #12]
 8001e18:	785a      	ldrb	r2, [r3, #1]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d0ac      	beq.n	8001d78 <d_special_name+0x6c>
 8001e1e:	1c9a      	adds	r2, r3, #2
 8001e20:	60c2      	str	r2, [r0, #12]
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	3b41      	subs	r3, #65	; 0x41
 8001e26:	2b35      	cmp	r3, #53	; 0x35
 8001e28:	d8a6      	bhi.n	8001d78 <d_special_name+0x6c>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <d_special_name+0x124>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001fe1 	.word	0x08001fe1
 8001e34:	08001d79 	.word	0x08001d79
 8001e38:	08001ff5 	.word	0x08001ff5
 8001e3c:	08001d79 	.word	0x08001d79
 8001e40:	08001d79 	.word	0x08001d79
 8001e44:	08002031 	.word	0x08002031
 8001e48:	08001d79 	.word	0x08001d79
 8001e4c:	080020ad 	.word	0x080020ad
 8001e50:	08002157 	.word	0x08002157
 8001e54:	08002143 	.word	0x08002143
 8001e58:	08001d79 	.word	0x08001d79
 8001e5c:	08001d79 	.word	0x08001d79
 8001e60:	08001d79 	.word	0x08001d79
 8001e64:	08001d79 	.word	0x08001d79
 8001e68:	08001d79 	.word	0x08001d79
 8001e6c:	08001d79 	.word	0x08001d79
 8001e70:	08001d79 	.word	0x08001d79
 8001e74:	08001d79 	.word	0x08001d79
 8001e78:	0800216b 	.word	0x0800216b
 8001e7c:	080020c1 	.word	0x080020c1
 8001e80:	08001d79 	.word	0x08001d79
 8001e84:	080020d9 	.word	0x080020d9
 8001e88:	080020f1 	.word	0x080020f1
 8001e8c:	08001d79 	.word	0x08001d79
 8001e90:	08001d79 	.word	0x08001d79
 8001e94:	08001d79 	.word	0x08001d79
 8001e98:	08001d79 	.word	0x08001d79
 8001e9c:	08001d79 	.word	0x08001d79
 8001ea0:	08001d79 	.word	0x08001d79
 8001ea4:	08001d79 	.word	0x08001d79
 8001ea8:	08001d79 	.word	0x08001d79
 8001eac:	08001d79 	.word	0x08001d79
 8001eb0:	08001d79 	.word	0x08001d79
 8001eb4:	08001d79 	.word	0x08001d79
 8001eb8:	08002105 	.word	0x08002105
 8001ebc:	08001d79 	.word	0x08001d79
 8001ec0:	08001d79 	.word	0x08001d79
 8001ec4:	08001d79 	.word	0x08001d79
 8001ec8:	08001d79 	.word	0x08001d79
 8001ecc:	08002045 	.word	0x08002045
 8001ed0:	08001d79 	.word	0x08001d79
 8001ed4:	08001d79 	.word	0x08001d79
 8001ed8:	08001d79 	.word	0x08001d79
 8001edc:	08001d79 	.word	0x08001d79
 8001ee0:	08001d79 	.word	0x08001d79
 8001ee4:	08001d79 	.word	0x08001d79
 8001ee8:	08001d79 	.word	0x08001d79
 8001eec:	08001d79 	.word	0x08001d79
 8001ef0:	08001d79 	.word	0x08001d79
 8001ef4:	08001d79 	.word	0x08001d79
 8001ef8:	08001d79 	.word	0x08001d79
 8001efc:	08001d79 	.word	0x08001d79
 8001f00:	08001d79 	.word	0x08001d79
 8001f04:	08002079 	.word	0x08002079
 8001f08:	f7ff fc92 	bl	8001830 <d_name>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4602      	mov	r2, r0
 8001f10:	2113      	movs	r1, #19
 8001f12:	4620      	mov	r0, r4
 8001f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f18:	f7fe b918 	b.w	800014c <d_make_comp>
 8001f1c:	789a      	ldrb	r2, [r3, #2]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	f000 8154 	beq.w	80021cc <d_special_name+0x4c0>
 8001f24:	1cda      	adds	r2, r3, #3
 8001f26:	60c2      	str	r2, [r0, #12]
 8001f28:	789a      	ldrb	r2, [r3, #2]
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	2a6e      	cmp	r2, #110	; 0x6e
 8001f2e:	d046      	beq.n	8001fbe <d_special_name+0x2b2>
 8001f30:	2b47      	cmp	r3, #71	; 0x47
 8001f32:	d002      	beq.n	8001f3a <d_special_name+0x22e>
 8001f34:	2b54      	cmp	r3, #84	; 0x54
 8001f36:	f040 8149 	bne.w	80021cc <d_special_name+0x4c0>
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fee6 	bl	8001d0c <d_special_name>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4620      	mov	r0, r4
 8001f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2149      	movs	r1, #73	; 0x49
 8001f4c:	f7fe b8fe 	b.w	800014c <d_make_comp>
 8001f50:	f7ff fc6e 	bl	8001830 <d_name>
 8001f54:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8001f58:	4291      	cmp	r1, r2
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	f280 8140 	bge.w	80021e0 <d_special_name+0x4d4>
 8001f60:	2300      	movs	r3, #0
 8001f62:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8001f66:	6922      	ldr	r2, [r4, #16]
 8001f68:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8001f6c:	eb02 0587 	add.w	r5, r2, r7, lsl #2
 8001f70:	3101      	adds	r1, #1
 8001f72:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8001f76:	4620      	mov	r0, r4
 8001f78:	6161      	str	r1, [r4, #20]
 8001f7a:	f802 c027 	strb.w	ip, [r2, r7, lsl #2]
 8001f7e:	f7fe f92f 	bl	80001e0 <d_number>
 8001f82:	60e8      	str	r0, [r5, #12]
 8001f84:	462b      	mov	r3, r5
 8001f86:	4632      	mov	r2, r6
 8001f88:	4620      	mov	r0, r4
 8001f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8e:	2116      	movs	r1, #22
 8001f90:	f7fe b8dc 	b.w	800014c <d_make_comp>
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	2b47      	cmp	r3, #71	; 0x47
 8001f98:	d001      	beq.n	8001f9e <d_special_name+0x292>
 8001f9a:	2b54      	cmp	r3, #84	; 0x54
 8001f9c:	d10a      	bne.n	8001fb4 <d_special_name+0x2a8>
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff feb4 	bl	8001d0c <d_special_name>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fac:	2300      	movs	r3, #0
 8001fae:	2117      	movs	r1, #23
 8001fb0:	f7fe b8cc 	b.w	800014c <d_make_comp>
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f7ff fe2b 	bl	8001c10 <d_encoding.part.0>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	e7f3      	b.n	8001fa6 <d_special_name+0x29a>
 8001fbe:	2b47      	cmp	r3, #71	; 0x47
 8001fc0:	f000 811a 	beq.w	80021f8 <d_special_name+0x4ec>
 8001fc4:	2b54      	cmp	r3, #84	; 0x54
 8001fc6:	f000 8117 	beq.w	80021f8 <d_special_name+0x4ec>
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f7ff fe20 	bl	8001c10 <d_encoding.part.0>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd8:	2300      	movs	r3, #0
 8001fda:	214a      	movs	r1, #74	; 0x4a
 8001fdc:	f7fe b8b6 	b.w	800014c <d_make_comp>
 8001fe0:	f000 fcac 	bl	800293c <d_template_arg>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	2130      	movs	r1, #48	; 0x30
 8001fea:	4620      	mov	r0, r4
 8001fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff0:	f7fe b8ac 	b.w	800014c <d_make_comp>
 8001ff4:	f7fe fd3e 	bl	8000a74 <d_type>
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7fe f8f0 	bl	80001e0 <d_number>
 8002000:	2800      	cmp	r0, #0
 8002002:	f6ff aeb9 	blt.w	8001d78 <d_special_name+0x6c>
 8002006:	68e3      	ldr	r3, [r4, #12]
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	2a5f      	cmp	r2, #95	; 0x5f
 800200c:	f47f aeb4 	bne.w	8001d78 <d_special_name+0x6c>
 8002010:	3301      	adds	r3, #1
 8002012:	60e3      	str	r3, [r4, #12]
 8002014:	4620      	mov	r0, r4
 8002016:	f7fe fd2d 	bl	8000a74 <d_type>
 800201a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800201c:	4602      	mov	r2, r0
 800201e:	1d48      	adds	r0, r1, #5
 8002020:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002022:	462b      	mov	r3, r5
 8002024:	4620      	mov	r0, r4
 8002026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800202a:	210b      	movs	r1, #11
 800202c:	f7fe b88e 	b.w	800014c <d_make_comp>
 8002030:	f7fe fd20 	bl	8000a74 <d_type>
 8002034:	2300      	movs	r3, #0
 8002036:	4602      	mov	r2, r0
 8002038:	210e      	movs	r1, #14
 800203a:	4620      	mov	r0, r4
 800203c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002040:	f7fe b884 	b.w	800014c <d_make_comp>
 8002044:	2168      	movs	r1, #104	; 0x68
 8002046:	f7fe f905 	bl	8000254 <d_call_offset>
 800204a:	2800      	cmp	r0, #0
 800204c:	f43f ae94 	beq.w	8001d78 <d_special_name+0x6c>
 8002050:	68e3      	ldr	r3, [r4, #12]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b47      	cmp	r3, #71	; 0x47
 8002056:	f000 80c5 	beq.w	80021e4 <d_special_name+0x4d8>
 800205a:	2b54      	cmp	r3, #84	; 0x54
 800205c:	f000 80c2 	beq.w	80021e4 <d_special_name+0x4d8>
 8002060:	2100      	movs	r1, #0
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fdd4 	bl	8001c10 <d_encoding.part.0>
 8002068:	4602      	mov	r2, r0
 800206a:	4620      	mov	r0, r4
 800206c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002070:	2300      	movs	r3, #0
 8002072:	210f      	movs	r1, #15
 8002074:	f7fe b86a 	b.w	800014c <d_make_comp>
 8002078:	2176      	movs	r1, #118	; 0x76
 800207a:	f7fe f8eb 	bl	8000254 <d_call_offset>
 800207e:	2800      	cmp	r0, #0
 8002080:	f43f ae7a 	beq.w	8001d78 <d_special_name+0x6c>
 8002084:	68e3      	ldr	r3, [r4, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b47      	cmp	r3, #71	; 0x47
 800208a:	f000 80b0 	beq.w	80021ee <d_special_name+0x4e2>
 800208e:	2b54      	cmp	r3, #84	; 0x54
 8002090:	f000 80ad 	beq.w	80021ee <d_special_name+0x4e2>
 8002094:	2100      	movs	r1, #0
 8002096:	4620      	mov	r0, r4
 8002098:	f7ff fdba 	bl	8001c10 <d_encoding.part.0>
 800209c:	4602      	mov	r2, r0
 800209e:	4620      	mov	r0, r4
 80020a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a4:	2300      	movs	r3, #0
 80020a6:	2110      	movs	r1, #16
 80020a8:	f7fe b850 	b.w	800014c <d_make_comp>
 80020ac:	f7ff fbc0 	bl	8001830 <d_name>
 80020b0:	2300      	movs	r3, #0
 80020b2:	4602      	mov	r2, r0
 80020b4:	2114      	movs	r1, #20
 80020b6:	4620      	mov	r0, r4
 80020b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020bc:	f7fe b846 	b.w	800014c <d_make_comp>
 80020c0:	310a      	adds	r1, #10
 80020c2:	62c1      	str	r1, [r0, #44]	; 0x2c
 80020c4:	f7fe fcd6 	bl	8000a74 <d_type>
 80020c8:	2300      	movs	r3, #0
 80020ca:	4602      	mov	r2, r0
 80020cc:	210a      	movs	r1, #10
 80020ce:	4620      	mov	r0, r4
 80020d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020d4:	f7fe b83a 	b.w	800014c <d_make_comp>
 80020d8:	310f      	adds	r1, #15
 80020da:	62c1      	str	r1, [r0, #44]	; 0x2c
 80020dc:	f7fe fcca 	bl	8000a74 <d_type>
 80020e0:	2300      	movs	r3, #0
 80020e2:	4602      	mov	r2, r0
 80020e4:	2109      	movs	r1, #9
 80020e6:	4620      	mov	r0, r4
 80020e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ec:	f7fe b82e 	b.w	800014c <d_make_comp>
 80020f0:	f7ff fb9e 	bl	8001830 <d_name>
 80020f4:	2300      	movs	r3, #0
 80020f6:	4602      	mov	r2, r0
 80020f8:	2115      	movs	r1, #21
 80020fa:	4620      	mov	r0, r4
 80020fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002100:	f7fe b824 	b.w	800014c <d_make_comp>
 8002104:	2100      	movs	r1, #0
 8002106:	f7fe f8a5 	bl	8000254 <d_call_offset>
 800210a:	2800      	cmp	r0, #0
 800210c:	f43f ae34 	beq.w	8001d78 <d_special_name+0x6c>
 8002110:	2100      	movs	r1, #0
 8002112:	4620      	mov	r0, r4
 8002114:	f7fe f89e 	bl	8000254 <d_call_offset>
 8002118:	2800      	cmp	r0, #0
 800211a:	f43f ae2d 	beq.w	8001d78 <d_special_name+0x6c>
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b47      	cmp	r3, #71	; 0x47
 8002124:	d06d      	beq.n	8002202 <d_special_name+0x4f6>
 8002126:	2b54      	cmp	r3, #84	; 0x54
 8002128:	d06b      	beq.n	8002202 <d_special_name+0x4f6>
 800212a:	2100      	movs	r1, #0
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff fd6f 	bl	8001c10 <d_encoding.part.0>
 8002132:	4602      	mov	r2, r0
 8002134:	4620      	mov	r0, r4
 8002136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800213a:	2300      	movs	r3, #0
 800213c:	2111      	movs	r1, #17
 800213e:	f7fe b805 	b.w	800014c <d_make_comp>
 8002142:	f7fe fc97 	bl	8000a74 <d_type>
 8002146:	2300      	movs	r3, #0
 8002148:	4602      	mov	r2, r0
 800214a:	2112      	movs	r1, #18
 800214c:	4620      	mov	r0, r4
 800214e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002152:	f7fd bffb 	b.w	800014c <d_make_comp>
 8002156:	f7fe fc8d 	bl	8000a74 <d_type>
 800215a:	2300      	movs	r3, #0
 800215c:	4602      	mov	r2, r0
 800215e:	210c      	movs	r1, #12
 8002160:	4620      	mov	r0, r4
 8002162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	f7fd bff1 	b.w	800014c <d_make_comp>
 800216a:	f7fe fc83 	bl	8000a74 <d_type>
 800216e:	2300      	movs	r3, #0
 8002170:	4602      	mov	r2, r0
 8002172:	210d      	movs	r1, #13
 8002174:	4620      	mov	r0, r4
 8002176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800217a:	f7fd bfe7 	b.w	800014c <d_make_comp>
 800217e:	46b4      	mov	ip, r6
 8002180:	2100      	movs	r1, #0
 8002182:	e004      	b.n	800218e <d_special_name+0x482>
 8002184:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8002188:	b123      	cbz	r3, 8002194 <d_special_name+0x488>
 800218a:	2b24      	cmp	r3, #36	; 0x24
 800218c:	d002      	beq.n	8002194 <d_special_name+0x488>
 800218e:	3101      	adds	r1, #1
 8002190:	42a9      	cmp	r1, r5
 8002192:	dbf7      	blt.n	8002184 <d_special_name+0x478>
 8002194:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002198:	4283      	cmp	r3, r0
 800219a:	da1d      	bge.n	80021d8 <d_special_name+0x4cc>
 800219c:	6920      	ldr	r0, [r4, #16]
 800219e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80021a2:	3301      	adds	r3, #1
 80021a4:	6163      	str	r3, [r4, #20]
 80021a6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 80021aa:	e9c3 7701 	strd	r7, r7, [r3, #4]
 80021ae:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
 80021b2:	e9c3 6103 	strd	r6, r1, [r3, #12]
 80021b6:	68e6      	ldr	r6, [r4, #12]
 80021b8:	1a6d      	subs	r5, r5, r1
 80021ba:	440e      	add	r6, r1
 80021bc:	60e6      	str	r6, [r4, #12]
 80021be:	e616      	b.n	8001dee <d_special_name+0xe2>
 80021c0:	461a      	mov	r2, r3
 80021c2:	e61e      	b.n	8001e02 <d_special_name+0xf6>
 80021c4:	212e      	movs	r1, #46	; 0x2e
 80021c6:	e5fe      	b.n	8001dc6 <d_special_name+0xba>
 80021c8:	212f      	movs	r1, #47	; 0x2f
 80021ca:	e5fc      	b.n	8001dc6 <d_special_name+0xba>
 80021cc:	2100      	movs	r1, #0
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fd1e 	bl	8001c10 <d_encoding.part.0>
 80021d4:	4602      	mov	r2, r0
 80021d6:	e6b4      	b.n	8001f42 <d_special_name+0x236>
 80021d8:	68e3      	ldr	r3, [r4, #12]
 80021da:	440b      	add	r3, r1
 80021dc:	60e3      	str	r3, [r4, #12]
 80021de:	e5cb      	b.n	8001d78 <d_special_name+0x6c>
 80021e0:	2500      	movs	r5, #0
 80021e2:	e6cf      	b.n	8001f84 <d_special_name+0x278>
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff fd91 	bl	8001d0c <d_special_name>
 80021ea:	4602      	mov	r2, r0
 80021ec:	e73d      	b.n	800206a <d_special_name+0x35e>
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff fd8c 	bl	8001d0c <d_special_name>
 80021f4:	4602      	mov	r2, r0
 80021f6:	e752      	b.n	800209e <d_special_name+0x392>
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fd87 	bl	8001d0c <d_special_name>
 80021fe:	4602      	mov	r2, r0
 8002200:	e6e7      	b.n	8001fd2 <d_special_name+0x2c6>
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff fd82 	bl	8001d0c <d_special_name>
 8002208:	4602      	mov	r2, r0
 800220a:	e793      	b.n	8002134 <d_special_name+0x428>

0800220c <d_expr_primary>:
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220e:	68c2      	ldr	r2, [r0, #12]
 8002210:	7813      	ldrb	r3, [r2, #0]
 8002212:	2b4c      	cmp	r3, #76	; 0x4c
 8002214:	d132      	bne.n	800227c <d_expr_primary+0x70>
 8002216:	1c53      	adds	r3, r2, #1
 8002218:	60c3      	str	r3, [r0, #12]
 800221a:	7851      	ldrb	r1, [r2, #1]
 800221c:	4604      	mov	r4, r0
 800221e:	295f      	cmp	r1, #95	; 0x5f
 8002220:	d051      	beq.n	80022c6 <d_expr_primary+0xba>
 8002222:	295a      	cmp	r1, #90	; 0x5a
 8002224:	d113      	bne.n	800224e <d_expr_primary+0x42>
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60e2      	str	r2, [r4, #12]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b47      	cmp	r3, #71	; 0x47
 800222e:	d043      	beq.n	80022b8 <d_expr_primary+0xac>
 8002230:	2b54      	cmp	r3, #84	; 0x54
 8002232:	d041      	beq.n	80022b8 <d_expr_primary+0xac>
 8002234:	2100      	movs	r1, #0
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff fcea 	bl	8001c10 <d_encoding.part.0>
 800223c:	4606      	mov	r6, r0
 800223e:	68e3      	ldr	r3, [r4, #12]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	2a45      	cmp	r2, #69	; 0x45
 8002244:	d11a      	bne.n	800227c <d_expr_primary+0x70>
 8002246:	3301      	adds	r3, #1
 8002248:	4630      	mov	r0, r6
 800224a:	60e3      	str	r3, [r4, #12]
 800224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800224e:	f7fe fc11 	bl	8000a74 <d_type>
 8002252:	4606      	mov	r6, r0
 8002254:	b190      	cbz	r0, 800227c <d_expr_primary+0x70>
 8002256:	7803      	ldrb	r3, [r0, #0]
 8002258:	2b27      	cmp	r3, #39	; 0x27
 800225a:	d012      	beq.n	8002282 <d_expr_primary+0x76>
 800225c:	68e2      	ldr	r2, [r4, #12]
 800225e:	7815      	ldrb	r5, [r2, #0]
 8002260:	2d6e      	cmp	r5, #110	; 0x6e
 8002262:	d023      	beq.n	80022ac <d_expr_primary+0xa0>
 8002264:	213d      	movs	r1, #61	; 0x3d
 8002266:	2d45      	cmp	r5, #69	; 0x45
 8002268:	d059      	beq.n	800231e <d_expr_primary+0x112>
 800226a:	4613      	mov	r3, r2
 800226c:	e003      	b.n	8002276 <d_expr_primary+0x6a>
 800226e:	60e3      	str	r3, [r4, #12]
 8002270:	781d      	ldrb	r5, [r3, #0]
 8002272:	2d45      	cmp	r5, #69	; 0x45
 8002274:	d02f      	beq.n	80022d6 <d_expr_primary+0xca>
 8002276:	3301      	adds	r3, #1
 8002278:	2d00      	cmp	r5, #0
 800227a:	d1f8      	bne.n	800226e <d_expr_primary+0x62>
 800227c:	2600      	movs	r6, #0
 800227e:	4630      	mov	r0, r6
 8002280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002282:	68c3      	ldr	r3, [r0, #12]
 8002284:	7c1a      	ldrb	r2, [r3, #16]
 8002286:	b11a      	cbz	r2, 8002290 <d_expr_primary+0x84>
 8002288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	1a52      	subs	r2, r2, r1
 800228e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002290:	4925      	ldr	r1, [pc, #148]	; (8002328 <d_expr_primary+0x11c>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	f003 ff46 	bl	8006124 <strcmp>
 8002298:	2800      	cmp	r0, #0
 800229a:	d1df      	bne.n	800225c <d_expr_primary+0x50>
 800229c:	68e2      	ldr	r2, [r4, #12]
 800229e:	7815      	ldrb	r5, [r2, #0]
 80022a0:	2d45      	cmp	r5, #69	; 0x45
 80022a2:	d03e      	beq.n	8002322 <d_expr_primary+0x116>
 80022a4:	2d6e      	cmp	r5, #110	; 0x6e
 80022a6:	d001      	beq.n	80022ac <d_expr_primary+0xa0>
 80022a8:	213d      	movs	r1, #61	; 0x3d
 80022aa:	e7de      	b.n	800226a <d_expr_primary+0x5e>
 80022ac:	1c53      	adds	r3, r2, #1
 80022ae:	60e3      	str	r3, [r4, #12]
 80022b0:	7855      	ldrb	r5, [r2, #1]
 80022b2:	213e      	movs	r1, #62	; 0x3e
 80022b4:	461a      	mov	r2, r3
 80022b6:	e7d6      	b.n	8002266 <d_expr_primary+0x5a>
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fd27 	bl	8001d0c <d_special_name>
 80022be:	68e3      	ldr	r3, [r4, #12]
 80022c0:	4606      	mov	r6, r0
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	e7bd      	b.n	8002242 <d_expr_primary+0x36>
 80022c6:	1c93      	adds	r3, r2, #2
 80022c8:	60c3      	str	r3, [r0, #12]
 80022ca:	7892      	ldrb	r2, [r2, #2]
 80022cc:	2a5a      	cmp	r2, #90	; 0x5a
 80022ce:	bf18      	it	ne
 80022d0:	2600      	movne	r6, #0
 80022d2:	d1b6      	bne.n	8002242 <d_expr_primary+0x36>
 80022d4:	e7a7      	b.n	8002226 <d_expr_primary+0x1a>
 80022d6:	1a9d      	subs	r5, r3, r2
 80022d8:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 80022dc:	4298      	cmp	r0, r3
 80022de:	da1c      	bge.n	800231a <d_expr_primary+0x10e>
 80022e0:	2700      	movs	r7, #0
 80022e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80022e6:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 80022ea:	eb0e 038c 	add.w	r3, lr, ip, lsl #2
 80022ee:	3001      	adds	r0, #1
 80022f0:	42bd      	cmp	r5, r7
 80022f2:	e9c3 7701 	strd	r7, r7, [r3, #4]
 80022f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80022fa:	6160      	str	r0, [r4, #20]
 80022fc:	dd0d      	ble.n	800231a <d_expr_primary+0x10e>
 80022fe:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8002302:	f80e 700c 	strb.w	r7, [lr, ip]
 8002306:	e9c3 2503 	strd	r2, r5, [r3, #12]
 800230a:	4632      	mov	r2, r6
 800230c:	4620      	mov	r0, r4
 800230e:	f7fd ff1d 	bl	800014c <d_make_comp>
 8002312:	68e3      	ldr	r3, [r4, #12]
 8002314:	4606      	mov	r6, r0
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	e793      	b.n	8002242 <d_expr_primary+0x36>
 800231a:	2300      	movs	r3, #0
 800231c:	e7f5      	b.n	800230a <d_expr_primary+0xfe>
 800231e:	2500      	movs	r5, #0
 8002320:	e7da      	b.n	80022d8 <d_expr_primary+0xcc>
 8002322:	3201      	adds	r2, #1
 8002324:	60e2      	str	r2, [r4, #12]
 8002326:	e7aa      	b.n	800227e <d_expr_primary+0x72>
 8002328:	0800f9dc 	.word	0x0800f9dc

0800232c <d_expression_1>:
 800232c:	68c2      	ldr	r2, [r0, #12]
 800232e:	7813      	ldrb	r3, [r2, #0]
 8002330:	2b4c      	cmp	r3, #76	; 0x4c
 8002332:	f000 80a4 	beq.w	800247e <d_expression_1+0x152>
 8002336:	2b54      	cmp	r3, #84	; 0x54
 8002338:	f000 80a2 	beq.w	8002480 <d_expression_1+0x154>
 800233c:	2b73      	cmp	r3, #115	; 0x73
 800233e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002342:	4604      	mov	r4, r0
 8002344:	d065      	beq.n	8002412 <d_expression_1+0xe6>
 8002346:	2b66      	cmp	r3, #102	; 0x66
 8002348:	d033      	beq.n	80023b2 <d_expression_1+0x86>
 800234a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800234e:	2909      	cmp	r1, #9
 8002350:	d80e      	bhi.n	8002370 <d_expression_1+0x44>
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff f8d4 	bl	8001500 <d_unqualified_name>
 8002358:	4605      	mov	r5, r0
 800235a:	2800      	cmp	r0, #0
 800235c:	f000 808b 	beq.w	8002476 <d_expression_1+0x14a>
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	2a49      	cmp	r2, #73	; 0x49
 8002366:	f000 808d 	beq.w	8002484 <d_expression_1+0x158>
 800236a:	4628      	mov	r0, r5
 800236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002370:	2b6f      	cmp	r3, #111	; 0x6f
 8002372:	d05f      	beq.n	8002434 <d_expression_1+0x108>
 8002374:	2b69      	cmp	r3, #105	; 0x69
 8002376:	f040 8092 	bne.w	800249e <d_expression_1+0x172>
 800237a:	7853      	ldrb	r3, [r2, #1]
 800237c:	2b6c      	cmp	r3, #108	; 0x6c
 800237e:	f000 80b1 	beq.w	80024e4 <d_expression_1+0x1b8>
 8002382:	4620      	mov	r0, r4
 8002384:	f7fe ffa0 	bl	80012c8 <d_operator_name>
 8002388:	4605      	mov	r5, r0
 800238a:	2800      	cmp	r0, #0
 800238c:	d073      	beq.n	8002476 <d_expression_1+0x14a>
 800238e:	7803      	ldrb	r3, [r0, #0]
 8002390:	2b32      	cmp	r3, #50	; 0x32
 8002392:	d055      	beq.n	8002440 <d_expression_1+0x114>
 8002394:	2b34      	cmp	r3, #52	; 0x34
 8002396:	f000 81a9 	beq.w	80026ec <d_expression_1+0x3c0>
 800239a:	d86c      	bhi.n	8002476 <d_expression_1+0x14a>
 800239c:	2b33      	cmp	r3, #51	; 0x33
 800239e:	d16a      	bne.n	8002476 <d_expression_1+0x14a>
 80023a0:	68c3      	ldr	r3, [r0, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d867      	bhi.n	8002476 <d_expression_1+0x14a>
 80023a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023aa:	00e6      	.short	0x00e6
 80023ac:	006600ee 	.word	0x006600ee
 80023b0:	0066      	.short	0x0066
 80023b2:	7853      	ldrb	r3, [r2, #1]
 80023b4:	2b70      	cmp	r3, #112	; 0x70
 80023b6:	d1e4      	bne.n	8002382 <d_expression_1+0x56>
 80023b8:	1c93      	adds	r3, r2, #2
 80023ba:	60c3      	str	r3, [r0, #12]
 80023bc:	7893      	ldrb	r3, [r2, #2]
 80023be:	2b54      	cmp	r3, #84	; 0x54
 80023c0:	f000 813a 	beq.w	8002638 <d_expression_1+0x30c>
 80023c4:	2b5f      	cmp	r3, #95	; 0x5f
 80023c6:	f000 80b6 	beq.w	8002536 <d_expression_1+0x20a>
 80023ca:	2b6e      	cmp	r3, #110	; 0x6e
 80023cc:	d053      	beq.n	8002476 <d_expression_1+0x14a>
 80023ce:	f7fd ff07 	bl	80001e0 <d_number>
 80023d2:	1c41      	adds	r1, r0, #1
 80023d4:	d44f      	bmi.n	8002476 <d_expression_1+0x14a>
 80023d6:	68e3      	ldr	r3, [r4, #12]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	2a5f      	cmp	r2, #95	; 0x5f
 80023dc:	d14b      	bne.n	8002476 <d_expression_1+0x14a>
 80023de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80023e2:	3301      	adds	r3, #1
 80023e4:	4291      	cmp	r1, r2
 80023e6:	60e3      	str	r3, [r4, #12]
 80023e8:	d045      	beq.n	8002476 <d_expression_1+0x14a>
 80023ea:	3002      	adds	r0, #2
 80023ec:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	da40      	bge.n	8002476 <d_expression_1+0x14a>
 80023f4:	2600      	movs	r6, #0
 80023f6:	2706      	movs	r7, #6
 80023f8:	6922      	ldr	r2, [r4, #16]
 80023fa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80023fe:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8002402:	3301      	adds	r3, #1
 8002404:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8002408:	6163      	str	r3, [r4, #20]
 800240a:	f802 7021 	strb.w	r7, [r2, r1, lsl #2]
 800240e:	60e8      	str	r0, [r5, #12]
 8002410:	e7ab      	b.n	800236a <d_expression_1+0x3e>
 8002412:	7853      	ldrb	r3, [r2, #1]
 8002414:	2b72      	cmp	r3, #114	; 0x72
 8002416:	d050      	beq.n	80024ba <d_expression_1+0x18e>
 8002418:	2b70      	cmp	r3, #112	; 0x70
 800241a:	d1b2      	bne.n	8002382 <d_expression_1+0x56>
 800241c:	3202      	adds	r2, #2
 800241e:	60c2      	str	r2, [r0, #12]
 8002420:	f7ff ff84 	bl	800232c <d_expression_1>
 8002424:	2300      	movs	r3, #0
 8002426:	4602      	mov	r2, r0
 8002428:	214b      	movs	r1, #75	; 0x4b
 800242a:	4620      	mov	r0, r4
 800242c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002430:	f7fd be8c 	b.w	800014c <d_make_comp>
 8002434:	7853      	ldrb	r3, [r2, #1]
 8002436:	2b6e      	cmp	r3, #110	; 0x6e
 8002438:	d1a3      	bne.n	8002382 <d_expression_1+0x56>
 800243a:	3202      	adds	r2, #2
 800243c:	60c2      	str	r2, [r0, #12]
 800243e:	e788      	b.n	8002352 <d_expression_1+0x26>
 8002440:	68c1      	ldr	r1, [r0, #12]
 8002442:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002444:	688a      	ldr	r2, [r1, #8]
 8002446:	680e      	ldr	r6, [r1, #0]
 8002448:	3a02      	subs	r2, #2
 800244a:	4413      	add	r3, r2
 800244c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800244e:	7833      	ldrb	r3, [r6, #0]
 8002450:	2b73      	cmp	r3, #115	; 0x73
 8002452:	d15c      	bne.n	800250e <d_expression_1+0x1e2>
 8002454:	7872      	ldrb	r2, [r6, #1]
 8002456:	2a74      	cmp	r2, #116	; 0x74
 8002458:	d159      	bne.n	800250e <d_expression_1+0x1e2>
 800245a:	78b2      	ldrb	r2, [r6, #2]
 800245c:	2a00      	cmp	r2, #0
 800245e:	d156      	bne.n	800250e <d_expression_1+0x1e2>
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe fb07 	bl	8000a74 <d_type>
 8002466:	4603      	mov	r3, r0
 8002468:	462a      	mov	r2, r5
 800246a:	4620      	mov	r0, r4
 800246c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002470:	2137      	movs	r1, #55	; 0x37
 8002472:	f7fd be6b 	b.w	800014c <d_make_comp>
 8002476:	2500      	movs	r5, #0
 8002478:	4628      	mov	r0, r5
 800247a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800247e:	e6c5      	b.n	800220c <d_expr_primary>
 8002480:	f7fe b8da 	b.w	8000638 <d_template_param>
 8002484:	3301      	adds	r3, #1
 8002486:	60e3      	str	r3, [r4, #12]
 8002488:	4620      	mov	r0, r4
 800248a:	f000 fa81 	bl	8002990 <d_template_args_1>
 800248e:	462a      	mov	r2, r5
 8002490:	4603      	mov	r3, r0
 8002492:	2104      	movs	r1, #4
 8002494:	4620      	mov	r0, r4
 8002496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800249a:	f7fd be57 	b.w	800014c <d_make_comp>
 800249e:	2b74      	cmp	r3, #116	; 0x74
 80024a0:	f47f af6f 	bne.w	8002382 <d_expression_1+0x56>
 80024a4:	7853      	ldrb	r3, [r2, #1]
 80024a6:	2b6c      	cmp	r3, #108	; 0x6c
 80024a8:	f47f af6b 	bne.w	8002382 <d_expression_1+0x56>
 80024ac:	3202      	adds	r2, #2
 80024ae:	60e2      	str	r2, [r4, #12]
 80024b0:	f7fe fae0 	bl	8000a74 <d_type>
 80024b4:	68e2      	ldr	r2, [r4, #12]
 80024b6:	4605      	mov	r5, r0
 80024b8:	e017      	b.n	80024ea <d_expression_1+0x1be>
 80024ba:	3202      	adds	r2, #2
 80024bc:	60c2      	str	r2, [r0, #12]
 80024be:	f7fe fad9 	bl	8000a74 <d_type>
 80024c2:	4605      	mov	r5, r0
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff f81b 	bl	8001500 <d_unqualified_name>
 80024ca:	68e3      	ldr	r3, [r4, #12]
 80024cc:	4606      	mov	r6, r0
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	2a49      	cmp	r2, #73	; 0x49
 80024d2:	d023      	beq.n	800251c <d_expression_1+0x1f0>
 80024d4:	4603      	mov	r3, r0
 80024d6:	462a      	mov	r2, r5
 80024d8:	4620      	mov	r0, r4
 80024da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024de:	2101      	movs	r1, #1
 80024e0:	f7fd be34 	b.w	800014c <d_make_comp>
 80024e4:	2500      	movs	r5, #0
 80024e6:	3202      	adds	r2, #2
 80024e8:	60e2      	str	r2, [r4, #12]
 80024ea:	7811      	ldrb	r1, [r2, #0]
 80024ec:	2900      	cmp	r1, #0
 80024ee:	d0c2      	beq.n	8002476 <d_expression_1+0x14a>
 80024f0:	7853      	ldrb	r3, [r2, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0bf      	beq.n	8002476 <d_expression_1+0x14a>
 80024f6:	2145      	movs	r1, #69	; 0x45
 80024f8:	4620      	mov	r0, r4
 80024fa:	f000 f939 	bl	8002770 <d_exprlist>
 80024fe:	462a      	mov	r2, r5
 8002500:	4603      	mov	r3, r0
 8002502:	2131      	movs	r1, #49	; 0x31
 8002504:	4620      	mov	r0, r4
 8002506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800250a:	f7fd be1f 	b.w	800014c <d_make_comp>
 800250e:	68cf      	ldr	r7, [r1, #12]
 8002510:	2f03      	cmp	r7, #3
 8002512:	d8b0      	bhi.n	8002476 <d_expression_1+0x14a>
 8002514:	e8df f007 	tbb	[pc, r7]
 8002518:	3c66132f 	.word	0x3c66132f
 800251c:	3301      	adds	r3, #1
 800251e:	60e3      	str	r3, [r4, #12]
 8002520:	4620      	mov	r0, r4
 8002522:	f000 fa35 	bl	8002990 <d_template_args_1>
 8002526:	4632      	mov	r2, r6
 8002528:	4603      	mov	r3, r0
 800252a:	2104      	movs	r1, #4
 800252c:	4620      	mov	r0, r4
 800252e:	f7fd fe0d 	bl	800014c <d_make_comp>
 8002532:	4603      	mov	r3, r0
 8002534:	e7cf      	b.n	80024d6 <d_expression_1+0x1aa>
 8002536:	3203      	adds	r2, #3
 8002538:	2001      	movs	r0, #1
 800253a:	60e2      	str	r2, [r4, #12]
 800253c:	e756      	b.n	80023ec <d_expression_1+0xc0>
 800253e:	7832      	ldrb	r2, [r6, #0]
 8002540:	2a70      	cmp	r2, #112	; 0x70
 8002542:	f000 8082 	beq.w	800264a <d_expression_1+0x31e>
 8002546:	2a6d      	cmp	r2, #109	; 0x6d
 8002548:	d07f      	beq.n	800264a <d_expression_1+0x31e>
 800254a:	2700      	movs	r7, #0
 800254c:	2b73      	cmp	r3, #115	; 0x73
 800254e:	d177      	bne.n	8002640 <d_expression_1+0x314>
 8002550:	7873      	ldrb	r3, [r6, #1]
 8002552:	2b50      	cmp	r3, #80	; 0x50
 8002554:	d174      	bne.n	8002640 <d_expression_1+0x314>
 8002556:	78b3      	ldrb	r3, [r6, #2]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d171      	bne.n	8002640 <d_expression_1+0x314>
 800255c:	4620      	mov	r0, r4
 800255e:	f000 fa17 	bl	8002990 <d_template_args_1>
 8002562:	4603      	mov	r3, r0
 8002564:	2f00      	cmp	r7, #0
 8002566:	f43f af7f 	beq.w	8002468 <d_expression_1+0x13c>
 800256a:	461a      	mov	r2, r3
 800256c:	2139      	movs	r1, #57	; 0x39
 800256e:	4620      	mov	r0, r4
 8002570:	f7fd fdec 	bl	800014c <d_make_comp>
 8002574:	e777      	b.n	8002466 <d_expression_1+0x13a>
 8002576:	462a      	mov	r2, r5
 8002578:	4620      	mov	r0, r4
 800257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800257e:	2300      	movs	r3, #0
 8002580:	2136      	movs	r1, #54	; 0x36
 8002582:	f7fd bde3 	b.w	800014c <d_make_comp>
 8002586:	4620      	mov	r0, r4
 8002588:	f7ff fed0 	bl	800232c <d_expression_1>
 800258c:	4603      	mov	r3, r0
 800258e:	e76b      	b.n	8002468 <d_expression_1+0x13c>
 8002590:	2b71      	cmp	r3, #113	; 0x71
 8002592:	d168      	bne.n	8002666 <d_expression_1+0x33a>
 8002594:	7873      	ldrb	r3, [r6, #1]
 8002596:	2b75      	cmp	r3, #117	; 0x75
 8002598:	d165      	bne.n	8002666 <d_expression_1+0x33a>
 800259a:	78b3      	ldrb	r3, [r6, #2]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d162      	bne.n	8002666 <d_expression_1+0x33a>
 80025a0:	4620      	mov	r0, r4
 80025a2:	f7ff fec3 	bl	800232c <d_expression_1>
 80025a6:	4606      	mov	r6, r0
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff febf 	bl	800232c <d_expression_1>
 80025ae:	4607      	mov	r7, r0
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff febb 	bl	800232c <d_expression_1>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2800      	cmp	r0, #0
 80025ba:	f43f af5c 	beq.w	8002476 <d_expression_1+0x14a>
 80025be:	463a      	mov	r2, r7
 80025c0:	213c      	movs	r1, #60	; 0x3c
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7fd fdc2 	bl	800014c <d_make_comp>
 80025c8:	4632      	mov	r2, r6
 80025ca:	4603      	mov	r3, r0
 80025cc:	213b      	movs	r1, #59	; 0x3b
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7fd fdbc 	bl	800014c <d_make_comp>
 80025d4:	462a      	mov	r2, r5
 80025d6:	4603      	mov	r3, r0
 80025d8:	213a      	movs	r1, #58	; 0x3a
 80025da:	4620      	mov	r0, r4
 80025dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025e0:	f7fd bdb4 	b.w	800014c <d_make_comp>
 80025e4:	68eb      	ldr	r3, [r5, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	785a      	ldrb	r2, [r3, #1]
 80025ea:	2a63      	cmp	r2, #99	; 0x63
 80025ec:	f000 8092 	beq.w	8002714 <d_expression_1+0x3e8>
 80025f0:	7833      	ldrb	r3, [r6, #0]
 80025f2:	2b66      	cmp	r3, #102	; 0x66
 80025f4:	f000 809c 	beq.w	8002730 <d_expression_1+0x404>
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff fe97 	bl	800232c <d_expression_1>
 80025fe:	4607      	mov	r7, r0
 8002600:	7833      	ldrb	r3, [r6, #0]
 8002602:	2b63      	cmp	r3, #99	; 0x63
 8002604:	d156      	bne.n	80026b4 <d_expression_1+0x388>
 8002606:	7872      	ldrb	r2, [r6, #1]
 8002608:	2a6c      	cmp	r2, #108	; 0x6c
 800260a:	d153      	bne.n	80026b4 <d_expression_1+0x388>
 800260c:	78b2      	ldrb	r2, [r6, #2]
 800260e:	2a00      	cmp	r2, #0
 8002610:	d150      	bne.n	80026b4 <d_expression_1+0x388>
 8002612:	2145      	movs	r1, #69	; 0x45
 8002614:	4620      	mov	r0, r4
 8002616:	f000 f8ab 	bl	8002770 <d_exprlist>
 800261a:	4606      	mov	r6, r0
 800261c:	4633      	mov	r3, r6
 800261e:	463a      	mov	r2, r7
 8002620:	2139      	movs	r1, #57	; 0x39
 8002622:	4620      	mov	r0, r4
 8002624:	f7fd fd92 	bl	800014c <d_make_comp>
 8002628:	462a      	mov	r2, r5
 800262a:	4603      	mov	r3, r0
 800262c:	2138      	movs	r1, #56	; 0x38
 800262e:	4620      	mov	r0, r4
 8002630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002634:	f7fd bd8a 	b.w	800014c <d_make_comp>
 8002638:	3203      	adds	r2, #3
 800263a:	2000      	movs	r0, #0
 800263c:	60e2      	str	r2, [r4, #12]
 800263e:	e6d5      	b.n	80023ec <d_expression_1+0xc0>
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff fe73 	bl	800232c <d_expression_1>
 8002646:	4603      	mov	r3, r0
 8002648:	e78c      	b.n	8002564 <d_expression_1+0x238>
 800264a:	7871      	ldrb	r1, [r6, #1]
 800264c:	4291      	cmp	r1, r2
 800264e:	f47f af7c 	bne.w	800254a <d_expression_1+0x21e>
 8002652:	68e2      	ldr	r2, [r4, #12]
 8002654:	7811      	ldrb	r1, [r2, #0]
 8002656:	295f      	cmp	r1, #95	; 0x5f
 8002658:	f47f af78 	bne.w	800254c <d_expression_1+0x220>
 800265c:	3201      	adds	r2, #1
 800265e:	60e2      	str	r2, [r4, #12]
 8002660:	2700      	movs	r7, #0
 8002662:	7833      	ldrb	r3, [r6, #0]
 8002664:	e772      	b.n	800254c <d_expression_1+0x220>
 8002666:	7833      	ldrb	r3, [r6, #0]
 8002668:	2b66      	cmp	r3, #102	; 0x66
 800266a:	d06d      	beq.n	8002748 <d_expression_1+0x41c>
 800266c:	2b6e      	cmp	r3, #110	; 0x6e
 800266e:	f47f af02 	bne.w	8002476 <d_expression_1+0x14a>
 8002672:	7873      	ldrb	r3, [r6, #1]
 8002674:	2b77      	cmp	r3, #119	; 0x77
 8002676:	d002      	beq.n	800267e <d_expression_1+0x352>
 8002678:	2b61      	cmp	r3, #97	; 0x61
 800267a:	f47f aefc 	bne.w	8002476 <d_expression_1+0x14a>
 800267e:	215f      	movs	r1, #95	; 0x5f
 8002680:	4620      	mov	r0, r4
 8002682:	f000 f875 	bl	8002770 <d_exprlist>
 8002686:	4606      	mov	r6, r0
 8002688:	4620      	mov	r0, r4
 800268a:	f7fe f9f3 	bl	8000a74 <d_type>
 800268e:	68e3      	ldr	r3, [r4, #12]
 8002690:	4607      	mov	r7, r0
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	2a45      	cmp	r2, #69	; 0x45
 8002696:	d067      	beq.n	8002768 <d_expression_1+0x43c>
 8002698:	2a70      	cmp	r2, #112	; 0x70
 800269a:	d059      	beq.n	8002750 <d_expression_1+0x424>
 800269c:	2a69      	cmp	r2, #105	; 0x69
 800269e:	f47f aeea 	bne.w	8002476 <d_expression_1+0x14a>
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	2b6c      	cmp	r3, #108	; 0x6c
 80026a6:	f47f aee6 	bne.w	8002476 <d_expression_1+0x14a>
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7ff fe3e 	bl	800232c <d_expression_1>
 80026b0:	4603      	mov	r3, r0
 80026b2:	e784      	b.n	80025be <d_expression_1+0x292>
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d126      	bne.n	8002706 <d_expression_1+0x3da>
 80026b8:	7872      	ldrb	r2, [r6, #1]
 80026ba:	2a74      	cmp	r2, #116	; 0x74
 80026bc:	d123      	bne.n	8002706 <d_expression_1+0x3da>
 80026be:	78b2      	ldrb	r2, [r6, #2]
 80026c0:	bb0a      	cbnz	r2, 8002706 <d_expression_1+0x3da>
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7fe ff1c 	bl	8001500 <d_unqualified_name>
 80026c8:	68e3      	ldr	r3, [r4, #12]
 80026ca:	4606      	mov	r6, r0
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	2a49      	cmp	r2, #73	; 0x49
 80026d0:	d1a4      	bne.n	800261c <d_expression_1+0x2f0>
 80026d2:	3301      	adds	r3, #1
 80026d4:	60e3      	str	r3, [r4, #12]
 80026d6:	4620      	mov	r0, r4
 80026d8:	f000 f95a 	bl	8002990 <d_template_args_1>
 80026dc:	4632      	mov	r2, r6
 80026de:	4603      	mov	r3, r0
 80026e0:	2104      	movs	r1, #4
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7fd fd32 	bl	800014c <d_make_comp>
 80026e8:	4606      	mov	r6, r0
 80026ea:	e797      	b.n	800261c <d_expression_1+0x2f0>
 80026ec:	68e3      	ldr	r3, [r4, #12]
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	2a5f      	cmp	r2, #95	; 0x5f
 80026f2:	f47f af48 	bne.w	8002586 <d_expression_1+0x25a>
 80026f6:	3301      	adds	r3, #1
 80026f8:	60e3      	str	r3, [r4, #12]
 80026fa:	2145      	movs	r1, #69	; 0x45
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 f837 	bl	8002770 <d_exprlist>
 8002702:	4603      	mov	r3, r0
 8002704:	e6b0      	b.n	8002468 <d_expression_1+0x13c>
 8002706:	2b70      	cmp	r3, #112	; 0x70
 8002708:	d017      	beq.n	800273a <d_expression_1+0x40e>
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff fe0e 	bl	800232c <d_expression_1>
 8002710:	4606      	mov	r6, r0
 8002712:	e783      	b.n	800261c <d_expression_1+0x2f0>
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800271a:	2a01      	cmp	r2, #1
 800271c:	d903      	bls.n	8002726 <d_expression_1+0x3fa>
 800271e:	3b72      	subs	r3, #114	; 0x72
 8002720:	2b01      	cmp	r3, #1
 8002722:	f63f af65 	bhi.w	80025f0 <d_expression_1+0x2c4>
 8002726:	4620      	mov	r0, r4
 8002728:	f7fe f9a4 	bl	8000a74 <d_type>
 800272c:	4607      	mov	r7, r0
 800272e:	e767      	b.n	8002600 <d_expression_1+0x2d4>
 8002730:	4620      	mov	r0, r4
 8002732:	f7fe fdc9 	bl	80012c8 <d_operator_name>
 8002736:	4607      	mov	r7, r0
 8002738:	e762      	b.n	8002600 <d_expression_1+0x2d4>
 800273a:	7873      	ldrb	r3, [r6, #1]
 800273c:	2b74      	cmp	r3, #116	; 0x74
 800273e:	d1e4      	bne.n	800270a <d_expression_1+0x3de>
 8002740:	78b3      	ldrb	r3, [r6, #2]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0bd      	beq.n	80026c2 <d_expression_1+0x396>
 8002746:	e7e0      	b.n	800270a <d_expression_1+0x3de>
 8002748:	4620      	mov	r0, r4
 800274a:	f7fe fdbd 	bl	80012c8 <d_operator_name>
 800274e:	e72a      	b.n	80025a6 <d_expression_1+0x27a>
 8002750:	785a      	ldrb	r2, [r3, #1]
 8002752:	2a69      	cmp	r2, #105	; 0x69
 8002754:	f47f ae8f 	bne.w	8002476 <d_expression_1+0x14a>
 8002758:	3302      	adds	r3, #2
 800275a:	60e3      	str	r3, [r4, #12]
 800275c:	2145      	movs	r1, #69	; 0x45
 800275e:	4620      	mov	r0, r4
 8002760:	f000 f806 	bl	8002770 <d_exprlist>
 8002764:	4603      	mov	r3, r0
 8002766:	e72a      	b.n	80025be <d_expression_1+0x292>
 8002768:	3301      	adds	r3, #1
 800276a:	60e3      	str	r3, [r4, #12]
 800276c:	2300      	movs	r3, #0
 800276e:	e726      	b.n	80025be <d_expression_1+0x292>

08002770 <d_exprlist>:
 8002770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002774:	460e      	mov	r6, r1
 8002776:	2300      	movs	r3, #0
 8002778:	68c2      	ldr	r2, [r0, #12]
 800277a:	b082      	sub	sp, #8
 800277c:	7811      	ldrb	r1, [r2, #0]
 800277e:	4604      	mov	r4, r0
 8002780:	42b1      	cmp	r1, r6
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	d024      	beq.n	80027d0 <d_exprlist+0x60>
 8002786:	2701      	movs	r7, #1
 8002788:	ad01      	add	r5, sp, #4
 800278a:	e00c      	b.n	80027a6 <d_exprlist+0x36>
 800278c:	2300      	movs	r3, #0
 800278e:	212e      	movs	r1, #46	; 0x2e
 8002790:	4620      	mov	r0, r4
 8002792:	f7fd fcdb 	bl	800014c <d_make_comp>
 8002796:	6028      	str	r0, [r5, #0]
 8002798:	f100 0510 	add.w	r5, r0, #16
 800279c:	b170      	cbz	r0, 80027bc <d_exprlist+0x4c>
 800279e:	68e3      	ldr	r3, [r4, #12]
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	42b2      	cmp	r2, r6
 80027a4:	d00e      	beq.n	80027c4 <d_exprlist+0x54>
 80027a6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80027aa:	4620      	mov	r0, r4
 80027ac:	6327      	str	r7, [r4, #48]	; 0x30
 80027ae:	f7ff fdbd 	bl	800232c <d_expression_1>
 80027b2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80027b6:	4602      	mov	r2, r0
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1e7      	bne.n	800278c <d_exprlist+0x1c>
 80027bc:	2000      	movs	r0, #0
 80027be:	b002      	add	sp, #8
 80027c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027c4:	9801      	ldr	r0, [sp, #4]
 80027c6:	3301      	adds	r3, #1
 80027c8:	60e3      	str	r3, [r4, #12]
 80027ca:	b002      	add	sp, #8
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027d0:	1c51      	adds	r1, r2, #1
 80027d2:	60c1      	str	r1, [r0, #12]
 80027d4:	461a      	mov	r2, r3
 80027d6:	212e      	movs	r1, #46	; 0x2e
 80027d8:	b002      	add	sp, #8
 80027da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027de:	f7fd bcb5 	b.w	800014c <d_make_comp>
 80027e2:	bf00      	nop

080027e4 <d_cv_qualifiers>:
 80027e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	f1b2 0900 	subs.w	r9, r2, #0
 80027ec:	68c2      	ldr	r2, [r0, #12]
 80027ee:	460f      	mov	r7, r1
 80027f0:	460d      	mov	r5, r1
 80027f2:	f04f 0b01 	mov.w	fp, #1
 80027f6:	4604      	mov	r4, r0
 80027f8:	bf15      	itete	ne
 80027fa:	f04f 0a1e 	movne.w	sl, #30
 80027fe:	f04f 0a1b 	moveq.w	sl, #27
 8002802:	f04f 081d 	movne.w	r8, #29
 8002806:	f04f 081a 	moveq.w	r8, #26
 800280a:	bf14      	ite	ne
 800280c:	261c      	movne	r6, #28
 800280e:	2619      	moveq	r6, #25
 8002810:	7811      	ldrb	r1, [r2, #0]
 8002812:	b083      	sub	sp, #12
 8002814:	e01b      	b.n	800284e <d_cv_qualifiers+0x6a>
 8002816:	2956      	cmp	r1, #86	; 0x56
 8002818:	d034      	beq.n	8002884 <d_cv_qualifiers+0xa0>
 800281a:	294b      	cmp	r1, #75	; 0x4b
 800281c:	d039      	beq.n	8002892 <d_cv_qualifiers+0xae>
 800281e:	7853      	ldrb	r3, [r2, #1]
 8002820:	b35b      	cbz	r3, 800287a <d_cv_qualifiers+0x96>
 8002822:	1c93      	adds	r3, r2, #2
 8002824:	60e3      	str	r3, [r4, #12]
 8002826:	7851      	ldrb	r1, [r2, #1]
 8002828:	2978      	cmp	r1, #120	; 0x78
 800282a:	d052      	beq.n	80028d2 <d_cv_qualifiers+0xee>
 800282c:	296f      	cmp	r1, #111	; 0x6f
 800282e:	d136      	bne.n	800289e <d_cv_qualifiers+0xba>
 8002830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002832:	214f      	movs	r1, #79	; 0x4f
 8002834:	3309      	adds	r3, #9
 8002836:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002838:	2300      	movs	r3, #0
 800283a:	2200      	movs	r2, #0
 800283c:	4620      	mov	r0, r4
 800283e:	f7fd fc85 	bl	800014c <d_make_comp>
 8002842:	6028      	str	r0, [r5, #0]
 8002844:	b1c8      	cbz	r0, 800287a <d_cv_qualifiers+0x96>
 8002846:	68e2      	ldr	r2, [r4, #12]
 8002848:	f100 050c 	add.w	r5, r0, #12
 800284c:	7811      	ldrb	r1, [r2, #0]
 800284e:	4610      	mov	r0, r2
 8002850:	f7fd fe20 	bl	8000494 <next_is_type_qual.isra.0>
 8002854:	2800      	cmp	r0, #0
 8002856:	d042      	beq.n	80028de <d_cv_qualifiers+0xfa>
 8002858:	1c53      	adds	r3, r2, #1
 800285a:	2972      	cmp	r1, #114	; 0x72
 800285c:	60e3      	str	r3, [r4, #12]
 800285e:	d1da      	bne.n	8002816 <d_cv_qualifiers+0x32>
 8002860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002862:	4631      	mov	r1, r6
 8002864:	f103 0209 	add.w	r2, r3, #9
 8002868:	62e2      	str	r2, [r4, #44]	; 0x2c
 800286a:	2300      	movs	r3, #0
 800286c:	2200      	movs	r2, #0
 800286e:	4620      	mov	r0, r4
 8002870:	f7fd fc6c 	bl	800014c <d_make_comp>
 8002874:	6028      	str	r0, [r5, #0]
 8002876:	2800      	cmp	r0, #0
 8002878:	d1e5      	bne.n	8002846 <d_cv_qualifiers+0x62>
 800287a:	2500      	movs	r5, #0
 800287c:	4628      	mov	r0, r5
 800287e:	b003      	add	sp, #12
 8002880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002886:	4641      	mov	r1, r8
 8002888:	f103 0209 	add.w	r2, r3, #9
 800288c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800288e:	2300      	movs	r3, #0
 8002890:	e7d3      	b.n	800283a <d_cv_qualifiers+0x56>
 8002892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002894:	4651      	mov	r1, sl
 8002896:	1d9a      	adds	r2, r3, #6
 8002898:	62e2      	str	r2, [r4, #44]	; 0x2c
 800289a:	2300      	movs	r3, #0
 800289c:	e7cd      	b.n	800283a <d_cv_qualifiers+0x56>
 800289e:	294f      	cmp	r1, #79	; 0x4f
 80028a0:	d139      	bne.n	8002916 <d_cv_qualifiers+0x132>
 80028a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028a4:	4620      	mov	r0, r4
 80028a6:	3309      	adds	r3, #9
 80028a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028ac:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 80028b0:	9101      	str	r1, [sp, #4]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	f7ff fd3a 	bl	800232c <d_expression_1>
 80028b8:	9b00      	ldr	r3, [sp, #0]
 80028ba:	9901      	ldr	r1, [sp, #4]
 80028bc:	6323      	str	r3, [r4, #48]	; 0x30
 80028be:	4603      	mov	r3, r0
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d0da      	beq.n	800287a <d_cv_qualifiers+0x96>
 80028c4:	68e2      	ldr	r2, [r4, #12]
 80028c6:	7810      	ldrb	r0, [r2, #0]
 80028c8:	2845      	cmp	r0, #69	; 0x45
 80028ca:	d1d6      	bne.n	800287a <d_cv_qualifiers+0x96>
 80028cc:	3201      	adds	r2, #1
 80028ce:	60e2      	str	r2, [r4, #12]
 80028d0:	e7b3      	b.n	800283a <d_cv_qualifiers+0x56>
 80028d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028d4:	214d      	movs	r1, #77	; 0x4d
 80028d6:	3311      	adds	r3, #17
 80028d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028da:	2300      	movs	r3, #0
 80028dc:	e7ad      	b.n	800283a <d_cv_qualifiers+0x56>
 80028de:	f1b9 0f00 	cmp.w	r9, #0
 80028e2:	d1cb      	bne.n	800287c <d_cv_qualifiers+0x98>
 80028e4:	2946      	cmp	r1, #70	; 0x46
 80028e6:	d1c9      	bne.n	800287c <d_cv_qualifiers+0x98>
 80028e8:	42bd      	cmp	r5, r7
 80028ea:	d0c7      	beq.n	800287c <d_cv_qualifiers+0x98>
 80028ec:	201d      	movs	r0, #29
 80028ee:	211e      	movs	r1, #30
 80028f0:	221c      	movs	r2, #28
 80028f2:	e004      	b.n	80028fe <d_cv_qualifiers+0x11a>
 80028f4:	2b19      	cmp	r3, #25
 80028f6:	d00c      	beq.n	8002912 <d_cv_qualifiers+0x12e>
 80028f8:	370c      	adds	r7, #12
 80028fa:	42bd      	cmp	r5, r7
 80028fc:	d0be      	beq.n	800287c <d_cv_qualifiers+0x98>
 80028fe:	683f      	ldr	r7, [r7, #0]
 8002900:	783b      	ldrb	r3, [r7, #0]
 8002902:	2b1a      	cmp	r3, #26
 8002904:	d003      	beq.n	800290e <d_cv_qualifiers+0x12a>
 8002906:	2b1b      	cmp	r3, #27
 8002908:	d1f4      	bne.n	80028f4 <d_cv_qualifiers+0x110>
 800290a:	7039      	strb	r1, [r7, #0]
 800290c:	e7f4      	b.n	80028f8 <d_cv_qualifiers+0x114>
 800290e:	7038      	strb	r0, [r7, #0]
 8002910:	e7f2      	b.n	80028f8 <d_cv_qualifiers+0x114>
 8002912:	703a      	strb	r2, [r7, #0]
 8002914:	e7f0      	b.n	80028f8 <d_cv_qualifiers+0x114>
 8002916:	2977      	cmp	r1, #119	; 0x77
 8002918:	d1af      	bne.n	800287a <d_cv_qualifiers+0x96>
 800291a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800291c:	4620      	mov	r0, r4
 800291e:	3306      	adds	r3, #6
 8002920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002922:	f7fe fd55 	bl	80013d0 <d_parmlist>
 8002926:	4603      	mov	r3, r0
 8002928:	2800      	cmp	r0, #0
 800292a:	d0a6      	beq.n	800287a <d_cv_qualifiers+0x96>
 800292c:	68e2      	ldr	r2, [r4, #12]
 800292e:	7811      	ldrb	r1, [r2, #0]
 8002930:	2945      	cmp	r1, #69	; 0x45
 8002932:	d1a2      	bne.n	800287a <d_cv_qualifiers+0x96>
 8002934:	3201      	adds	r2, #1
 8002936:	2150      	movs	r1, #80	; 0x50
 8002938:	60e2      	str	r2, [r4, #12]
 800293a:	e77e      	b.n	800283a <d_cv_qualifiers+0x56>

0800293c <d_template_arg>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	68c2      	ldr	r2, [r0, #12]
 8002940:	7813      	ldrb	r3, [r2, #0]
 8002942:	2b4c      	cmp	r3, #76	; 0x4c
 8002944:	d01f      	beq.n	8002986 <d_template_arg+0x4a>
 8002946:	4604      	mov	r4, r0
 8002948:	d807      	bhi.n	800295a <d_template_arg+0x1e>
 800294a:	3b49      	subs	r3, #73	; 0x49
 800294c:	2b01      	cmp	r3, #1
 800294e:	d815      	bhi.n	800297c <d_template_arg+0x40>
 8002950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002954:	3201      	adds	r2, #1
 8002956:	60c2      	str	r2, [r0, #12]
 8002958:	e01a      	b.n	8002990 <d_template_args_1>
 800295a:	2b58      	cmp	r3, #88	; 0x58
 800295c:	d10e      	bne.n	800297c <d_template_arg+0x40>
 800295e:	2301      	movs	r3, #1
 8002960:	441a      	add	r2, r3
 8002962:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8002964:	60c2      	str	r2, [r0, #12]
 8002966:	6303      	str	r3, [r0, #48]	; 0x30
 8002968:	f7ff fce0 	bl	800232c <d_expression_1>
 800296c:	68e3      	ldr	r3, [r4, #12]
 800296e:	6325      	str	r5, [r4, #48]	; 0x30
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	2a45      	cmp	r2, #69	; 0x45
 8002974:	d10a      	bne.n	800298c <d_template_arg+0x50>
 8002976:	3301      	adds	r3, #1
 8002978:	60e3      	str	r3, [r4, #12]
 800297a:	bd38      	pop	{r3, r4, r5, pc}
 800297c:	4620      	mov	r0, r4
 800297e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002982:	f7fe b877 	b.w	8000a74 <d_type>
 8002986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800298a:	e43f      	b.n	800220c <d_expr_primary>
 800298c:	2000      	movs	r0, #0
 800298e:	bd38      	pop	{r3, r4, r5, pc}

08002990 <d_template_args_1>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	68c2      	ldr	r2, [r0, #12]
 8002994:	4604      	mov	r4, r0
 8002996:	7813      	ldrb	r3, [r2, #0]
 8002998:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800299a:	2b45      	cmp	r3, #69	; 0x45
 800299c:	b082      	sub	sp, #8
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	d01e      	beq.n	80029e2 <d_template_args_1+0x52>
 80029a4:	ad01      	add	r5, sp, #4
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	e00c      	b.n	80029c4 <d_template_args_1+0x34>
 80029aa:	2300      	movs	r3, #0
 80029ac:	212f      	movs	r1, #47	; 0x2f
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fd fbcc 	bl	800014c <d_make_comp>
 80029b4:	6028      	str	r0, [r5, #0]
 80029b6:	f100 0510 	add.w	r5, r0, #16
 80029ba:	b148      	cbz	r0, 80029d0 <d_template_args_1+0x40>
 80029bc:	68e3      	ldr	r3, [r4, #12]
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	2a45      	cmp	r2, #69	; 0x45
 80029c2:	d008      	beq.n	80029d6 <d_template_args_1+0x46>
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff ffb9 	bl	800293c <d_template_arg>
 80029ca:	4602      	mov	r2, r0
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1ec      	bne.n	80029aa <d_template_args_1+0x1a>
 80029d0:	2000      	movs	r0, #0
 80029d2:	b002      	add	sp, #8
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	9801      	ldr	r0, [sp, #4]
 80029d8:	3301      	adds	r3, #1
 80029da:	60e3      	str	r3, [r4, #12]
 80029dc:	62a6      	str	r6, [r4, #40]	; 0x28
 80029de:	b002      	add	sp, #8
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
 80029e2:	3201      	adds	r2, #1
 80029e4:	60c2      	str	r2, [r0, #12]
 80029e6:	212f      	movs	r1, #47	; 0x2f
 80029e8:	461a      	mov	r2, r3
 80029ea:	b002      	add	sp, #8
 80029ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80029f0:	f7fd bbac 	b.w	800014c <d_make_comp>

080029f4 <d_print_comp_inner>:
 80029f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f8:	4604      	mov	r4, r0
 80029fa:	b093      	sub	sp, #76	; 0x4c
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d05c      	beq.n	8002aba <d_print_comp_inner+0xc6>
 8002a00:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
 8002a04:	2d00      	cmp	r5, #0
 8002a06:	d15b      	bne.n	8002ac0 <d_print_comp_inner+0xcc>
 8002a08:	7813      	ldrb	r3, [r2, #0]
 8002a0a:	4616      	mov	r6, r2
 8002a0c:	2b50      	cmp	r3, #80	; 0x50
 8002a0e:	d854      	bhi.n	8002aba <d_print_comp_inner+0xc6>
 8002a10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a14:	010509bf 	.word	0x010509bf
 8002a18:	018b0105 	.word	0x018b0105
 8002a1c:	07930716 	.word	0x07930716
 8002a20:	01600651 	.word	0x01600651
 8002a24:	027d02b4 	.word	0x027d02b4
 8002a28:	022f0256 	.word	0x022f0256
 8002a2c:	04d504fc 	.word	0x04d504fc
 8002a30:	047304ae 	.word	0x047304ae
 8002a34:	0337044c 	.word	0x0337044c
 8002a38:	02e90310 	.word	0x02e90310
 8002a3c:	06c806ef 	.word	0x06c806ef
 8002a40:	067a06a1 	.word	0x067a06a1
 8002a44:	008005b8 	.word	0x008005b8
 8002a48:	00800080 	.word	0x00800080
 8002a4c:	00590059 	.word	0x00590059
 8002a50:	00590059 	.word	0x00590059
 8002a54:	00590059 	.word	0x00590059
 8002a58:	00ad0059 	.word	0x00ad0059
 8002a5c:	005900ad 	.word	0x005900ad
 8002a60:	09930059 	.word	0x09930059
 8002a64:	02c30078 	.word	0x02c30078
 8002a68:	0096055c 	.word	0x0096055c
 8002a6c:	00960750 	.word	0x00960750
 8002a70:	00d000d0 	.word	0x00d000d0
 8002a74:	09180164 	.word	0x09180164
 8002a78:	08c708ee 	.word	0x08c708ee
 8002a7c:	08a00053 	.word	0x08a00053
 8002a80:	093d0965 	.word	0x093d0965
 8002a84:	005305ec 	.word	0x005305ec
 8002a88:	005301ef 	.word	0x005301ef
 8002a8c:	01300053 	.word	0x01300053
 8002a90:	07bf0130 	.word	0x07bf0130
 8002a94:	0523022a 	.word	0x0523022a
 8002a98:	08220870 	.word	0x08220870
 8002a9c:	096c07e6 	.word	0x096c07e6
 8002aa0:	00530849 	.word	0x00530849
 8002aa4:	03fe0425 	.word	0x03fe0425
 8002aa8:	038903d7 	.word	0x038903d7
 8002aac:	0059035e 	.word	0x0059035e
 8002ab0:	00590531 	.word	0x00590531
 8002ab4:	0059      	.short	0x0059
 8002ab6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002aba:	2301      	movs	r3, #1
 8002abc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002ac0:	b013      	add	sp, #76	; 0x4c
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9304      	str	r3, [sp, #16]
 8002acc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8002ad0:	9603      	str	r6, [sp, #12]
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002ad8:	9305      	str	r3, [sp, #20]
 8002ada:	ab02      	add	r3, sp, #8
 8002adc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d065      	beq.n	8002bb0 <d_print_comp_inner+0x1bc>
 8002ae4:	2111      	movs	r1, #17
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f002 f83c 	bl	8004b64 <d_print_comp>
 8002aec:	9b04      	ldr	r3, [sp, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f001 82fa 	beq.w	80040e8 <d_print_comp_inner+0x16f4>
 8002af4:	9b02      	ldr	r3, [sp, #8]
 8002af6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	d0e0      	beq.n	8002ac0 <d_print_comp_inner+0xcc>
 8002afe:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8002b02:	e7dd      	b.n	8002ac0 <d_print_comp_inner+0xcc>
 8002b04:	2111      	movs	r1, #17
 8002b06:	4620      	mov	r0, r4
 8002b08:	68f2      	ldr	r2, [r6, #12]
 8002b0a:	b013      	add	sp, #76	; 0x4c
 8002b0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	f002 b828 	b.w	8004b64 <d_print_comp>
 8002b14:	f8d0 e114 	ldr.w	lr, [r0, #276]	; 0x114
 8002b18:	f1be 0f00 	cmp.w	lr, #0
 8002b1c:	d03d      	beq.n	8002b9a <d_print_comp_inner+0x1a6>
 8002b1e:	4672      	mov	r2, lr
 8002b20:	6891      	ldr	r1, [r2, #8]
 8002b22:	b949      	cbnz	r1, 8002b38 <d_print_comp_inner+0x144>
 8002b24:	6850      	ldr	r0, [r2, #4]
 8002b26:	7800      	ldrb	r0, [r0, #0]
 8002b28:	f1a0 0c19 	sub.w	ip, r0, #25
 8002b2c:	f1bc 0f02 	cmp.w	ip, #2
 8002b30:	f201 850c 	bhi.w	800454c <d_print_comp_inner+0x1b58>
 8002b34:	4283      	cmp	r3, r0
 8002b36:	d0e5      	beq.n	8002b04 <d_print_comp_inner+0x110>
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d1f0      	bne.n	8002b20 <d_print_comp_inner+0x12c>
 8002b3e:	e02c      	b.n	8002b9a <d_print_comp_inner+0x1a6>
 8002b40:	2300      	movs	r3, #0
 8002b42:	e9d0 2144 	ldrd	r2, r1, [r0, #272]	; 0x110
 8002b46:	a802      	add	r0, sp, #8
 8002b48:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8002b4c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8002b50:	9205      	str	r2, [sp, #20]
 8002b52:	2111      	movs	r1, #17
 8002b54:	4620      	mov	r0, r4
 8002b56:	6932      	ldr	r2, [r6, #16]
 8002b58:	9304      	str	r3, [sp, #16]
 8002b5a:	f002 f803 	bl	8004b64 <d_print_comp>
 8002b5e:	9b04      	ldr	r3, [sp, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f001 84da 	beq.w	800451a <d_print_comp_inner+0x1b26>
 8002b66:	9b02      	ldr	r3, [sp, #8]
 8002b68:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b6c:	e7a8      	b.n	8002ac0 <d_print_comp_inner+0xcc>
 8002b6e:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
 8002b72:	68f1      	ldr	r1, [r6, #12]
 8002b74:	2d00      	cmp	r5, #0
 8002b76:	f041 83b5 	bne.w	80042e4 <d_print_comp_inner+0x18f0>
 8002b7a:	780b      	ldrb	r3, [r1, #0]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	f001 85fb 	beq.w	8004778 <d_print_comp_inner+0x1d84>
 8002b82:	2b23      	cmp	r3, #35	; 0x23
 8002b84:	f001 8306 	beq.w	8004194 <d_print_comp_inner+0x17a0>
 8002b88:	7832      	ldrb	r2, [r6, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f001 8302 	beq.w	8004194 <d_print_comp_inner+0x17a0>
 8002b90:	2b24      	cmp	r3, #36	; 0x24
 8002b92:	f001 866f 	beq.w	8004874 <d_print_comp_inner+0x1e80>
 8002b96:	f8d4 e114 	ldr.w	lr, [r4, #276]	; 0x114
 8002b9a:	ab02      	add	r3, sp, #8
 8002b9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002ba6:	f8cd e008 	str.w	lr, [sp, #8]
 8002baa:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002bae:	9603      	str	r6, [sp, #12]
 8002bb0:	68f2      	ldr	r2, [r6, #12]
 8002bb2:	e797      	b.n	8002ae4 <d_print_comp_inner+0xf0>
 8002bb4:	68f2      	ldr	r2, [r6, #12]
 8002bb6:	b112      	cbz	r2, 8002bbe <d_print_comp_inner+0x1ca>
 8002bb8:	2111      	movs	r1, #17
 8002bba:	f001 ffd3 	bl	8004b64 <d_print_comp>
 8002bbe:	6933      	ldr	r3, [r6, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f43f af7d 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8002bc6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8002bca:	2dfd      	cmp	r5, #253	; 0xfd
 8002bcc:	f201 84c1 	bhi.w	8004552 <d_print_comp_inner+0x1b5e>
 8002bd0:	f8df 834c 	ldr.w	r8, [pc, #844]	; 8002f20 <d_print_comp_inner+0x52c>
 8002bd4:	272c      	movs	r7, #44	; 0x2c
 8002bd6:	f04f 0900 	mov.w	r9, #0
 8002bda:	4629      	mov	r1, r5
 8002bdc:	f108 0a01 	add.w	sl, r8, #1
 8002be0:	e00b      	b.n	8002bfa <d_print_comp_inner+0x206>
 8002be2:	460b      	mov	r3, r1
 8002be4:	3101      	adds	r1, #1
 8002be6:	45d0      	cmp	r8, sl
 8002be8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002bec:	54e7      	strb	r7, [r4, r3]
 8002bee:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002bf2:	f001 8280 	beq.w	80040f6 <d_print_comp_inner+0x1702>
 8002bf6:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 8002bfa:	29ff      	cmp	r1, #255	; 0xff
 8002bfc:	d1f1      	bne.n	8002be2 <d_print_comp_inner+0x1ee>
 8002bfe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c02:	4620      	mov	r0, r4
 8002c04:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c08:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c0c:	4798      	blx	r3
 8002c0e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002c12:	2101      	movs	r1, #1
 8002c14:	3301      	adds	r3, #1
 8002c16:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e7e3      	b.n	8002be6 <d_print_comp_inner+0x1f2>
 8002c1e:	4dc1      	ldr	r5, [pc, #772]	; (8002f24 <d_print_comp_inner+0x530>)
 8002c20:	2111      	movs	r1, #17
 8002c22:	68f2      	ldr	r2, [r6, #12]
 8002c24:	f001 ff9e 	bl	8004b64 <d_print_comp>
 8002c28:	273a      	movs	r7, #58	; 0x3a
 8002c2a:	f04f 0900 	mov.w	r9, #0
 8002c2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002c32:	f105 0801 	add.w	r8, r5, #1
 8002c36:	e00b      	b.n	8002c50 <d_print_comp_inner+0x25c>
 8002c38:	460b      	mov	r3, r1
 8002c3a:	3101      	adds	r1, #1
 8002c3c:	45a8      	cmp	r8, r5
 8002c3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c42:	54e7      	strb	r7, [r4, r3]
 8002c44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c48:	f001 818f 	beq.w	8003f6a <d_print_comp_inner+0x1576>
 8002c4c:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8002c50:	29ff      	cmp	r1, #255	; 0xff
 8002c52:	d1f1      	bne.n	8002c38 <d_print_comp_inner+0x244>
 8002c54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c62:	4798      	blx	r3
 8002c64:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002c68:	2101      	movs	r1, #1
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002c70:	2300      	movs	r3, #0
 8002c72:	e7e3      	b.n	8002c3c <d_print_comp_inner+0x248>
 8002c74:	68f2      	ldr	r2, [r6, #12]
 8002c76:	7811      	ldrb	r1, [r2, #0]
 8002c78:	2927      	cmp	r1, #39	; 0x27
 8002c7a:	f041 8380 	bne.w	800437e <d_print_comp_inner+0x198a>
 8002c7e:	68d1      	ldr	r1, [r2, #12]
 8002c80:	7c0d      	ldrb	r5, [r1, #16]
 8002c82:	2d06      	cmp	r5, #6
 8002c84:	f201 828b 	bhi.w	800419e <d_print_comp_inner+0x17aa>
 8002c88:	2d00      	cmp	r5, #0
 8002c8a:	f041 8550 	bne.w	800472e <d_print_comp_inner+0x1d3a>
 8002c8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002c92:	29ff      	cmp	r1, #255	; 0xff
 8002c94:	f001 853a 	beq.w	800470c <d_print_comp_inner+0x1d18>
 8002c98:	1c4b      	adds	r3, r1, #1
 8002c9a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002c9e:	2328      	movs	r3, #40	; 0x28
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	5463      	strb	r3, [r4, r1]
 8002ca4:	2111      	movs	r1, #17
 8002ca6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002caa:	f001 ff5b 	bl	8004b64 <d_print_comp>
 8002cae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cb2:	29ff      	cmp	r1, #255	; 0xff
 8002cb4:	f001 851a 	beq.w	80046ec <d_print_comp_inner+0x1cf8>
 8002cb8:	1c4b      	adds	r3, r1, #1
 8002cba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002cbe:	2329      	movs	r3, #41	; 0x29
 8002cc0:	5463      	strb	r3, [r4, r1]
 8002cc2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002cc6:	7833      	ldrb	r3, [r6, #0]
 8002cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cca:	f001 8509 	beq.w	80046e0 <d_print_comp_inner+0x1cec>
 8002cce:	2d08      	cmp	r5, #8
 8002cd0:	f001 84fa 	beq.w	80046c8 <d_print_comp_inner+0x1cd4>
 8002cd4:	2111      	movs	r1, #17
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	6932      	ldr	r2, [r6, #16]
 8002cda:	e716      	b.n	8002b0a <d_print_comp_inner+0x116>
 8002cdc:	4f92      	ldr	r7, [pc, #584]	; (8002f28 <d_print_comp_inner+0x534>)
 8002cde:	2574      	movs	r5, #116	; 0x74
 8002ce0:	f04f 0800 	mov.w	r8, #0
 8002ce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ce8:	f107 091d 	add.w	r9, r7, #29
 8002cec:	e00b      	b.n	8002d06 <d_print_comp_inner+0x312>
 8002cee:	460b      	mov	r3, r1
 8002cf0:	3101      	adds	r1, #1
 8002cf2:	45b9      	cmp	r9, r7
 8002cf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cf8:	54e5      	strb	r5, [r4, r3]
 8002cfa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002cfe:	f43f af01 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8002d02:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d06:	29ff      	cmp	r1, #255	; 0xff
 8002d08:	d1f1      	bne.n	8002cee <d_print_comp_inner+0x2fa>
 8002d0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002d18:	4798      	blx	r3
 8002d1a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002d1e:	2101      	movs	r1, #1
 8002d20:	3301      	adds	r3, #1
 8002d22:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002d26:	2300      	movs	r3, #0
 8002d28:	e7e3      	b.n	8002cf2 <d_print_comp_inner+0x2fe>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8002d30:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
 8002d34:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8002d38:	f1b9 0f00 	cmp.w	r9, #0
 8002d3c:	f43f aebd 	beq.w	8002aba <d_print_comp_inner+0xc6>
 8002d40:	f10d 0808 	add.w	r8, sp, #8
 8002d44:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8002d48:	4642      	mov	r2, r8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	469a      	mov	sl, r3
 8002d4e:	e9c2 3900 	strd	r3, r9, [r2]
 8002d52:	e9c2 ac02 	strd	sl, ip, [r2, #8]
 8002d56:	f899 1000 	ldrb.w	r1, [r9]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	294d      	cmp	r1, #77	; 0x4d
 8002d5e:	f1a1 0b1c 	sub.w	fp, r1, #28
 8002d62:	f1a1 0e4f 	sub.w	lr, r1, #79	; 0x4f
 8002d66:	f100 0501 	add.w	r5, r0, #1
 8002d6a:	f001 81ef 	beq.w	800414c <d_print_comp_inner+0x1758>
 8002d6e:	f201 805a 	bhi.w	8003e26 <d_print_comp_inner+0x1432>
 8002d72:	f1bb 0f04 	cmp.w	fp, #4
 8002d76:	f241 81e9 	bls.w	800414c <d_print_comp_inner+0x1758>
 8002d7a:	2902      	cmp	r1, #2
 8002d7c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002d80:	d116      	bne.n	8002db0 <d_print_comp_inner+0x3bc>
 8002d82:	f8d9 9010 	ldr.w	r9, [r9, #16]
 8002d86:	f899 1000 	ldrb.w	r1, [r9]
 8002d8a:	2947      	cmp	r1, #71	; 0x47
 8002d8c:	f001 8618 	beq.w	80049c0 <d_print_comp_inner+0x1fcc>
 8002d90:	f04f 0a00 	mov.w	sl, #0
 8002d94:	eb08 1000 	add.w	r0, r8, r0, lsl #4
 8002d98:	294d      	cmp	r1, #77	; 0x4d
 8002d9a:	f1a1 034f 	sub.w	r3, r1, #79	; 0x4f
 8002d9e:	f1a1 021c 	sub.w	r2, r1, #28
 8002da2:	f001 8398 	beq.w	80044d6 <d_print_comp_inner+0x1ae2>
 8002da6:	f201 8393 	bhi.w	80044d0 <d_print_comp_inner+0x1adc>
 8002daa:	2a04      	cmp	r2, #4
 8002dac:	f241 8393 	bls.w	80044d6 <d_print_comp_inner+0x1ae2>
 8002db0:	2904      	cmp	r1, #4
 8002db2:	bf04      	itt	eq
 8002db4:	e9cd c900 	strdeq	ip, r9, [sp]
 8002db8:	f8c4 d110 	streq.w	sp, [r4, #272]	; 0x110
 8002dbc:	2111      	movs	r1, #17
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	6932      	ldr	r2, [r6, #16]
 8002dc2:	f001 fecf 	bl	8004b64 <d_print_comp>
 8002dc6:	f899 3000 	ldrb.w	r3, [r9]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d102      	bne.n	8002dd4 <d_print_comp_inner+0x3e0>
 8002dce:	9b00      	ldr	r3, [sp, #0]
 8002dd0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002dd4:	f04f 0920 	mov.w	r9, #32
 8002dd8:	eb08 1505 	add.w	r5, r8, r5, lsl #4
 8002ddc:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8002de0:	2e00      	cmp	r6, #0
 8002de2:	f001 819f 	beq.w	8004124 <d_print_comp_inner+0x1730>
 8002de6:	3d10      	subs	r5, #16
 8002de8:	4545      	cmp	r5, r8
 8002dea:	d1f7      	bne.n	8002ddc <d_print_comp_inner+0x3e8>
 8002dec:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
 8002df0:	e666      	b.n	8002ac0 <d_print_comp_inner+0xcc>
 8002df2:	6933      	ldr	r3, [r6, #16]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	2a3b      	cmp	r2, #59	; 0x3b
 8002df8:	f47f ae5f 	bne.w	8002aba <d_print_comp_inner+0xc6>
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b3c      	cmp	r3, #60	; 0x3c
 8002e02:	f47f ae5a 	bne.w	8002aba <d_print_comp_inner+0xc6>
 8002e06:	4632      	mov	r2, r6
 8002e08:	2111      	movs	r1, #17
 8002e0a:	f002 ffed 	bl	8005de8 <d_maybe_print_fold_expression>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f47f ae56 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8002e14:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
 8002e18:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
 8002e1c:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
 8002e20:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8002e24:	4941      	ldr	r1, [pc, #260]	; (8002f2c <d_print_comp_inner+0x538>)
 8002e26:	6810      	ldr	r0, [r2, #0]
 8002e28:	f003 f97c 	bl	8006124 <strcmp>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	f041 8609 	bne.w	8004a44 <d_print_comp_inner+0x2050>
 8002e32:	4632      	mov	r2, r6
 8002e34:	2111      	movs	r1, #17
 8002e36:	4620      	mov	r0, r4
 8002e38:	f002 ff68 	bl	8005d0c <d_print_subexpr>
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	2111      	movs	r1, #17
 8002e40:	4620      	mov	r0, r4
 8002e42:	f002 fd81 	bl	8005948 <d_print_expr_op>
 8002e46:	2111      	movs	r1, #17
 8002e48:	4620      	mov	r0, r4
 8002e4a:	463a      	mov	r2, r7
 8002e4c:	f002 ff5e 	bl	8005d0c <d_print_subexpr>
 8002e50:	4620      	mov	r0, r4
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <d_print_comp_inner+0x53c>)
 8002e54:	f7fd fbbc 	bl	80005d0 <d_append_string>
 8002e58:	462a      	mov	r2, r5
 8002e5a:	2111      	movs	r1, #17
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	b013      	add	sp, #76	; 0x4c
 8002e60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	f002 bf52 	b.w	8005d0c <d_print_subexpr>
 8002e68:	2111      	movs	r1, #17
 8002e6a:	68f2      	ldr	r2, [r6, #12]
 8002e6c:	f001 fe7a 	bl	8004b64 <d_print_comp>
 8002e70:	e730      	b.n	8002cd4 <d_print_comp_inner+0x2e0>
 8002e72:	4f30      	ldr	r7, [pc, #192]	; (8002f34 <d_print_comp_inner+0x540>)
 8002e74:	2563      	movs	r5, #99	; 0x63
 8002e76:	f04f 0800 	mov.w	r8, #0
 8002e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e7e:	f107 0917 	add.w	r9, r7, #23
 8002e82:	e00b      	b.n	8002e9c <d_print_comp_inner+0x4a8>
 8002e84:	460b      	mov	r3, r1
 8002e86:	3101      	adds	r1, #1
 8002e88:	45b9      	cmp	r9, r7
 8002e8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e8e:	54e5      	strb	r5, [r4, r3]
 8002e90:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002e94:	f000 87cf 	beq.w	8003e36 <d_print_comp_inner+0x1442>
 8002e98:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002e9c:	29ff      	cmp	r1, #255	; 0xff
 8002e9e:	d1f1      	bne.n	8002e84 <d_print_comp_inner+0x490>
 8002ea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eaa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002eae:	4798      	blx	r3
 8002eb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e7e3      	b.n	8002e88 <d_print_comp_inner+0x494>
 8002ec0:	4f1d      	ldr	r7, [pc, #116]	; (8002f38 <d_print_comp_inner+0x544>)
 8002ec2:	2556      	movs	r5, #86	; 0x56
 8002ec4:	f04f 0800 	mov.w	r8, #0
 8002ec8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ecc:	f107 0907 	add.w	r9, r7, #7
 8002ed0:	e00b      	b.n	8002eea <d_print_comp_inner+0x4f6>
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	3101      	adds	r1, #1
 8002ed6:	45b9      	cmp	r9, r7
 8002ed8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002edc:	54e5      	strb	r5, [r4, r3]
 8002ede:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002ee2:	f43f ae0f 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8002ee6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002eea:	29ff      	cmp	r1, #255	; 0xff
 8002eec:	d1f1      	bne.n	8002ed2 <d_print_comp_inner+0x4de>
 8002eee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ef8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002efc:	4798      	blx	r3
 8002efe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f02:	2101      	movs	r1, #1
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e7e3      	b.n	8002ed6 <d_print_comp_inner+0x4e2>
 8002f0e:	4f0b      	ldr	r7, [pc, #44]	; (8002f3c <d_print_comp_inner+0x548>)
 8002f10:	2576      	movs	r5, #118	; 0x76
 8002f12:	f04f 0800 	mov.w	r8, #0
 8002f16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f1a:	f107 090a 	add.w	r9, r7, #10
 8002f1e:	e01b      	b.n	8002f58 <d_print_comp_inner+0x564>
 8002f20:	0800fb98 	.word	0x0800fb98
 8002f24:	0800f9f8 	.word	0x0800f9f8
 8002f28:	0800fa18 	.word	0x0800fa18
 8002f2c:	0800fbb8 	.word	0x0800fbb8
 8002f30:	0800fbbc 	.word	0x0800fbbc
 8002f34:	0800fa50 	.word	0x0800fa50
 8002f38:	0800fa44 	.word	0x0800fa44
 8002f3c:	0800fa38 	.word	0x0800fa38
 8002f40:	460b      	mov	r3, r1
 8002f42:	3101      	adds	r1, #1
 8002f44:	45b9      	cmp	r9, r7
 8002f46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f4a:	54e5      	strb	r5, [r4, r3]
 8002f4c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f50:	f43f add8 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8002f54:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002f58:	29ff      	cmp	r1, #255	; 0xff
 8002f5a:	d1f1      	bne.n	8002f40 <d_print_comp_inner+0x54c>
 8002f5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f60:	4620      	mov	r0, r4
 8002f62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f6a:	4798      	blx	r3
 8002f6c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f70:	2101      	movs	r1, #1
 8002f72:	3301      	adds	r3, #1
 8002f74:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e7e3      	b.n	8002f44 <d_print_comp_inner+0x550>
 8002f7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	f001 8363 	beq.w	800464c <d_print_comp_inner+0x1c58>
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	227e      	movs	r2, #126	; 0x7e
 8002f8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f8e:	4620      	mov	r0, r4
 8002f90:	54e2      	strb	r2, [r4, r3]
 8002f92:	2111      	movs	r1, #17
 8002f94:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8002f98:	e69e      	b.n	8002cd8 <d_print_comp_inner+0x2e4>
 8002f9a:	68f2      	ldr	r2, [r6, #12]
 8002f9c:	b1ca      	cbz	r2, 8002fd2 <d_print_comp_inner+0x5de>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	9102      	str	r1, [sp, #8]
 8002fa8:	a902      	add	r1, sp, #8
 8002faa:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
 8002fae:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
 8002fb2:	9603      	str	r6, [sp, #12]
 8002fb4:	9105      	str	r1, [sp, #20]
 8002fb6:	2111      	movs	r1, #17
 8002fb8:	f001 fdd4 	bl	8004b64 <d_print_comp>
 8002fbc:	9a02      	ldr	r2, [sp, #8]
 8002fbe:	9b04      	ldr	r3, [sp, #16]
 8002fc0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f ad7b 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8002fca:	2120      	movs	r1, #32
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7fd fa79 	bl	80004c4 <d_append_char>
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	2111      	movs	r1, #17
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8002fdc:	b013      	add	sp, #76	; 0x4c
 8002fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe2:	f002 b90f 	b.w	8005204 <d_print_function_type>
 8002fe6:	4fc9      	ldr	r7, [pc, #804]	; (800330c <d_print_comp_inner+0x918>)
 8002fe8:	2567      	movs	r5, #103	; 0x67
 8002fea:	f04f 0800 	mov.w	r8, #0
 8002fee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ff2:	f107 0912 	add.w	r9, r7, #18
 8002ff6:	e00b      	b.n	8003010 <d_print_comp_inner+0x61c>
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	3101      	adds	r1, #1
 8002ffc:	454f      	cmp	r7, r9
 8002ffe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003002:	54e5      	strb	r5, [r4, r3]
 8003004:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003008:	f43f ad7c 	beq.w	8002b04 <d_print_comp_inner+0x110>
 800300c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003010:	29ff      	cmp	r1, #255	; 0xff
 8003012:	d1f1      	bne.n	8002ff8 <d_print_comp_inner+0x604>
 8003014:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003018:	4620      	mov	r0, r4
 800301a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800301e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003022:	4798      	blx	r3
 8003024:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003028:	2101      	movs	r1, #1
 800302a:	3301      	adds	r3, #1
 800302c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003030:	2300      	movs	r3, #0
 8003032:	e7e3      	b.n	8002ffc <d_print_comp_inner+0x608>
 8003034:	4fb6      	ldr	r7, [pc, #728]	; (8003310 <d_print_comp_inner+0x91c>)
 8003036:	256a      	movs	r5, #106	; 0x6a
 8003038:	f04f 0800 	mov.w	r8, #0
 800303c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003040:	f107 090e 	add.w	r9, r7, #14
 8003044:	e00b      	b.n	800305e <d_print_comp_inner+0x66a>
 8003046:	460b      	mov	r3, r1
 8003048:	3101      	adds	r1, #1
 800304a:	45b9      	cmp	r9, r7
 800304c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003050:	54e5      	strb	r5, [r4, r3]
 8003052:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003056:	f43f ad55 	beq.w	8002b04 <d_print_comp_inner+0x110>
 800305a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800305e:	29ff      	cmp	r1, #255	; 0xff
 8003060:	d1f1      	bne.n	8003046 <d_print_comp_inner+0x652>
 8003062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003066:	4620      	mov	r0, r4
 8003068:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800306c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003070:	4798      	blx	r3
 8003072:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003076:	2101      	movs	r1, #1
 8003078:	3301      	adds	r3, #1
 800307a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800307e:	2300      	movs	r3, #0
 8003080:	e7e3      	b.n	800304a <d_print_comp_inner+0x656>
 8003082:	4fa4      	ldr	r7, [pc, #656]	; (8003314 <d_print_comp_inner+0x920>)
 8003084:	2563      	movs	r5, #99	; 0x63
 8003086:	f04f 0800 	mov.w	r8, #0
 800308a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800308e:	f107 0919 	add.w	r9, r7, #25
 8003092:	e00b      	b.n	80030ac <d_print_comp_inner+0x6b8>
 8003094:	460b      	mov	r3, r1
 8003096:	3101      	adds	r1, #1
 8003098:	454f      	cmp	r7, r9
 800309a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800309e:	54e5      	strb	r5, [r4, r3]
 80030a0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80030a4:	f43f ad2e 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80030a8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80030ac:	29ff      	cmp	r1, #255	; 0xff
 80030ae:	d1f1      	bne.n	8003094 <d_print_comp_inner+0x6a0>
 80030b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030b4:	4620      	mov	r0, r4
 80030b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80030be:	4798      	blx	r3
 80030c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80030c4:	2101      	movs	r1, #1
 80030c6:	3301      	adds	r3, #1
 80030c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80030cc:	2300      	movs	r3, #0
 80030ce:	e7e3      	b.n	8003098 <d_print_comp_inner+0x6a4>
 80030d0:	4f91      	ldr	r7, [pc, #580]	; (8003318 <d_print_comp_inner+0x924>)
 80030d2:	2111      	movs	r1, #17
 80030d4:	68f2      	ldr	r2, [r6, #12]
 80030d6:	f001 fd45 	bl	8004b64 <d_print_comp>
 80030da:	255b      	movs	r5, #91	; 0x5b
 80030dc:	f04f 0800 	mov.w	r8, #0
 80030e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030e4:	f107 0904 	add.w	r9, r7, #4
 80030e8:	e00b      	b.n	8003102 <d_print_comp_inner+0x70e>
 80030ea:	460b      	mov	r3, r1
 80030ec:	3101      	adds	r1, #1
 80030ee:	45b9      	cmp	r9, r7
 80030f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030f4:	54e5      	strb	r5, [r4, r3]
 80030f6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80030fa:	f000 8681 	beq.w	8003e00 <d_print_comp_inner+0x140c>
 80030fe:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003102:	29ff      	cmp	r1, #255	; 0xff
 8003104:	d1f1      	bne.n	80030ea <d_print_comp_inner+0x6f6>
 8003106:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800310a:	4620      	mov	r0, r4
 800310c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003110:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003114:	4798      	blx	r3
 8003116:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800311a:	2101      	movs	r1, #1
 800311c:	3301      	adds	r3, #1
 800311e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003122:	2300      	movs	r3, #0
 8003124:	e7e3      	b.n	80030ee <d_print_comp_inner+0x6fa>
 8003126:	68f1      	ldr	r1, [r6, #12]
 8003128:	f7fd fa0a 	bl	8000540 <d_find_pack>
 800312c:	f04f 0800 	mov.w	r8, #0
 8003130:	b910      	cbnz	r0, 8003138 <d_print_comp_inner+0x744>
 8003132:	f001 bc10 	b.w	8004956 <d_print_comp_inner+0x1f62>
 8003136:	4690      	mov	r8, r2
 8003138:	7803      	ldrb	r3, [r0, #0]
 800313a:	f108 0201 	add.w	r2, r8, #1
 800313e:	2b2f      	cmp	r3, #47	; 0x2f
 8003140:	f041 8012 	bne.w	8004168 <d_print_comp_inner+0x1774>
 8003144:	68c3      	ldr	r3, [r0, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f001 800e 	beq.w	8004168 <d_print_comp_inner+0x1774>
 800314c:	6900      	ldr	r0, [r0, #16]
 800314e:	2800      	cmp	r0, #0
 8003150:	d1f1      	bne.n	8003136 <d_print_comp_inner+0x742>
 8003152:	46c2      	mov	sl, r8
 8003154:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8003158:	4690      	mov	r8, r2
 800315a:	e003      	b.n	8003164 <d_print_comp_inner+0x770>
 800315c:	3501      	adds	r5, #1
 800315e:	4545      	cmp	r5, r8
 8003160:	f6bf acae 	bge.w	8002ac0 <d_print_comp_inner+0xcc>
 8003164:	464a      	mov	r2, r9
 8003166:	2111      	movs	r1, #17
 8003168:	4620      	mov	r0, r4
 800316a:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800316e:	f001 fcf9 	bl	8004b64 <d_print_comp>
 8003172:	45aa      	cmp	sl, r5
 8003174:	ddf2      	ble.n	800315c <d_print_comp_inner+0x768>
 8003176:	4e69      	ldr	r6, [pc, #420]	; (800331c <d_print_comp_inner+0x928>)
 8003178:	272c      	movs	r7, #44	; 0x2c
 800317a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800317e:	f106 0b01 	add.w	fp, r6, #1
 8003182:	e00a      	b.n	800319a <d_print_comp_inner+0x7a6>
 8003184:	460b      	mov	r3, r1
 8003186:	3101      	adds	r1, #1
 8003188:	45b3      	cmp	fp, r6
 800318a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800318e:	54e7      	strb	r7, [r4, r3]
 8003190:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003194:	d0e2      	beq.n	800315c <d_print_comp_inner+0x768>
 8003196:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800319a:	29ff      	cmp	r1, #255	; 0xff
 800319c:	d1f2      	bne.n	8003184 <d_print_comp_inner+0x790>
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031a6:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80031aa:	4620      	mov	r0, r4
 80031ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031b0:	4798      	blx	r3
 80031b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80031b6:	2101      	movs	r1, #1
 80031b8:	3301      	adds	r3, #1
 80031ba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80031be:	2300      	movs	r3, #0
 80031c0:	e7e2      	b.n	8003188 <d_print_comp_inner+0x794>
 80031c2:	4f57      	ldr	r7, [pc, #348]	; (8003320 <d_print_comp_inner+0x92c>)
 80031c4:	256e      	movs	r5, #110	; 0x6e
 80031c6:	f04f 0800 	mov.w	r8, #0
 80031ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80031ce:	f107 0919 	add.w	r9, r7, #25
 80031d2:	e00b      	b.n	80031ec <d_print_comp_inner+0x7f8>
 80031d4:	460b      	mov	r3, r1
 80031d6:	3101      	adds	r1, #1
 80031d8:	45b9      	cmp	r9, r7
 80031da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80031de:	54e5      	strb	r5, [r4, r3]
 80031e0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80031e4:	f43f ac8e 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80031e8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80031ec:	29ff      	cmp	r1, #255	; 0xff
 80031ee:	d1f1      	bne.n	80031d4 <d_print_comp_inner+0x7e0>
 80031f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031f4:	4620      	mov	r0, r4
 80031f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80031fe:	4798      	blx	r3
 8003200:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003204:	2101      	movs	r1, #1
 8003206:	3301      	adds	r3, #1
 8003208:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800320c:	2300      	movs	r3, #0
 800320e:	e7e3      	b.n	80031d8 <d_print_comp_inner+0x7e4>
 8003210:	4f44      	ldr	r7, [pc, #272]	; (8003324 <d_print_comp_inner+0x930>)
 8003212:	2574      	movs	r5, #116	; 0x74
 8003214:	f04f 0800 	mov.w	r8, #0
 8003218:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800321c:	f107 0915 	add.w	r9, r7, #21
 8003220:	e00b      	b.n	800323a <d_print_comp_inner+0x846>
 8003222:	460b      	mov	r3, r1
 8003224:	3101      	adds	r1, #1
 8003226:	45b9      	cmp	r9, r7
 8003228:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800322c:	54e5      	strb	r5, [r4, r3]
 800322e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003232:	f43f ac67 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003236:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800323a:	29ff      	cmp	r1, #255	; 0xff
 800323c:	d1f1      	bne.n	8003222 <d_print_comp_inner+0x82e>
 800323e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003242:	4620      	mov	r0, r4
 8003244:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003248:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800324c:	4798      	blx	r3
 800324e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003252:	2101      	movs	r1, #1
 8003254:	3301      	adds	r3, #1
 8003256:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800325a:	2300      	movs	r3, #0
 800325c:	e7e3      	b.n	8003226 <d_print_comp_inner+0x832>
 800325e:	4f32      	ldr	r7, [pc, #200]	; (8003328 <d_print_comp_inner+0x934>)
 8003260:	257b      	movs	r5, #123	; 0x7b
 8003262:	f04f 0800 	mov.w	r8, #0
 8003266:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800326a:	f107 090d 	add.w	r9, r7, #13
 800326e:	e00b      	b.n	8003288 <d_print_comp_inner+0x894>
 8003270:	460b      	mov	r3, r1
 8003272:	3101      	adds	r1, #1
 8003274:	454f      	cmp	r7, r9
 8003276:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800327a:	54e5      	strb	r5, [r4, r3]
 800327c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003280:	f000 8631 	beq.w	8003ee6 <d_print_comp_inner+0x14f2>
 8003284:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003288:	29ff      	cmp	r1, #255	; 0xff
 800328a:	d1f1      	bne.n	8003270 <d_print_comp_inner+0x87c>
 800328c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003290:	4620      	mov	r0, r4
 8003292:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003296:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800329a:	4798      	blx	r3
 800329c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80032a0:	2101      	movs	r1, #1
 80032a2:	3301      	adds	r3, #1
 80032a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80032a8:	2300      	movs	r3, #0
 80032aa:	e7e3      	b.n	8003274 <d_print_comp_inner+0x880>
 80032ac:	4f1f      	ldr	r7, [pc, #124]	; (800332c <d_print_comp_inner+0x938>)
 80032ae:	2576      	movs	r5, #118	; 0x76
 80032b0:	f04f 0800 	mov.w	r8, #0
 80032b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032b8:	f107 0910 	add.w	r9, r7, #16
 80032bc:	e00b      	b.n	80032d6 <d_print_comp_inner+0x8e2>
 80032be:	460b      	mov	r3, r1
 80032c0:	3101      	adds	r1, #1
 80032c2:	45b9      	cmp	r9, r7
 80032c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032c8:	54e5      	strb	r5, [r4, r3]
 80032ca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80032ce:	f43f ac19 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80032d2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80032d6:	29ff      	cmp	r1, #255	; 0xff
 80032d8:	d1f1      	bne.n	80032be <d_print_comp_inner+0x8ca>
 80032da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032de:	4620      	mov	r0, r4
 80032e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032e8:	4798      	blx	r3
 80032ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80032ee:	2101      	movs	r1, #1
 80032f0:	3301      	adds	r3, #1
 80032f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80032f6:	2300      	movs	r3, #0
 80032f8:	e7e3      	b.n	80032c2 <d_print_comp_inner+0x8ce>
 80032fa:	4f0d      	ldr	r7, [pc, #52]	; (8003330 <d_print_comp_inner+0x93c>)
 80032fc:	256e      	movs	r5, #110	; 0x6e
 80032fe:	f04f 0800 	mov.w	r8, #0
 8003302:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003306:	f107 0914 	add.w	r9, r7, #20
 800330a:	e01f      	b.n	800334c <d_print_comp_inner+0x958>
 800330c:	0800faf0 	.word	0x0800faf0
 8003310:	0800fae0 	.word	0x0800fae0
 8003314:	0800fac4 	.word	0x0800fac4
 8003318:	0800f9f0 	.word	0x0800f9f0
 800331c:	0800fb98 	.word	0x0800fb98
 8003320:	0800fb64 	.word	0x0800fb64
 8003324:	0800fb68 	.word	0x0800fb68
 8003328:	0800fc64 	.word	0x0800fc64
 800332c:	0800fab0 	.word	0x0800fab0
 8003330:	0800faac 	.word	0x0800faac
 8003334:	460b      	mov	r3, r1
 8003336:	3101      	adds	r1, #1
 8003338:	454f      	cmp	r7, r9
 800333a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800333e:	54e5      	strb	r5, [r4, r3]
 8003340:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003344:	f43f abde 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003348:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800334c:	29ff      	cmp	r1, #255	; 0xff
 800334e:	d1f1      	bne.n	8003334 <d_print_comp_inner+0x940>
 8003350:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003354:	4620      	mov	r0, r4
 8003356:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800335a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800335e:	4798      	blx	r3
 8003360:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003364:	2101      	movs	r1, #1
 8003366:	3301      	adds	r3, #1
 8003368:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800336c:	2300      	movs	r3, #0
 800336e:	e7e3      	b.n	8003338 <d_print_comp_inner+0x944>
 8003370:	4f9a      	ldr	r7, [pc, #616]	; (80035dc <d_print_comp_inner+0xbe8>)
 8003372:	2574      	movs	r5, #116	; 0x74
 8003374:	f04f 0800 	mov.w	r8, #0
 8003378:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800337c:	f107 090f 	add.w	r9, r7, #15
 8003380:	e00b      	b.n	800339a <d_print_comp_inner+0x9a6>
 8003382:	460b      	mov	r3, r1
 8003384:	3101      	adds	r1, #1
 8003386:	45b9      	cmp	r9, r7
 8003388:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800338c:	54e5      	strb	r5, [r4, r3]
 800338e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003392:	f43f abb7 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003396:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800339a:	29ff      	cmp	r1, #255	; 0xff
 800339c:	d1f1      	bne.n	8003382 <d_print_comp_inner+0x98e>
 800339e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033a2:	4620      	mov	r0, r4
 80033a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033ac:	4798      	blx	r3
 80033ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80033b2:	2101      	movs	r1, #1
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80033ba:	2300      	movs	r3, #0
 80033bc:	e7e3      	b.n	8003386 <d_print_comp_inner+0x992>
 80033be:	4f88      	ldr	r7, [pc, #544]	; (80035e0 <d_print_comp_inner+0xbec>)
 80033c0:	2574      	movs	r5, #116	; 0x74
 80033c2:	f04f 0800 	mov.w	r8, #0
 80033c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033ca:	f107 0911 	add.w	r9, r7, #17
 80033ce:	e00b      	b.n	80033e8 <d_print_comp_inner+0x9f4>
 80033d0:	460b      	mov	r3, r1
 80033d2:	3101      	adds	r1, #1
 80033d4:	45b9      	cmp	r9, r7
 80033d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033da:	54e5      	strb	r5, [r4, r3]
 80033dc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80033e0:	f43f ab90 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80033e4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80033e8:	29ff      	cmp	r1, #255	; 0xff
 80033ea:	d1f1      	bne.n	80033d0 <d_print_comp_inner+0x9dc>
 80033ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033f0:	4620      	mov	r0, r4
 80033f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033fa:	4798      	blx	r3
 80033fc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003400:	2101      	movs	r1, #1
 8003402:	3301      	adds	r3, #1
 8003404:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003408:	2300      	movs	r3, #0
 800340a:	e7e3      	b.n	80033d4 <d_print_comp_inner+0x9e0>
 800340c:	4f75      	ldr	r7, [pc, #468]	; (80035e4 <d_print_comp_inner+0xbf0>)
 800340e:	2574      	movs	r5, #116	; 0x74
 8003410:	f04f 0800 	mov.w	r8, #0
 8003414:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003418:	f107 090c 	add.w	r9, r7, #12
 800341c:	e00b      	b.n	8003436 <d_print_comp_inner+0xa42>
 800341e:	460b      	mov	r3, r1
 8003420:	3101      	adds	r1, #1
 8003422:	45b9      	cmp	r9, r7
 8003424:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003428:	54e5      	strb	r5, [r4, r3]
 800342a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800342e:	f43f ab69 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003432:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003436:	29ff      	cmp	r1, #255	; 0xff
 8003438:	d1f1      	bne.n	800341e <d_print_comp_inner+0xa2a>
 800343a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800343e:	4620      	mov	r0, r4
 8003440:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003444:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003448:	4798      	blx	r3
 800344a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800344e:	2101      	movs	r1, #1
 8003450:	3301      	adds	r3, #1
 8003452:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003456:	2300      	movs	r3, #0
 8003458:	e7e3      	b.n	8003422 <d_print_comp_inner+0xa2e>
 800345a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800345e:	7b35      	ldrb	r5, [r6, #12]
 8003460:	29ff      	cmp	r1, #255	; 0xff
 8003462:	f001 8087 	beq.w	8004574 <d_print_comp_inner+0x1b80>
 8003466:	1c4b      	adds	r3, r1, #1
 8003468:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800346c:	5465      	strb	r5, [r4, r1]
 800346e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003472:	f7ff bb25 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8003476:	4f5c      	ldr	r7, [pc, #368]	; (80035e8 <d_print_comp_inner+0xbf4>)
 8003478:	2111      	movs	r1, #17
 800347a:	68f2      	ldr	r2, [r6, #12]
 800347c:	f001 fb72 	bl	8004b64 <d_print_comp>
 8003480:	2520      	movs	r5, #32
 8003482:	f04f 0800 	mov.w	r8, #0
 8003486:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800348a:	f107 0907 	add.w	r9, r7, #7
 800348e:	e00b      	b.n	80034a8 <d_print_comp_inner+0xab4>
 8003490:	460b      	mov	r3, r1
 8003492:	3101      	adds	r1, #1
 8003494:	45b9      	cmp	r9, r7
 8003496:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800349a:	54e5      	strb	r5, [r4, r3]
 800349c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80034a0:	f000 84ae 	beq.w	8003e00 <d_print_comp_inner+0x140c>
 80034a4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80034a8:	29ff      	cmp	r1, #255	; 0xff
 80034aa:	d1f1      	bne.n	8003490 <d_print_comp_inner+0xa9c>
 80034ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034b0:	4620      	mov	r0, r4
 80034b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80034ba:	4798      	blx	r3
 80034bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80034c0:	2101      	movs	r1, #1
 80034c2:	3301      	adds	r3, #1
 80034c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80034c8:	2300      	movs	r3, #0
 80034ca:	e7e3      	b.n	8003494 <d_print_comp_inner+0xaa0>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80034d8:	f10d 0808 	add.w	r8, sp, #8
 80034dc:	46e1      	mov	r9, ip
 80034de:	f8cd c008 	str.w	ip, [sp, #8]
 80034e2:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
 80034e6:	9603      	str	r6, [sp, #12]
 80034e8:	9305      	str	r3, [sp, #20]
 80034ea:	f1bc 0f00 	cmp.w	ip, #0
 80034ee:	f001 82e6 	beq.w	8004abe <d_print_comp_inner+0x20ca>
 80034f2:	2701      	movs	r7, #1
 80034f4:	4665      	mov	r5, ip
 80034f6:	46be      	mov	lr, r7
 80034f8:	46b4      	mov	ip, r6
 80034fa:	4646      	mov	r6, r8
 80034fc:	e018      	b.n	8003530 <d_print_comp_inner+0xb3c>
 80034fe:	68ab      	ldr	r3, [r5, #8]
 8003500:	b9a3      	cbnz	r3, 800352c <d_print_comp_inner+0xb38>
 8003502:	2f03      	cmp	r7, #3
 8003504:	f63f aad9 	bhi.w	8002aba <d_print_comp_inner+0xc6>
 8003508:	ab12      	add	r3, sp, #72	; 0x48
 800350a:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
 800350e:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8003512:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003516:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800351a:	f84b 6c40 	str.w	r6, [fp, #-64]
 800351e:	eb08 1607 	add.w	r6, r8, r7, lsl #4
 8003522:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
 8003526:	3701      	adds	r7, #1
 8003528:	f8c5 e008 	str.w	lr, [r5, #8]
 800352c:	682d      	ldr	r5, [r5, #0]
 800352e:	b125      	cbz	r5, 800353a <d_print_comp_inner+0xb46>
 8003530:	686b      	ldr	r3, [r5, #4]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	3b19      	subs	r3, #25
 8003536:	2b02      	cmp	r3, #2
 8003538:	d9e1      	bls.n	80034fe <d_print_comp_inner+0xb0a>
 800353a:	2111      	movs	r1, #17
 800353c:	4620      	mov	r0, r4
 800353e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8003542:	4666      	mov	r6, ip
 8003544:	f001 fb0e 	bl	8004b64 <d_print_comp>
 8003548:	9b04      	ldr	r3, [sp, #16]
 800354a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800354e:	2b00      	cmp	r3, #0
 8003550:	f47f aab6 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8003554:	2f01      	cmp	r7, #1
 8003556:	d00c      	beq.n	8003572 <d_print_comp_inner+0xb7e>
 8003558:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 800355c:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 8003560:	2111      	movs	r1, #17
 8003562:	4620      	mov	r0, r4
 8003564:	3f01      	subs	r7, #1
 8003566:	f001 fb2b 	bl	8004bc0 <d_print_mod>
 800356a:	2f01      	cmp	r7, #1
 800356c:	f1a8 0810 	sub.w	r8, r8, #16
 8003570:	d1f4      	bne.n	800355c <d_print_comp_inner+0xb68>
 8003572:	4632      	mov	r2, r6
 8003574:	2111      	movs	r1, #17
 8003576:	4620      	mov	r0, r4
 8003578:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800357c:	f002 f858 	bl	8005630 <d_print_array_type>
 8003580:	f7ff ba9e 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8003584:	e9d6 5303 	ldrd	r5, r3, [r6, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f43f aa99 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 800358e:	442b      	add	r3, r5
 8003590:	f04f 0800 	mov.w	r8, #0
 8003594:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003598:	3d01      	subs	r5, #1
 800359a:	1e5f      	subs	r7, r3, #1
 800359c:	e009      	b.n	80035b2 <d_print_comp_inner+0xbbe>
 800359e:	460b      	mov	r3, r1
 80035a0:	3101      	adds	r1, #1
 80035a2:	42af      	cmp	r7, r5
 80035a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035a8:	54e6      	strb	r6, [r4, r3]
 80035aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80035ae:	f43f aa87 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 80035b2:	29ff      	cmp	r1, #255	; 0xff
 80035b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80035b8:	d1f1      	bne.n	800359e <d_print_comp_inner+0xbaa>
 80035ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035c2:	4620      	mov	r0, r4
 80035c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80035c8:	4798      	blx	r3
 80035ca:	2101      	movs	r1, #1
 80035cc:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80035d0:	2300      	movs	r3, #0
 80035d2:	440a      	add	r2, r1
 80035d4:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80035d8:	e7e3      	b.n	80035a2 <d_print_comp_inner+0xbae>
 80035da:	bf00      	nop
 80035dc:	0800fa98 	.word	0x0800fa98
 80035e0:	0800fa84 	.word	0x0800fa84
 80035e4:	0800fa74 	.word	0x0800fa74
 80035e8:	0800fc74 	.word	0x0800fc74
 80035ec:	6933      	ldr	r3, [r6, #16]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b39      	cmp	r3, #57	; 0x39
 80035f2:	f47f aa62 	bne.w	8002aba <d_print_comp_inner+0xc6>
 80035f6:	68f2      	ldr	r2, [r6, #12]
 80035f8:	68d3      	ldr	r3, [r2, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	7859      	ldrb	r1, [r3, #1]
 80035fe:	2963      	cmp	r1, #99	; 0x63
 8003600:	f001 8103 	beq.w	800480a <d_print_comp_inner+0x1e16>
 8003604:	4632      	mov	r2, r6
 8003606:	2111      	movs	r1, #17
 8003608:	4620      	mov	r0, r4
 800360a:	f002 fbed 	bl	8005de8 <d_maybe_print_fold_expression>
 800360e:	2800      	cmp	r0, #0
 8003610:	f47f aa56 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8003614:	68f3      	ldr	r3, [r6, #12]
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	2a32      	cmp	r2, #50	; 0x32
 800361a:	f001 81b2 	beq.w	8004982 <d_print_comp_inner+0x1f8e>
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	2a63      	cmp	r2, #99	; 0x63
 8003626:	f041 80ed 	bne.w	8004804 <d_print_comp_inner+0x1e10>
 800362a:	785a      	ldrb	r2, [r3, #1]
 800362c:	2a6c      	cmp	r2, #108	; 0x6c
 800362e:	f041 80e9 	bne.w	8004804 <d_print_comp_inner+0x1e10>
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f041 80e5 	bne.w	8004804 <d_print_comp_inner+0x1e10>
 800363a:	6933      	ldr	r3, [r6, #16]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	7811      	ldrb	r1, [r2, #0]
 8003640:	2903      	cmp	r1, #3
 8003642:	f001 8223 	beq.w	8004a8c <d_print_comp_inner+0x2098>
 8003646:	2111      	movs	r1, #17
 8003648:	4620      	mov	r0, r4
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	f002 fb5e 	bl	8005d0c <d_print_subexpr>
 8003650:	68f2      	ldr	r2, [r6, #12]
 8003652:	68d3      	ldr	r3, [r2, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	2969      	cmp	r1, #105	; 0x69
 800365a:	f041 810e 	bne.w	800487a <d_print_comp_inner+0x1e86>
 800365e:	7858      	ldrb	r0, [r3, #1]
 8003660:	2878      	cmp	r0, #120	; 0x78
 8003662:	f041 810a 	bne.w	800487a <d_print_comp_inner+0x1e86>
 8003666:	7898      	ldrb	r0, [r3, #2]
 8003668:	2800      	cmp	r0, #0
 800366a:	f041 8106 	bne.w	800487a <d_print_comp_inner+0x1e86>
 800366e:	4620      	mov	r0, r4
 8003670:	215b      	movs	r1, #91	; 0x5b
 8003672:	f7fc ff27 	bl	80004c4 <d_append_char>
 8003676:	6933      	ldr	r3, [r6, #16]
 8003678:	4620      	mov	r0, r4
 800367a:	2111      	movs	r1, #17
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	f001 fa71 	bl	8004b64 <d_print_comp>
 8003682:	215d      	movs	r1, #93	; 0x5d
 8003684:	4620      	mov	r0, r4
 8003686:	f7fc ff1d 	bl	80004c4 <d_append_char>
 800368a:	68f3      	ldr	r3, [r6, #12]
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	2a32      	cmp	r2, #50	; 0x32
 8003690:	f47f aa16 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	2a01      	cmp	r2, #1
 800369a:	f47f aa11 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b3e      	cmp	r3, #62	; 0x3e
 80036a4:	f47f aa0c 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 80036a8:	2129      	movs	r1, #41	; 0x29
 80036aa:	4620      	mov	r0, r4
 80036ac:	b013      	add	sp, #76	; 0x4c
 80036ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b2:	f7fc bf07 	b.w	80004c4 <d_append_char>
 80036b6:	68f7      	ldr	r7, [r6, #12]
 80036b8:	2f00      	cmp	r7, #0
 80036ba:	f040 85b2 	bne.w	8004222 <d_print_comp_inner+0x182e>
 80036be:	4dcd      	ldr	r5, [pc, #820]	; (80039f4 <d_print_comp_inner+0x1000>)
 80036c0:	2674      	movs	r6, #116	; 0x74
 80036c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036c6:	f105 0803 	add.w	r8, r5, #3
 80036ca:	e00b      	b.n	80036e4 <d_print_comp_inner+0xcf0>
 80036cc:	460b      	mov	r3, r1
 80036ce:	3101      	adds	r1, #1
 80036d0:	45a8      	cmp	r8, r5
 80036d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80036d6:	54e6      	strb	r6, [r4, r3]
 80036d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80036dc:	f43f a9f0 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 80036e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80036e4:	29ff      	cmp	r1, #255	; 0xff
 80036e6:	d1f1      	bne.n	80036cc <d_print_comp_inner+0xcd8>
 80036e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036ec:	4620      	mov	r0, r4
 80036ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036f2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80036f6:	4798      	blx	r3
 80036f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80036fc:	2101      	movs	r1, #1
 80036fe:	3301      	adds	r3, #1
 8003700:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003704:	2300      	movs	r3, #0
 8003706:	e7e3      	b.n	80036d0 <d_print_comp_inner+0xcdc>
 8003708:	4fbb      	ldr	r7, [pc, #748]	; (80039f8 <d_print_comp_inner+0x1004>)
 800370a:	2568      	movs	r5, #104	; 0x68
 800370c:	f04f 0800 	mov.w	r8, #0
 8003710:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003714:	f107 0910 	add.w	r9, r7, #16
 8003718:	e00b      	b.n	8003732 <d_print_comp_inner+0xd3e>
 800371a:	460b      	mov	r3, r1
 800371c:	3101      	adds	r1, #1
 800371e:	45b9      	cmp	r9, r7
 8003720:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003724:	54e5      	strb	r5, [r4, r3]
 8003726:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800372a:	f43f a9eb 	beq.w	8002b04 <d_print_comp_inner+0x110>
 800372e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003732:	29ff      	cmp	r1, #255	; 0xff
 8003734:	d1f1      	bne.n	800371a <d_print_comp_inner+0xd26>
 8003736:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800373a:	4620      	mov	r0, r4
 800373c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003740:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003744:	4798      	blx	r3
 8003746:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800374a:	2101      	movs	r1, #1
 800374c:	3301      	adds	r3, #1
 800374e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003752:	2300      	movs	r3, #0
 8003754:	e7e3      	b.n	800371e <d_print_comp_inner+0xd2a>
 8003756:	4fa9      	ldr	r7, [pc, #676]	; (80039fc <d_print_comp_inner+0x1008>)
 8003758:	2572      	movs	r5, #114	; 0x72
 800375a:	f04f 0800 	mov.w	r8, #0
 800375e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003762:	f107 0914 	add.w	r9, r7, #20
 8003766:	e00b      	b.n	8003780 <d_print_comp_inner+0xd8c>
 8003768:	460b      	mov	r3, r1
 800376a:	3101      	adds	r1, #1
 800376c:	45b9      	cmp	r9, r7
 800376e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003772:	54e5      	strb	r5, [r4, r3]
 8003774:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003778:	f000 8389 	beq.w	8003e8e <d_print_comp_inner+0x149a>
 800377c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003780:	29ff      	cmp	r1, #255	; 0xff
 8003782:	d1f1      	bne.n	8003768 <d_print_comp_inner+0xd74>
 8003784:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003788:	4620      	mov	r0, r4
 800378a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800378e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003792:	4798      	blx	r3
 8003794:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003798:	2101      	movs	r1, #1
 800379a:	3301      	adds	r3, #1
 800379c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80037a0:	2300      	movs	r3, #0
 80037a2:	e7e3      	b.n	800376c <d_print_comp_inner+0xd78>
 80037a4:	4f96      	ldr	r7, [pc, #600]	; (8003a00 <d_print_comp_inner+0x100c>)
 80037a6:	2554      	movs	r5, #84	; 0x54
 80037a8:	f04f 0800 	mov.w	r8, #0
 80037ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80037b0:	f107 0918 	add.w	r9, r7, #24
 80037b4:	e00b      	b.n	80037ce <d_print_comp_inner+0xdda>
 80037b6:	460b      	mov	r3, r1
 80037b8:	3101      	adds	r1, #1
 80037ba:	45b9      	cmp	r9, r7
 80037bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80037c0:	54e5      	strb	r5, [r4, r3]
 80037c2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80037c6:	f43f a99d 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80037ca:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80037ce:	29ff      	cmp	r1, #255	; 0xff
 80037d0:	d1f1      	bne.n	80037b6 <d_print_comp_inner+0xdc2>
 80037d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80037d6:	4620      	mov	r0, r4
 80037d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80037dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80037e0:	4798      	blx	r3
 80037e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80037e6:	2101      	movs	r1, #1
 80037e8:	3301      	adds	r3, #1
 80037ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80037ee:	2300      	movs	r3, #0
 80037f0:	e7e3      	b.n	80037ba <d_print_comp_inner+0xdc6>
 80037f2:	4f84      	ldr	r7, [pc, #528]	; (8003a04 <d_print_comp_inner+0x1010>)
 80037f4:	2554      	movs	r5, #84	; 0x54
 80037f6:	f04f 0800 	mov.w	r8, #0
 80037fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80037fe:	f107 0915 	add.w	r9, r7, #21
 8003802:	e00b      	b.n	800381c <d_print_comp_inner+0xe28>
 8003804:	460b      	mov	r3, r1
 8003806:	3101      	adds	r1, #1
 8003808:	454f      	cmp	r7, r9
 800380a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800380e:	54e5      	strb	r5, [r4, r3]
 8003810:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003814:	f43f a976 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003818:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800381c:	29ff      	cmp	r1, #255	; 0xff
 800381e:	d1f1      	bne.n	8003804 <d_print_comp_inner+0xe10>
 8003820:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003824:	4620      	mov	r0, r4
 8003826:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800382a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800382e:	4798      	blx	r3
 8003830:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003834:	2101      	movs	r1, #1
 8003836:	3301      	adds	r3, #1
 8003838:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800383c:	2300      	movs	r3, #0
 800383e:	e7e3      	b.n	8003808 <d_print_comp_inner+0xe14>
 8003840:	2300      	movs	r3, #0
 8003842:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
 8003846:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 800384a:	68f2      	ldr	r2, [r6, #12]
 800384c:	2111      	movs	r1, #17
 800384e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003852:	f8c0 6148 	str.w	r6, [r0, #328]	; 0x148
 8003856:	f001 f985 	bl	8004b64 <d_print_comp>
 800385a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800385e:	2b3c      	cmp	r3, #60	; 0x3c
 8003860:	f000 872c 	beq.w	80046bc <d_print_comp_inner+0x1cc8>
 8003864:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003868:	29ff      	cmp	r1, #255	; 0xff
 800386a:	f000 8717 	beq.w	800469c <d_print_comp_inner+0x1ca8>
 800386e:	1c4b      	adds	r3, r1, #1
 8003870:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003874:	233c      	movs	r3, #60	; 0x3c
 8003876:	5463      	strb	r3, [r4, r1]
 8003878:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800387c:	2111      	movs	r1, #17
 800387e:	4620      	mov	r0, r4
 8003880:	6932      	ldr	r2, [r6, #16]
 8003882:	f001 f96f 	bl	8004b64 <d_print_comp>
 8003886:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800388a:	2b3e      	cmp	r3, #62	; 0x3e
 800388c:	f000 8700 	beq.w	8004690 <d_print_comp_inner+0x1c9c>
 8003890:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003894:	29ff      	cmp	r1, #255	; 0xff
 8003896:	f000 86eb 	beq.w	8004670 <d_print_comp_inner+0x1c7c>
 800389a:	1c4b      	adds	r3, r1, #1
 800389c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038a0:	233e      	movs	r3, #62	; 0x3e
 80038a2:	5463      	strb	r3, [r4, r1]
 80038a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80038a8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 80038ac:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
 80038b0:	f7ff b906 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 80038b4:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 8629 	bne.w	8004510 <d_print_comp_inner+0x1b1c>
 80038be:	68f2      	ldr	r2, [r6, #12]
 80038c0:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <d_print_comp_inner+0x1014>)
 80038c2:	68d1      	ldr	r1, [r2, #12]
 80038c4:	4299      	cmp	r1, r3
 80038c6:	f000 855d 	beq.w	8004384 <d_print_comp_inner+0x1990>
 80038ca:	2111      	movs	r1, #17
 80038cc:	4620      	mov	r0, r4
 80038ce:	f001 f949 	bl	8004b64 <d_print_comp>
 80038d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038d6:	2bff      	cmp	r3, #255	; 0xff
 80038d8:	f001 802b 	beq.w	8004932 <d_print_comp_inner+0x1f3e>
 80038dc:	2220      	movs	r2, #32
 80038de:	1c59      	adds	r1, r3, #1
 80038e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038e4:	54e2      	strb	r2, [r4, r3]
 80038e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80038ea:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
 80038ee:	f1b8 0f00 	cmp.w	r8, #0
 80038f2:	f040 8472 	bne.w	80041da <d_print_comp_inner+0x17e6>
 80038f6:	4e45      	ldr	r6, [pc, #276]	; (8003a0c <d_print_comp_inner+0x1018>)
 80038f8:	255f      	movs	r5, #95	; 0x5f
 80038fa:	1d77      	adds	r7, r6, #5
 80038fc:	e00b      	b.n	8003916 <d_print_comp_inner+0xf22>
 80038fe:	460b      	mov	r3, r1
 8003900:	3101      	adds	r1, #1
 8003902:	42b7      	cmp	r7, r6
 8003904:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003908:	54e5      	strb	r5, [r4, r3]
 800390a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800390e:	f43f a8d7 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003912:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003916:	29ff      	cmp	r1, #255	; 0xff
 8003918:	d1f1      	bne.n	80038fe <d_print_comp_inner+0xf0a>
 800391a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800391e:	4620      	mov	r0, r4
 8003920:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003924:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003928:	4798      	blx	r3
 800392a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800392e:	2101      	movs	r1, #1
 8003930:	3301      	adds	r3, #1
 8003932:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003936:	2300      	movs	r3, #0
 8003938:	e7e3      	b.n	8003902 <d_print_comp_inner+0xf0e>
 800393a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 84d4 	beq.w	80042ec <d_print_comp_inner+0x18f8>
 8003944:	4d32      	ldr	r5, [pc, #200]	; (8003a10 <d_print_comp_inner+0x101c>)
 8003946:	2761      	movs	r7, #97	; 0x61
 8003948:	f04f 0800 	mov.w	r8, #0
 800394c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003950:	f105 0904 	add.w	r9, r5, #4
 8003954:	e00b      	b.n	800396e <d_print_comp_inner+0xf7a>
 8003956:	460b      	mov	r3, r1
 8003958:	3101      	adds	r1, #1
 800395a:	45a9      	cmp	r9, r5
 800395c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003960:	54e7      	strb	r7, [r4, r3]
 8003962:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003966:	f000 84d9 	beq.w	800431c <d_print_comp_inner+0x1928>
 800396a:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 800396e:	29ff      	cmp	r1, #255	; 0xff
 8003970:	d1f1      	bne.n	8003956 <d_print_comp_inner+0xf62>
 8003972:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003976:	4620      	mov	r0, r4
 8003978:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800397c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003980:	4798      	blx	r3
 8003982:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003986:	2101      	movs	r1, #1
 8003988:	3301      	adds	r3, #1
 800398a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800398e:	2300      	movs	r3, #0
 8003990:	e7e3      	b.n	800395a <d_print_comp_inner+0xf66>
 8003992:	4f20      	ldr	r7, [pc, #128]	; (8003a14 <d_print_comp_inner+0x1020>)
 8003994:	256a      	movs	r5, #106	; 0x6a
 8003996:	f04f 0800 	mov.w	r8, #0
 800399a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800399e:	f107 090d 	add.w	r9, r7, #13
 80039a2:	e00b      	b.n	80039bc <d_print_comp_inner+0xfc8>
 80039a4:	460b      	mov	r3, r1
 80039a6:	3101      	adds	r1, #1
 80039a8:	45b9      	cmp	r9, r7
 80039aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039ae:	54e5      	strb	r5, [r4, r3]
 80039b0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80039b4:	f43f a8a6 	beq.w	8002b04 <d_print_comp_inner+0x110>
 80039b8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80039bc:	29ff      	cmp	r1, #255	; 0xff
 80039be:	d1f1      	bne.n	80039a4 <d_print_comp_inner+0xfb0>
 80039c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039c4:	4620      	mov	r0, r4
 80039c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039ce:	4798      	blx	r3
 80039d0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80039d4:	2101      	movs	r1, #1
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80039dc:	2300      	movs	r3, #0
 80039de:	e7e3      	b.n	80039a8 <d_print_comp_inner+0xfb4>
 80039e0:	4f0d      	ldr	r7, [pc, #52]	; (8003a18 <d_print_comp_inner+0x1024>)
 80039e2:	2567      	movs	r5, #103	; 0x67
 80039e4:	f04f 0800 	mov.w	r8, #0
 80039e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039ec:	f107 091c 	add.w	r9, r7, #28
 80039f0:	e020      	b.n	8003a34 <d_print_comp_inner+0x1040>
 80039f2:	bf00      	nop
 80039f4:	0800fc04 	.word	0x0800fc04
 80039f8:	0800fb50 	.word	0x0800fb50
 80039fc:	0800fb38 	.word	0x0800fb38
 8003a00:	0800fb1c 	.word	0x0800fb1c
 8003a04:	0800fb04 	.word	0x0800fb04
 8003a08:	0800efb8 	.word	0x0800efb8
 8003a0c:	0800fb88 	.word	0x0800fb88
 8003a10:	0800fa10 	.word	0x0800fa10
 8003a14:	0800fbe4 	.word	0x0800fbe4
 8003a18:	0800fc14 	.word	0x0800fc14
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	3101      	adds	r1, #1
 8003a20:	45b9      	cmp	r9, r7
 8003a22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a26:	54e5      	strb	r5, [r4, r3]
 8003a28:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a2c:	f43f a86a 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003a30:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a34:	29ff      	cmp	r1, #255	; 0xff
 8003a36:	d1f1      	bne.n	8003a1c <d_print_comp_inner+0x1028>
 8003a38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a42:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a46:	4798      	blx	r3
 8003a48:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a54:	2300      	movs	r3, #0
 8003a56:	e7e3      	b.n	8003a20 <d_print_comp_inner+0x102c>
 8003a58:	4fd4      	ldr	r7, [pc, #848]	; (8003dac <d_print_comp_inner+0x13b8>)
 8003a5a:	2564      	movs	r5, #100	; 0x64
 8003a5c:	f04f 0800 	mov.w	r8, #0
 8003a60:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a64:	f107 0909 	add.w	r9, r7, #9
 8003a68:	e00b      	b.n	8003a82 <d_print_comp_inner+0x108e>
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	3101      	adds	r1, #1
 8003a6e:	45b9      	cmp	r9, r7
 8003a70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a74:	54e5      	strb	r5, [r4, r3]
 8003a76:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a7a:	f000 8322 	beq.w	80040c2 <d_print_comp_inner+0x16ce>
 8003a7e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a82:	29ff      	cmp	r1, #255	; 0xff
 8003a84:	d1f1      	bne.n	8003a6a <d_print_comp_inner+0x1076>
 8003a86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a94:	4798      	blx	r3
 8003a96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e7e3      	b.n	8003a6e <d_print_comp_inner+0x107a>
 8003aa6:	4fc2      	ldr	r7, [pc, #776]	; (8003db0 <d_print_comp_inner+0x13bc>)
 8003aa8:	257b      	movs	r5, #123	; 0x7b
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003ab2:	f107 0907 	add.w	r9, r7, #7
 8003ab6:	e00b      	b.n	8003ad0 <d_print_comp_inner+0x10dc>
 8003ab8:	460b      	mov	r3, r1
 8003aba:	3101      	adds	r1, #1
 8003abc:	45b9      	cmp	r9, r7
 8003abe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ac2:	54e5      	strb	r5, [r4, r3]
 8003ac4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003ac8:	f000 828d 	beq.w	8003fe6 <d_print_comp_inner+0x15f2>
 8003acc:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003ad0:	29ff      	cmp	r1, #255	; 0xff
 8003ad2:	d1f1      	bne.n	8003ab8 <d_print_comp_inner+0x10c4>
 8003ad4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ade:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ae2:	4798      	blx	r3
 8003ae4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003ae8:	2101      	movs	r1, #1
 8003aea:	3301      	adds	r3, #1
 8003aec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003af0:	2300      	movs	r3, #0
 8003af2:	e7e3      	b.n	8003abc <d_print_comp_inner+0x10c8>
 8003af4:	68f2      	ldr	r2, [r6, #12]
 8003af6:	49af      	ldr	r1, [pc, #700]	; (8003db4 <d_print_comp_inner+0x13c0>)
 8003af8:	a802      	add	r0, sp, #8
 8003afa:	f008 f993 	bl	800be24 <siprintf>
 8003afe:	a802      	add	r0, sp, #8
 8003b00:	f002 fb1a 	bl	8006138 <strlen>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	f43e afdb 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003b0a:	ad02      	add	r5, sp, #8
 8003b0c:	f04f 0800 	mov.w	r8, #0
 8003b10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b14:	182f      	adds	r7, r5, r0
 8003b16:	e009      	b.n	8003b2c <d_print_comp_inner+0x1138>
 8003b18:	460b      	mov	r3, r1
 8003b1a:	3101      	adds	r1, #1
 8003b1c:	42af      	cmp	r7, r5
 8003b1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b22:	54e6      	strb	r6, [r4, r3]
 8003b24:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003b28:	f43e afca 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003b2c:	29ff      	cmp	r1, #255	; 0xff
 8003b2e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003b32:	d1f1      	bne.n	8003b18 <d_print_comp_inner+0x1124>
 8003b34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b42:	4798      	blx	r3
 8003b44:	2101      	movs	r1, #1
 8003b46:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8003b52:	e7e3      	b.n	8003b1c <d_print_comp_inner+0x1128>
 8003b54:	4f98      	ldr	r7, [pc, #608]	; (8003db8 <d_print_comp_inner+0x13c4>)
 8003b56:	256f      	movs	r5, #111	; 0x6f
 8003b58:	f04f 0800 	mov.w	r8, #0
 8003b5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b60:	f107 0908 	add.w	r9, r7, #8
 8003b64:	e00b      	b.n	8003b7e <d_print_comp_inner+0x118a>
 8003b66:	460b      	mov	r3, r1
 8003b68:	3101      	adds	r1, #1
 8003b6a:	454f      	cmp	r7, r9
 8003b6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b70:	54e5      	strb	r5, [r4, r3]
 8003b72:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003b76:	f000 829c 	beq.w	80040b2 <d_print_comp_inner+0x16be>
 8003b7a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003b7e:	29ff      	cmp	r1, #255	; 0xff
 8003b80:	d1f1      	bne.n	8003b66 <d_print_comp_inner+0x1172>
 8003b82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b86:	4620      	mov	r0, r4
 8003b88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b90:	4798      	blx	r3
 8003b92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003b96:	2101      	movs	r1, #1
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e7e3      	b.n	8003b6a <d_print_comp_inner+0x1176>
 8003ba2:	4f85      	ldr	r7, [pc, #532]	; (8003db8 <d_print_comp_inner+0x13c4>)
 8003ba4:	256f      	movs	r5, #111	; 0x6f
 8003ba6:	f04f 0800 	mov.w	r8, #0
 8003baa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003bae:	f107 0908 	add.w	r9, r7, #8
 8003bb2:	e00b      	b.n	8003bcc <d_print_comp_inner+0x11d8>
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	3101      	adds	r1, #1
 8003bb8:	454f      	cmp	r7, r9
 8003bba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bbe:	54e5      	strb	r5, [r4, r3]
 8003bc0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003bc4:	f43f a886 	beq.w	8002cd4 <d_print_comp_inner+0x2e0>
 8003bc8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003bcc:	29ff      	cmp	r1, #255	; 0xff
 8003bce:	d1f1      	bne.n	8003bb4 <d_print_comp_inner+0x11c0>
 8003bd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003bde:	4798      	blx	r3
 8003be0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003be4:	2101      	movs	r1, #1
 8003be6:	3301      	adds	r3, #1
 8003be8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003bec:	2300      	movs	r3, #0
 8003bee:	e7e3      	b.n	8003bb8 <d_print_comp_inner+0x11c4>
 8003bf0:	68f7      	ldr	r7, [r6, #12]
 8003bf2:	4e72      	ldr	r6, [pc, #456]	; (8003dbc <d_print_comp_inner+0x13c8>)
 8003bf4:	256f      	movs	r5, #111	; 0x6f
 8003bf6:	f04f 0900 	mov.w	r9, #0
 8003bfa:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8003bfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c02:	f106 0a07 	add.w	sl, r6, #7
 8003c06:	e00b      	b.n	8003c20 <d_print_comp_inner+0x122c>
 8003c08:	460b      	mov	r3, r1
 8003c0a:	3101      	adds	r1, #1
 8003c0c:	45b2      	cmp	sl, r6
 8003c0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c12:	54e5      	strb	r5, [r4, r3]
 8003c14:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c18:	f000 81b1 	beq.w	8003f7e <d_print_comp_inner+0x158a>
 8003c1c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003c20:	29ff      	cmp	r1, #255	; 0xff
 8003c22:	d1f1      	bne.n	8003c08 <d_print_comp_inner+0x1214>
 8003c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c2e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c32:	4798      	blx	r3
 8003c34:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003c38:	2101      	movs	r1, #1
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003c40:	2300      	movs	r3, #0
 8003c42:	e7e3      	b.n	8003c0c <d_print_comp_inner+0x1218>
 8003c44:	e9d6 2603 	ldrd	r2, r6, [r6, #12]
 8003c48:	b112      	cbz	r2, 8003c50 <d_print_comp_inner+0x125c>
 8003c4a:	2111      	movs	r1, #17
 8003c4c:	f000 ff8a 	bl	8004b64 <d_print_comp>
 8003c50:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c54:	2bff      	cmp	r3, #255	; 0xff
 8003c56:	f000 84e6 	beq.w	8004626 <d_print_comp_inner+0x1c32>
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	257b      	movs	r5, #123	; 0x7b
 8003c5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c62:	2111      	movs	r1, #17
 8003c64:	54e5      	strb	r5, [r4, r3]
 8003c66:	4632      	mov	r2, r6
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c6e:	f000 ff79 	bl	8004b64 <d_print_comp>
 8003c72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c76:	29ff      	cmp	r1, #255	; 0xff
 8003c78:	f000 8168 	beq.w	8003f4c <d_print_comp_inner+0x1558>
 8003c7c:	1c4a      	adds	r2, r1, #1
 8003c7e:	237d      	movs	r3, #125	; 0x7d
 8003c80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c84:	5463      	strb	r3, [r4, r1]
 8003c86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c8a:	f7fe bf19 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8003c8e:	e9d6 7503 	ldrd	r7, r5, [r6, #12]
 8003c92:	783b      	ldrb	r3, [r7, #0]
 8003c94:	2b32      	cmp	r3, #50	; 0x32
 8003c96:	f000 8388 	beq.w	80043aa <d_print_comp_inner+0x19b6>
 8003c9a:	2b34      	cmp	r3, #52	; 0x34
 8003c9c:	f040 8754 	bne.w	8004b48 <d_print_comp_inner+0x2154>
 8003ca0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	f000 86be 	beq.w	8004a26 <d_print_comp_inner+0x2032>
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003cb0:	2228      	movs	r2, #40	; 0x28
 8003cb2:	54e2      	strb	r2, [r4, r3]
 8003cb4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003cb8:	2111      	movs	r1, #17
 8003cba:	4620      	mov	r0, r4
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	f000 ff51 	bl	8004b64 <d_print_comp>
 8003cc2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003cc6:	29ff      	cmp	r1, #255	; 0xff
 8003cc8:	f000 869c 	beq.w	8004a04 <d_print_comp_inner+0x2010>
 8003ccc:	2329      	movs	r3, #41	; 0x29
 8003cce:	1c4a      	adds	r2, r1, #1
 8003cd0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003cd4:	5463      	strb	r3, [r4, r1]
 8003cd6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003cda:	f7ff b8bd 	b.w	8002e58 <d_print_comp_inner+0x464>
 8003cde:	2111      	movs	r1, #17
 8003ce0:	68f2      	ldr	r2, [r6, #12]
 8003ce2:	b013      	add	sp, #76	; 0x4c
 8003ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	f001 be2e 	b.w	8005948 <d_print_expr_op>
 8003cec:	4f34      	ldr	r7, [pc, #208]	; (8003dc0 <d_print_comp_inner+0x13cc>)
 8003cee:	2567      	movs	r5, #103	; 0x67
 8003cf0:	f04f 0800 	mov.w	r8, #0
 8003cf4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003cf8:	f107 091b 	add.w	r9, r7, #27
 8003cfc:	e00b      	b.n	8003d16 <d_print_comp_inner+0x1322>
 8003cfe:	460b      	mov	r3, r1
 8003d00:	3101      	adds	r1, #1
 8003d02:	45b9      	cmp	r9, r7
 8003d04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d08:	54e5      	strb	r5, [r4, r3]
 8003d0a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003d0e:	f43e aef9 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003d12:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003d16:	29ff      	cmp	r1, #255	; 0xff
 8003d18:	d1f1      	bne.n	8003cfe <d_print_comp_inner+0x130a>
 8003d1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d24:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d28:	4798      	blx	r3
 8003d2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003d2e:	2101      	movs	r1, #1
 8003d30:	3301      	adds	r3, #1
 8003d32:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003d36:	2300      	movs	r3, #0
 8003d38:	e7e3      	b.n	8003d02 <d_print_comp_inner+0x130e>
 8003d3a:	68f2      	ldr	r2, [r6, #12]
 8003d3c:	e9d2 5300 	ldrd	r5, r3, [r2]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f43e aebd 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003d46:	442b      	add	r3, r5
 8003d48:	f04f 0800 	mov.w	r8, #0
 8003d4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d50:	3d01      	subs	r5, #1
 8003d52:	1e5f      	subs	r7, r3, #1
 8003d54:	e009      	b.n	8003d6a <d_print_comp_inner+0x1376>
 8003d56:	460b      	mov	r3, r1
 8003d58:	3101      	adds	r1, #1
 8003d5a:	42af      	cmp	r7, r5
 8003d5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d60:	54e6      	strb	r6, [r4, r3]
 8003d62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003d66:	f43e aeab 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003d6a:	29ff      	cmp	r1, #255	; 0xff
 8003d6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d70:	d1f1      	bne.n	8003d56 <d_print_comp_inner+0x1362>
 8003d72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d80:	4798      	blx	r3
 8003d82:	2101      	movs	r1, #1
 8003d84:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8003d88:	2300      	movs	r3, #0
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8003d90:	e7e3      	b.n	8003d5a <d_print_comp_inner+0x1366>
 8003d92:	e9d6 5303 	ldrd	r5, r3, [r6, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f43e ae92 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003d9c:	442b      	add	r3, r5
 8003d9e:	f04f 0800 	mov.w	r8, #0
 8003da2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003da6:	3d01      	subs	r5, #1
 8003da8:	1e5f      	subs	r7, r3, #1
 8003daa:	e015      	b.n	8003dd8 <d_print_comp_inner+0x13e4>
 8003dac:	0800fbf4 	.word	0x0800fbf4
 8003db0:	0800fc54 	.word	0x0800fc54
 8003db4:	0800f988 	.word	0x0800f988
 8003db8:	0800fba8 	.word	0x0800fba8
 8003dbc:	0800fb9c 	.word	0x0800fb9c
 8003dc0:	0800fc34 	.word	0x0800fc34
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	3101      	adds	r1, #1
 8003dc8:	42af      	cmp	r7, r5
 8003dca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003dce:	54e6      	strb	r6, [r4, r3]
 8003dd0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003dd4:	f43e ae74 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003dd8:	29ff      	cmp	r1, #255	; 0xff
 8003dda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003dde:	d1f1      	bne.n	8003dc4 <d_print_comp_inner+0x13d0>
 8003de0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003de4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003de8:	4620      	mov	r0, r4
 8003dea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003dee:	4798      	blx	r3
 8003df0:	2101      	movs	r1, #1
 8003df2:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8003df6:	2300      	movs	r3, #0
 8003df8:	440a      	add	r2, r1
 8003dfa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8003dfe:	e7e3      	b.n	8003dc8 <d_print_comp_inner+0x13d4>
 8003e00:	2111      	movs	r1, #17
 8003e02:	4620      	mov	r0, r4
 8003e04:	6932      	ldr	r2, [r6, #16]
 8003e06:	f000 fead 	bl	8004b64 <d_print_comp>
 8003e0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e0e:	29ff      	cmp	r1, #255	; 0xff
 8003e10:	f000 82bc 	beq.w	800438c <d_print_comp_inner+0x1998>
 8003e14:	1c4a      	adds	r2, r1, #1
 8003e16:	235d      	movs	r3, #93	; 0x5d
 8003e18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003e1c:	5463      	strb	r3, [r4, r1]
 8003e1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003e22:	f7fe be4d 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8003e26:	f1be 0f01 	cmp.w	lr, #1
 8003e2a:	f240 818f 	bls.w	800414c <d_print_comp_inner+0x1758>
 8003e2e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8003e32:	f7fe bfc3 	b.w	8002dbc <d_print_comp_inner+0x3c8>
 8003e36:	4fd1      	ldr	r7, [pc, #836]	; (800417c <d_print_comp_inner+0x1788>)
 8003e38:	2111      	movs	r1, #17
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	68f2      	ldr	r2, [r6, #12]
 8003e3e:	f000 fe91 	bl	8004b64 <d_print_comp>
 8003e42:	252d      	movs	r5, #45	; 0x2d
 8003e44:	f04f 0800 	mov.w	r8, #0
 8003e48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e4c:	f107 0903 	add.w	r9, r7, #3
 8003e50:	e00b      	b.n	8003e6a <d_print_comp_inner+0x1476>
 8003e52:	460b      	mov	r3, r1
 8003e54:	3101      	adds	r1, #1
 8003e56:	454f      	cmp	r7, r9
 8003e58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e5c:	54e5      	strb	r5, [r4, r3]
 8003e5e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003e62:	f43e af37 	beq.w	8002cd4 <d_print_comp_inner+0x2e0>
 8003e66:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003e6a:	29ff      	cmp	r1, #255	; 0xff
 8003e6c:	d1f1      	bne.n	8003e52 <d_print_comp_inner+0x145e>
 8003e6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e72:	4620      	mov	r0, r4
 8003e74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e78:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e7c:	4798      	blx	r3
 8003e7e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003e82:	2101      	movs	r1, #1
 8003e84:	3301      	adds	r3, #1
 8003e86:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e7e3      	b.n	8003e56 <d_print_comp_inner+0x1462>
 8003e8e:	4fbc      	ldr	r7, [pc, #752]	; (8004180 <d_print_comp_inner+0x178c>)
 8003e90:	2111      	movs	r1, #17
 8003e92:	4620      	mov	r0, r4
 8003e94:	6932      	ldr	r2, [r6, #16]
 8003e96:	f000 fe65 	bl	8004b64 <d_print_comp>
 8003e9a:	2520      	movs	r5, #32
 8003e9c:	f04f 0800 	mov.w	r8, #0
 8003ea0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ea4:	f107 0904 	add.w	r9, r7, #4
 8003ea8:	e00b      	b.n	8003ec2 <d_print_comp_inner+0x14ce>
 8003eaa:	460b      	mov	r3, r1
 8003eac:	3101      	adds	r1, #1
 8003eae:	454f      	cmp	r7, r9
 8003eb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003eb4:	54e5      	strb	r5, [r4, r3]
 8003eb6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003eba:	f43e ae23 	beq.w	8002b04 <d_print_comp_inner+0x110>
 8003ebe:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003ec2:	29ff      	cmp	r1, #255	; 0xff
 8003ec4:	d1f1      	bne.n	8003eaa <d_print_comp_inner+0x14b6>
 8003ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ed0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ed4:	4798      	blx	r3
 8003ed6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003eda:	2101      	movs	r1, #1
 8003edc:	3301      	adds	r3, #1
 8003ede:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e7e3      	b.n	8003eae <d_print_comp_inner+0x14ba>
 8003ee6:	68f2      	ldr	r2, [r6, #12]
 8003ee8:	49a6      	ldr	r1, [pc, #664]	; (8004184 <d_print_comp_inner+0x1790>)
 8003eea:	3201      	adds	r2, #1
 8003eec:	a802      	add	r0, sp, #8
 8003eee:	f007 ff99 	bl	800be24 <siprintf>
 8003ef2:	a802      	add	r0, sp, #8
 8003ef4:	f002 f920 	bl	8006138 <strlen>
 8003ef8:	b318      	cbz	r0, 8003f42 <d_print_comp_inner+0x154e>
 8003efa:	ad02      	add	r5, sp, #8
 8003efc:	f04f 0800 	mov.w	r8, #0
 8003f00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f04:	182f      	adds	r7, r5, r0
 8003f06:	e008      	b.n	8003f1a <d_print_comp_inner+0x1526>
 8003f08:	460b      	mov	r3, r1
 8003f0a:	3101      	adds	r1, #1
 8003f0c:	42af      	cmp	r7, r5
 8003f0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f12:	54e6      	strb	r6, [r4, r3]
 8003f14:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f18:	d015      	beq.n	8003f46 <d_print_comp_inner+0x1552>
 8003f1a:	29ff      	cmp	r1, #255	; 0xff
 8003f1c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003f20:	d1f2      	bne.n	8003f08 <d_print_comp_inner+0x1514>
 8003f22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f30:	4798      	blx	r3
 8003f32:	2101      	movs	r1, #1
 8003f34:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8003f38:	2300      	movs	r3, #0
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8003f40:	e7e4      	b.n	8003f0c <d_print_comp_inner+0x1518>
 8003f42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f46:	29ff      	cmp	r1, #255	; 0xff
 8003f48:	f47f ae98 	bne.w	8003c7c <d_print_comp_inner+0x1288>
 8003f4c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8003f50:	2500      	movs	r5, #0
 8003f52:	4620      	mov	r0, r4
 8003f54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003f58:	4798      	blx	r3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003f60:	4629      	mov	r1, r5
 8003f62:	4413      	add	r3, r2
 8003f64:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003f68:	e689      	b.n	8003c7e <d_print_comp_inner+0x128a>
 8003f6a:	6937      	ldr	r7, [r6, #16]
 8003f6c:	783b      	ldrb	r3, [r7, #0]
 8003f6e:	2b47      	cmp	r3, #71	; 0x47
 8003f70:	f000 8320 	beq.w	80045b4 <d_print_comp_inner+0x1bc0>
 8003f74:	463a      	mov	r2, r7
 8003f76:	2111      	movs	r1, #17
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fe bdc6 	b.w	8002b0a <d_print_comp_inner+0x116>
 8003f7e:	687d      	ldr	r5, [r7, #4]
 8003f80:	782b      	ldrb	r3, [r5, #0]
 8003f82:	3b61      	subs	r3, #97	; 0x61
 8003f84:	2b19      	cmp	r3, #25
 8003f86:	f240 82cf 	bls.w	8004528 <d_print_comp_inner+0x1b34>
 8003f8a:	f108 37ff 	add.w	r7, r8, #4294967295
 8003f8e:	5deb      	ldrb	r3, [r5, r7]
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	bf18      	it	ne
 8003f94:	4647      	movne	r7, r8
 8003f96:	2f00      	cmp	r7, #0
 8003f98:	f43e ad92 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003f9c:	3d01      	subs	r5, #1
 8003f9e:	f04f 0800 	mov.w	r8, #0
 8003fa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fa6:	442f      	add	r7, r5
 8003fa8:	e009      	b.n	8003fbe <d_print_comp_inner+0x15ca>
 8003faa:	460b      	mov	r3, r1
 8003fac:	3101      	adds	r1, #1
 8003fae:	42af      	cmp	r7, r5
 8003fb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003fb4:	54e6      	strb	r6, [r4, r3]
 8003fb6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003fba:	f43e ad81 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8003fbe:	29ff      	cmp	r1, #255	; 0xff
 8003fc0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003fc4:	d1f1      	bne.n	8003faa <d_print_comp_inner+0x15b6>
 8003fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fd4:	4798      	blx	r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8003fdc:	2300      	movs	r3, #0
 8003fde:	440a      	add	r2, r1
 8003fe0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8003fe4:	e7e3      	b.n	8003fae <d_print_comp_inner+0x15ba>
 8003fe6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fea:	2111      	movs	r1, #17
 8003fec:	3301      	adds	r3, #1
 8003fee:	68f2      	ldr	r2, [r6, #12]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003ff6:	f000 fdb5 	bl	8004b64 <d_print_comp>
 8003ffa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ffe:	4f62      	ldr	r7, [pc, #392]	; (8004188 <d_print_comp_inner+0x1794>)
 8004000:	3b01      	subs	r3, #1
 8004002:	2529      	movs	r5, #41	; 0x29
 8004004:	f04f 0800 	mov.w	r8, #0
 8004008:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800400c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004010:	f107 0901 	add.w	r9, r7, #1
 8004014:	e00a      	b.n	800402c <d_print_comp_inner+0x1638>
 8004016:	460b      	mov	r3, r1
 8004018:	3101      	adds	r1, #1
 800401a:	45b9      	cmp	r9, r7
 800401c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004020:	54e5      	strb	r5, [r4, r3]
 8004022:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004026:	d013      	beq.n	8004050 <d_print_comp_inner+0x165c>
 8004028:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800402c:	29ff      	cmp	r1, #255	; 0xff
 800402e:	d1f2      	bne.n	8004016 <d_print_comp_inner+0x1622>
 8004030:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004034:	4620      	mov	r0, r4
 8004036:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800403a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800403e:	4798      	blx	r3
 8004040:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004044:	2101      	movs	r1, #1
 8004046:	3301      	adds	r3, #1
 8004048:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800404c:	2300      	movs	r3, #0
 800404e:	e7e4      	b.n	800401a <d_print_comp_inner+0x1626>
 8004050:	6932      	ldr	r2, [r6, #16]
 8004052:	494c      	ldr	r1, [pc, #304]	; (8004184 <d_print_comp_inner+0x1790>)
 8004054:	3201      	adds	r2, #1
 8004056:	a802      	add	r0, sp, #8
 8004058:	f007 fee4 	bl	800be24 <siprintf>
 800405c:	a802      	add	r0, sp, #8
 800405e:	f002 f86b 	bl	8006138 <strlen>
 8004062:	2800      	cmp	r0, #0
 8004064:	f43f af6d 	beq.w	8003f42 <d_print_comp_inner+0x154e>
 8004068:	ad02      	add	r5, sp, #8
 800406a:	f04f 0800 	mov.w	r8, #0
 800406e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004072:	182f      	adds	r7, r5, r0
 8004074:	e009      	b.n	800408a <d_print_comp_inner+0x1696>
 8004076:	460b      	mov	r3, r1
 8004078:	3101      	adds	r1, #1
 800407a:	42af      	cmp	r7, r5
 800407c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004080:	54e6      	strb	r6, [r4, r3]
 8004082:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004086:	f43f af5e 	beq.w	8003f46 <d_print_comp_inner+0x1552>
 800408a:	29ff      	cmp	r1, #255	; 0xff
 800408c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004090:	d1f1      	bne.n	8004076 <d_print_comp_inner+0x1682>
 8004092:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004096:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800409a:	4620      	mov	r0, r4
 800409c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040a0:	4798      	blx	r3
 80040a2:	2101      	movs	r1, #1
 80040a4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80040a8:	2300      	movs	r3, #0
 80040aa:	440a      	add	r2, r1
 80040ac:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80040b0:	e7e3      	b.n	800407a <d_print_comp_inner+0x1686>
 80040b2:	4632      	mov	r2, r6
 80040b4:	2111      	movs	r1, #17
 80040b6:	4620      	mov	r0, r4
 80040b8:	b013      	add	sp, #76	; 0x4c
 80040ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040be:	f001 bb9b 	b.w	80057f8 <d_print_conversion>
 80040c2:	2111      	movs	r1, #17
 80040c4:	4620      	mov	r0, r4
 80040c6:	68f2      	ldr	r2, [r6, #12]
 80040c8:	f000 fd4c 	bl	8004b64 <d_print_comp>
 80040cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040d0:	29ff      	cmp	r1, #255	; 0xff
 80040d2:	f000 8260 	beq.w	8004596 <d_print_comp_inner+0x1ba2>
 80040d6:	1c4a      	adds	r2, r1, #1
 80040d8:	2329      	movs	r3, #41	; 0x29
 80040da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80040de:	5463      	strb	r3, [r4, r1]
 80040e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80040e4:	f7fe bcec 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 80040e8:	4632      	mov	r2, r6
 80040ea:	2111      	movs	r1, #17
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 fd67 	bl	8004bc0 <d_print_mod>
 80040f2:	f7fe bcff 	b.w	8002af4 <d_print_comp_inner+0x100>
 80040f6:	6932      	ldr	r2, [r6, #16]
 80040f8:	460d      	mov	r5, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	2111      	movs	r1, #17
 80040fe:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
 8004102:	f000 fd2f 	bl	8004b64 <d_print_comp>
 8004106:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800410a:	42b3      	cmp	r3, r6
 800410c:	f47e acd8 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 8004110:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004114:	42ab      	cmp	r3, r5
 8004116:	f47e acd3 	bne.w	8002ac0 <d_print_comp_inner+0xcc>
 800411a:	3d02      	subs	r5, #2
 800411c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8004120:	f7fe bcce 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8004124:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004128:	2bff      	cmp	r3, #255	; 0xff
 800412a:	f000 83b5 	beq.w	8004898 <d_print_comp_inner+0x1ea4>
 800412e:	1c58      	adds	r0, r3, #1
 8004130:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004134:	2111      	movs	r1, #17
 8004136:	f804 9003 	strb.w	r9, [r4, r3]
 800413a:	4620      	mov	r0, r4
 800413c:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8004140:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004144:	f000 fd3c 	bl	8004bc0 <d_print_mod>
 8004148:	f7fe be4d 	b.w	8002de6 <d_print_comp_inner+0x3f2>
 800414c:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8004150:	f1b9 0f00 	cmp.w	r9, #0
 8004154:	f43e acaf 	beq.w	8002ab6 <d_print_comp_inner+0xc2>
 8004158:	2d04      	cmp	r5, #4
 800415a:	f102 0210 	add.w	r2, r2, #16
 800415e:	f000 81ee 	beq.w	800453e <d_print_comp_inner+0x1b4a>
 8004162:	4628      	mov	r0, r5
 8004164:	f7fe bdf3 	b.w	8002d4e <d_print_comp_inner+0x35a>
 8004168:	f8d6 900c 	ldr.w	r9, [r6, #12]
 800416c:	f1b8 0f00 	cmp.w	r8, #0
 8004170:	f43e aca6 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8004174:	f108 3aff 	add.w	sl, r8, #4294967295
 8004178:	f7fe bff4 	b.w	8003164 <d_print_comp_inner+0x770>
 800417c:	0800fa6c 	.word	0x0800fa6c
 8004180:	0800fb30 	.word	0x0800fb30
 8004184:	0800f988 	.word	0x0800f988
 8004188:	0800fc60 	.word	0x0800fc60
 800418c:	7833      	ldrb	r3, [r6, #0]
 800418e:	2b2f      	cmp	r3, #47	; 0x2f
 8004190:	f47e ad01 	bne.w	8002b96 <d_print_comp_inner+0x1a2>
 8004194:	460e      	mov	r6, r1
 8004196:	f8d4 e114 	ldr.w	lr, [r4, #276]	; 0x114
 800419a:	f7fe bcfe 	b.w	8002b9a <d_print_comp_inner+0x1a6>
 800419e:	2d07      	cmp	r5, #7
 80041a0:	f47e ad75 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 80041a4:	6931      	ldr	r1, [r6, #16]
 80041a6:	7808      	ldrb	r0, [r1, #0]
 80041a8:	2800      	cmp	r0, #0
 80041aa:	f47e ad70 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 80041ae:	6908      	ldr	r0, [r1, #16]
 80041b0:	2801      	cmp	r0, #1
 80041b2:	f47e ad6c 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 80041b6:	2b3d      	cmp	r3, #61	; 0x3d
 80041b8:	f47e ad69 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 80041bc:	68cb      	ldr	r3, [r1, #12]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b30      	cmp	r3, #48	; 0x30
 80041c2:	f000 84bd 	beq.w	8004b40 <d_print_comp_inner+0x214c>
 80041c6:	2b31      	cmp	r3, #49	; 0x31
 80041c8:	f47e ad61 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 80041cc:	4620      	mov	r0, r4
 80041ce:	49b7      	ldr	r1, [pc, #732]	; (80044ac <d_print_comp_inner+0x1ab8>)
 80041d0:	b013      	add	sp, #76	; 0x4c
 80041d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d6:	f7fc b9fb 	b.w	80005d0 <d_append_string>
 80041da:	4db5      	ldr	r5, [pc, #724]	; (80044b0 <d_print_comp_inner+0x1abc>)
 80041dc:	265f      	movs	r6, #95	; 0x5f
 80041de:	f04f 0800 	mov.w	r8, #0
 80041e2:	1d6f      	adds	r7, r5, #5
 80041e4:	e00b      	b.n	80041fe <d_print_comp_inner+0x180a>
 80041e6:	460b      	mov	r3, r1
 80041e8:	3101      	adds	r1, #1
 80041ea:	42af      	cmp	r7, r5
 80041ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041f0:	54e6      	strb	r6, [r4, r3]
 80041f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80041f6:	f43e ac63 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 80041fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80041fe:	29ff      	cmp	r1, #255	; 0xff
 8004200:	d1f1      	bne.n	80041e6 <d_print_comp_inner+0x17f2>
 8004202:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004206:	4620      	mov	r0, r4
 8004208:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800420c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004210:	4798      	blx	r3
 8004212:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004216:	2101      	movs	r1, #1
 8004218:	3301      	adds	r3, #1
 800421a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800421e:	2300      	movs	r3, #0
 8004220:	e7e3      	b.n	80041ea <d_print_comp_inner+0x17f6>
 8004222:	4da4      	ldr	r5, [pc, #656]	; (80044b4 <d_print_comp_inner+0x1ac0>)
 8004224:	267b      	movs	r6, #123	; 0x7b
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800422e:	f105 0905 	add.w	r9, r5, #5
 8004232:	e00a      	b.n	800424a <d_print_comp_inner+0x1856>
 8004234:	460b      	mov	r3, r1
 8004236:	3101      	adds	r1, #1
 8004238:	45a9      	cmp	r9, r5
 800423a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800423e:	54e6      	strb	r6, [r4, r3]
 8004240:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004244:	d013      	beq.n	800426e <d_print_comp_inner+0x187a>
 8004246:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800424a:	29ff      	cmp	r1, #255	; 0xff
 800424c:	d1f2      	bne.n	8004234 <d_print_comp_inner+0x1840>
 800424e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004252:	4620      	mov	r0, r4
 8004254:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004258:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800425c:	4798      	blx	r3
 800425e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004262:	2101      	movs	r1, #1
 8004264:	3301      	adds	r3, #1
 8004266:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800426a:	2300      	movs	r3, #0
 800426c:	e7e4      	b.n	8004238 <d_print_comp_inner+0x1844>
 800426e:	463a      	mov	r2, r7
 8004270:	4991      	ldr	r1, [pc, #580]	; (80044b8 <d_print_comp_inner+0x1ac4>)
 8004272:	a802      	add	r0, sp, #8
 8004274:	f007 fdd6 	bl	800be24 <siprintf>
 8004278:	a802      	add	r0, sp, #8
 800427a:	f001 ff5d 	bl	8006138 <strlen>
 800427e:	b318      	cbz	r0, 80042c8 <d_print_comp_inner+0x18d4>
 8004280:	ad02      	add	r5, sp, #8
 8004282:	f04f 0800 	mov.w	r8, #0
 8004286:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800428a:	182f      	adds	r7, r5, r0
 800428c:	e008      	b.n	80042a0 <d_print_comp_inner+0x18ac>
 800428e:	460b      	mov	r3, r1
 8004290:	3101      	adds	r1, #1
 8004292:	42af      	cmp	r7, r5
 8004294:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004298:	54e6      	strb	r6, [r4, r3]
 800429a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800429e:	d015      	beq.n	80042cc <d_print_comp_inner+0x18d8>
 80042a0:	29ff      	cmp	r1, #255	; 0xff
 80042a2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80042a6:	d1f2      	bne.n	800428e <d_print_comp_inner+0x189a>
 80042a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042b0:	4620      	mov	r0, r4
 80042b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042b6:	4798      	blx	r3
 80042b8:	2101      	movs	r1, #1
 80042ba:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80042be:	2300      	movs	r3, #0
 80042c0:	440a      	add	r2, r1
 80042c2:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80042c6:	e7e4      	b.n	8004292 <d_print_comp_inner+0x189e>
 80042c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042cc:	29ff      	cmp	r1, #255	; 0xff
 80042ce:	f000 834a 	beq.w	8004966 <d_print_comp_inner+0x1f72>
 80042d2:	237d      	movs	r3, #125	; 0x7d
 80042d4:	1c4a      	adds	r2, r1, #1
 80042d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80042da:	5463      	strb	r3, [r4, r1]
 80042dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80042e0:	f7fe bbee 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 80042e4:	2500      	movs	r5, #0
 80042e6:	780b      	ldrb	r3, [r1, #0]
 80042e8:	f7fe bc4b 	b.w	8002b82 <d_print_comp_inner+0x18e>
 80042ec:	4631      	mov	r1, r6
 80042ee:	f7fc f90b 	bl	8000508 <d_lookup_template_argument>
 80042f2:	4602      	mov	r2, r0
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f43e abe0 	beq.w	8002aba <d_print_comp_inner+0xc6>
 80042fa:	7803      	ldrb	r3, [r0, #0]
 80042fc:	2b2f      	cmp	r3, #47	; 0x2f
 80042fe:	f000 830b 	beq.w	8004918 <d_print_comp_inner+0x1f24>
 8004302:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8004306:	2111      	movs	r1, #17
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	4620      	mov	r0, r4
 800430c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004310:	f000 fc28 	bl	8004b64 <d_print_comp>
 8004314:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8004318:	f7fe bbd2 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 800431c:	68f2      	ldr	r2, [r6, #12]
 800431e:	4966      	ldr	r1, [pc, #408]	; (80044b8 <d_print_comp_inner+0x1ac4>)
 8004320:	3201      	adds	r2, #1
 8004322:	a802      	add	r0, sp, #8
 8004324:	f007 fd7e 	bl	800be24 <siprintf>
 8004328:	a802      	add	r0, sp, #8
 800432a:	f001 ff05 	bl	8006138 <strlen>
 800432e:	2800      	cmp	r0, #0
 8004330:	f43e abc6 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8004334:	ad02      	add	r5, sp, #8
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800433e:	182f      	adds	r7, r5, r0
 8004340:	e009      	b.n	8004356 <d_print_comp_inner+0x1962>
 8004342:	460b      	mov	r3, r1
 8004344:	3101      	adds	r1, #1
 8004346:	42bd      	cmp	r5, r7
 8004348:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800434c:	54e6      	strb	r6, [r4, r3]
 800434e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004352:	f43e abb5 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 8004356:	29ff      	cmp	r1, #255	; 0xff
 8004358:	f815 6b01 	ldrb.w	r6, [r5], #1
 800435c:	d1f1      	bne.n	8004342 <d_print_comp_inner+0x194e>
 800435e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004362:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004366:	4620      	mov	r0, r4
 8004368:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800436c:	4798      	blx	r3
 800436e:	2101      	movs	r1, #1
 8004370:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004374:	2300      	movs	r3, #0
 8004376:	440a      	add	r2, r1
 8004378:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800437c:	e7e3      	b.n	8004346 <d_print_comp_inner+0x1952>
 800437e:	2500      	movs	r5, #0
 8004380:	f7fe bc85 	b.w	8002c8e <d_print_comp_inner+0x29a>
 8004384:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004388:	f7ff baaf 	b.w	80038ea <d_print_comp_inner+0xef6>
 800438c:	2500      	movs	r5, #0
 800438e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004392:	4620      	mov	r0, r4
 8004394:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004398:	4798      	blx	r3
 800439a:	2201      	movs	r2, #1
 800439c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80043a0:	4629      	mov	r1, r5
 80043a2:	4413      	add	r3, r2
 80043a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80043a8:	e535      	b.n	8003e16 <d_print_comp_inner+0x1422>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681e      	ldr	r6, [r3, #0]
 80043ae:	7833      	ldrb	r3, [r6, #0]
 80043b0:	2b61      	cmp	r3, #97	; 0x61
 80043b2:	f040 80c9 	bne.w	8004548 <d_print_comp_inner+0x1b54>
 80043b6:	7872      	ldrb	r2, [r6, #1]
 80043b8:	2a64      	cmp	r2, #100	; 0x64
 80043ba:	f040 80c5 	bne.w	8004548 <d_print_comp_inner+0x1b54>
 80043be:	78b2      	ldrb	r2, [r6, #2]
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	f040 80c1 	bne.w	8004548 <d_print_comp_inner+0x1b54>
 80043c6:	782a      	ldrb	r2, [r5, #0]
 80043c8:	2a03      	cmp	r2, #3
 80043ca:	f000 8354 	beq.w	8004a76 <d_print_comp_inner+0x2082>
 80043ce:	2a39      	cmp	r2, #57	; 0x39
 80043d0:	f000 836b 	beq.w	8004aaa <d_print_comp_inner+0x20b6>
 80043d4:	2b73      	cmp	r3, #115	; 0x73
 80043d6:	d11d      	bne.n	8004414 <d_print_comp_inner+0x1a20>
 80043d8:	7872      	ldrb	r2, [r6, #1]
 80043da:	2a5a      	cmp	r2, #90	; 0x5a
 80043dc:	d143      	bne.n	8004466 <d_print_comp_inner+0x1a72>
 80043de:	f896 8002 	ldrb.w	r8, [r6, #2]
 80043e2:	f1b8 0f00 	cmp.w	r8, #0
 80043e6:	d13e      	bne.n	8004466 <d_print_comp_inner+0x1a72>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7fc f8a8 	bl	8000540 <d_find_pack>
 80043f0:	b930      	cbnz	r0, 8004400 <d_print_comp_inner+0x1a0c>
 80043f2:	e008      	b.n	8004406 <d_print_comp_inner+0x1a12>
 80043f4:	68c3      	ldr	r3, [r0, #12]
 80043f6:	b133      	cbz	r3, 8004406 <d_print_comp_inner+0x1a12>
 80043f8:	6900      	ldr	r0, [r0, #16]
 80043fa:	f108 0801 	add.w	r8, r8, #1
 80043fe:	b110      	cbz	r0, 8004406 <d_print_comp_inner+0x1a12>
 8004400:	7803      	ldrb	r3, [r0, #0]
 8004402:	2b2f      	cmp	r3, #47	; 0x2f
 8004404:	d0f6      	beq.n	80043f4 <d_print_comp_inner+0x1a00>
 8004406:	4641      	mov	r1, r8
 8004408:	4620      	mov	r0, r4
 800440a:	b013      	add	sp, #76	; 0x4c
 800440c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	f7fc b944 	b.w	800069c <d_append_num>
 8004414:	463a      	mov	r2, r7
 8004416:	2111      	movs	r1, #17
 8004418:	4620      	mov	r0, r4
 800441a:	f001 fa95 	bl	8005948 <d_print_expr_op>
 800441e:	7833      	ldrb	r3, [r6, #0]
 8004420:	2b67      	cmp	r3, #103	; 0x67
 8004422:	d109      	bne.n	8004438 <d_print_comp_inner+0x1a44>
 8004424:	7872      	ldrb	r2, [r6, #1]
 8004426:	2a73      	cmp	r2, #115	; 0x73
 8004428:	d106      	bne.n	8004438 <d_print_comp_inner+0x1a44>
 800442a:	78b2      	ldrb	r2, [r6, #2]
 800442c:	b922      	cbnz	r2, 8004438 <d_print_comp_inner+0x1a44>
 800442e:	462a      	mov	r2, r5
 8004430:	2111      	movs	r1, #17
 8004432:	4620      	mov	r0, r4
 8004434:	f7fe bb69 	b.w	8002b0a <d_print_comp_inner+0x116>
 8004438:	2b73      	cmp	r3, #115	; 0x73
 800443a:	f47e ad0d 	bne.w	8002e58 <d_print_comp_inner+0x464>
 800443e:	7873      	ldrb	r3, [r6, #1]
 8004440:	2b74      	cmp	r3, #116	; 0x74
 8004442:	f47e ad09 	bne.w	8002e58 <d_print_comp_inner+0x464>
 8004446:	78b3      	ldrb	r3, [r6, #2]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f47e ad05 	bne.w	8002e58 <d_print_comp_inner+0x464>
 800444e:	2128      	movs	r1, #40	; 0x28
 8004450:	4620      	mov	r0, r4
 8004452:	f7fc f837 	bl	80004c4 <d_append_char>
 8004456:	2111      	movs	r1, #17
 8004458:	462a      	mov	r2, r5
 800445a:	4620      	mov	r0, r4
 800445c:	f000 fb82 	bl	8004b64 <d_print_comp>
 8004460:	2129      	movs	r1, #41	; 0x29
 8004462:	f7ff b922 	b.w	80036aa <d_print_comp_inner+0xcb6>
 8004466:	2b73      	cmp	r3, #115	; 0x73
 8004468:	d1d4      	bne.n	8004414 <d_print_comp_inner+0x1a20>
 800446a:	7873      	ldrb	r3, [r6, #1]
 800446c:	2b50      	cmp	r3, #80	; 0x50
 800446e:	d1d1      	bne.n	8004414 <d_print_comp_inner+0x1a20>
 8004470:	78b3      	ldrb	r3, [r6, #2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ce      	bne.n	8004414 <d_print_comp_inner+0x1a20>
 8004476:	461e      	mov	r6, r3
 8004478:	e004      	b.n	8004484 <d_print_comp_inner+0x1a90>
 800447a:	3601      	adds	r6, #1
 800447c:	692d      	ldr	r5, [r5, #16]
 800447e:	2d00      	cmp	r5, #0
 8004480:	f000 8219 	beq.w	80048b6 <d_print_comp_inner+0x1ec2>
 8004484:	782b      	ldrb	r3, [r5, #0]
 8004486:	2b2f      	cmp	r3, #47	; 0x2f
 8004488:	f040 8215 	bne.w	80048b6 <d_print_comp_inner+0x1ec2>
 800448c:	68eb      	ldr	r3, [r5, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8211 	beq.w	80048b6 <d_print_comp_inner+0x1ec2>
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	2a4b      	cmp	r2, #75	; 0x4b
 8004498:	d1ef      	bne.n	800447a <d_print_comp_inner+0x1a86>
 800449a:	4620      	mov	r0, r4
 800449c:	68d9      	ldr	r1, [r3, #12]
 800449e:	f7fc f84f 	bl	8000540 <d_find_pack>
 80044a2:	4602      	mov	r2, r0
 80044a4:	b190      	cbz	r0, 80044cc <d_print_comp_inner+0x1ad8>
 80044a6:	2200      	movs	r2, #0
 80044a8:	e00d      	b.n	80044c6 <d_print_comp_inner+0x1ad2>
 80044aa:	bf00      	nop
 80044ac:	0800fbdc 	.word	0x0800fbdc
 80044b0:	0800fb90 	.word	0x0800fb90
 80044b4:	0800fc0c 	.word	0x0800fc0c
 80044b8:	0800f988 	.word	0x0800f988
 80044bc:	68c1      	ldr	r1, [r0, #12]
 80044be:	b129      	cbz	r1, 80044cc <d_print_comp_inner+0x1ad8>
 80044c0:	6900      	ldr	r0, [r0, #16]
 80044c2:	3201      	adds	r2, #1
 80044c4:	b110      	cbz	r0, 80044cc <d_print_comp_inner+0x1ad8>
 80044c6:	7801      	ldrb	r1, [r0, #0]
 80044c8:	292f      	cmp	r1, #47	; 0x2f
 80044ca:	d0f7      	beq.n	80044bc <d_print_comp_inner+0x1ac8>
 80044cc:	4416      	add	r6, r2
 80044ce:	e7d5      	b.n	800447c <d_print_comp_inner+0x1a88>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f63e ac73 	bhi.w	8002dbc <d_print_comp_inner+0x3c8>
 80044d6:	2d04      	cmp	r5, #4
 80044d8:	f43e aaef 	beq.w	8002aba <d_print_comp_inner+0xc6>
 80044dc:	4686      	mov	lr, r0
 80044de:	f100 0b10 	add.w	fp, r0, #16
 80044e2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80044e4:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
 80044e8:	e9ce 9a01 	strd	r9, sl, [lr, #4]
 80044ec:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80044f0:	4658      	mov	r0, fp
 80044f2:	3501      	adds	r5, #1
 80044f4:	f8ce e010 	str.w	lr, [lr, #16]
 80044f8:	f8ce c00c 	str.w	ip, [lr, #12]
 80044fc:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
 8004500:	f1b9 0f00 	cmp.w	r9, #0
 8004504:	f43e aad9 	beq.w	8002aba <d_print_comp_inner+0xc6>
 8004508:	f899 1000 	ldrb.w	r1, [r9]
 800450c:	f7fe bc44 	b.w	8002d98 <d_print_comp_inner+0x3a4>
 8004510:	49d0      	ldr	r1, [pc, #832]	; (8004854 <d_print_comp_inner+0x1e60>)
 8004512:	f7fc f85d 	bl	80005d0 <d_append_string>
 8004516:	f7ff b9d2 	b.w	80038be <d_print_comp_inner+0xeca>
 800451a:	4632      	mov	r2, r6
 800451c:	2111      	movs	r1, #17
 800451e:	4620      	mov	r0, r4
 8004520:	f000 fb4e 	bl	8004bc0 <d_print_mod>
 8004524:	f7fe bb1f 	b.w	8002b66 <d_print_comp_inner+0x172>
 8004528:	29ff      	cmp	r1, #255	; 0xff
 800452a:	f000 8253 	beq.w	80049d4 <d_print_comp_inner+0x1fe0>
 800452e:	1c4b      	adds	r3, r1, #1
 8004530:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004534:	2320      	movs	r3, #32
 8004536:	5463      	strb	r3, [r4, r1]
 8004538:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800453c:	e525      	b.n	8003f8a <d_print_comp_inner+0x1596>
 800453e:	2201      	movs	r2, #1
 8004540:	e9c4 3245 	strd	r3, r2, [r4, #276]	; 0x114
 8004544:	f7fe babc 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8004548:	782a      	ldrb	r2, [r5, #0]
 800454a:	e740      	b.n	80043ce <d_print_comp_inner+0x19da>
 800454c:	460d      	mov	r5, r1
 800454e:	f7fe bb24 	b.w	8002b9a <d_print_comp_inner+0x1a6>
 8004552:	2700      	movs	r7, #0
 8004554:	5567      	strb	r7, [r4, r5]
 8004556:	4629      	mov	r1, r5
 8004558:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800455c:	4620      	mov	r0, r4
 800455e:	4798      	blx	r3
 8004560:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004564:	463d      	mov	r5, r7
 8004566:	3301      	adds	r3, #1
 8004568:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800456c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004570:	f7fe bb2e 	b.w	8002bd0 <d_print_comp_inner+0x1dc>
 8004574:	2600      	movs	r6, #0
 8004576:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800457a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800457e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004582:	4798      	blx	r3
 8004584:	2301      	movs	r3, #1
 8004586:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800458a:	4631      	mov	r1, r6
 800458c:	441a      	add	r2, r3
 800458e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004592:	f7fe bf69 	b.w	8003468 <d_print_comp_inner+0xa74>
 8004596:	2500      	movs	r5, #0
 8004598:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800459c:	4620      	mov	r0, r4
 800459e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80045a2:	4798      	blx	r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045aa:	4629      	mov	r1, r5
 80045ac:	4413      	add	r3, r2
 80045ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80045b2:	e591      	b.n	80040d8 <d_print_comp_inner+0x16e4>
 80045b4:	4620      	mov	r0, r4
 80045b6:	49a8      	ldr	r1, [pc, #672]	; (8004858 <d_print_comp_inner+0x1e64>)
 80045b8:	f7fc f80a 	bl	80005d0 <d_append_string>
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	49a7      	ldr	r1, [pc, #668]	; (800485c <d_print_comp_inner+0x1e68>)
 80045c0:	3201      	adds	r2, #1
 80045c2:	a802      	add	r0, sp, #8
 80045c4:	f007 fc2e 	bl	800be24 <siprintf>
 80045c8:	a802      	add	r0, sp, #8
 80045ca:	f001 fdb5 	bl	8006138 <strlen>
 80045ce:	4681      	mov	r9, r0
 80045d0:	b318      	cbz	r0, 800461a <d_print_comp_inner+0x1c26>
 80045d2:	ad02      	add	r5, sp, #8
 80045d4:	f04f 0800 	mov.w	r8, #0
 80045d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045dc:	44a9      	add	r9, r5
 80045de:	e008      	b.n	80045f2 <d_print_comp_inner+0x1bfe>
 80045e0:	460b      	mov	r3, r1
 80045e2:	3101      	adds	r1, #1
 80045e4:	45a9      	cmp	r9, r5
 80045e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045ea:	54e6      	strb	r6, [r4, r3]
 80045ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80045f0:	d013      	beq.n	800461a <d_print_comp_inner+0x1c26>
 80045f2:	29ff      	cmp	r1, #255	; 0xff
 80045f4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80045f8:	d1f2      	bne.n	80045e0 <d_print_comp_inner+0x1bec>
 80045fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004602:	4620      	mov	r0, r4
 8004604:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004608:	4798      	blx	r3
 800460a:	2101      	movs	r1, #1
 800460c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004610:	2300      	movs	r3, #0
 8004612:	440a      	add	r2, r1
 8004614:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004618:	e7e4      	b.n	80045e4 <d_print_comp_inner+0x1bf0>
 800461a:	4620      	mov	r0, r4
 800461c:	4990      	ldr	r1, [pc, #576]	; (8004860 <d_print_comp_inner+0x1e6c>)
 800461e:	f7fb ffd7 	bl	80005d0 <d_append_string>
 8004622:	68ff      	ldr	r7, [r7, #12]
 8004624:	e4a6      	b.n	8003f74 <d_print_comp_inner+0x1580>
 8004626:	2500      	movs	r5, #0
 8004628:	4619      	mov	r1, r3
 800462a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800462e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004632:	4620      	mov	r0, r4
 8004634:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004638:	4798      	blx	r3
 800463a:	2201      	movs	r2, #1
 800463c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8004640:	462b      	mov	r3, r5
 8004642:	4411      	add	r1, r2
 8004644:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8004648:	f7ff bb08 	b.w	8003c5c <d_print_comp_inner+0x1268>
 800464c:	2500      	movs	r5, #0
 800464e:	4619      	mov	r1, r3
 8004650:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004654:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004658:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800465c:	4798      	blx	r3
 800465e:	2101      	movs	r1, #1
 8004660:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004664:	462b      	mov	r3, r5
 8004666:	440a      	add	r2, r1
 8004668:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800466c:	f7fe bc8c 	b.w	8002f88 <d_print_comp_inner+0x594>
 8004670:	2500      	movs	r5, #0
 8004672:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004676:	4620      	mov	r0, r4
 8004678:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800467c:	4798      	blx	r3
 800467e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004682:	4629      	mov	r1, r5
 8004684:	3301      	adds	r3, #1
 8004686:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800468a:	2301      	movs	r3, #1
 800468c:	f7ff b906 	b.w	800389c <d_print_comp_inner+0xea8>
 8004690:	2120      	movs	r1, #32
 8004692:	4620      	mov	r0, r4
 8004694:	f7fb ff16 	bl	80004c4 <d_append_char>
 8004698:	f7ff b8fa 	b.w	8003890 <d_print_comp_inner+0xe9c>
 800469c:	2500      	movs	r5, #0
 800469e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80046a2:	4620      	mov	r0, r4
 80046a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80046a8:	4798      	blx	r3
 80046aa:	2301      	movs	r3, #1
 80046ac:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80046b0:	4629      	mov	r1, r5
 80046b2:	441a      	add	r2, r3
 80046b4:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80046b8:	f7ff b8da 	b.w	8003870 <d_print_comp_inner+0xe7c>
 80046bc:	2120      	movs	r1, #32
 80046be:	4620      	mov	r0, r4
 80046c0:	f7fb ff00 	bl	80004c4 <d_append_char>
 80046c4:	f7ff b8ce 	b.w	8003864 <d_print_comp_inner+0xe70>
 80046c8:	215b      	movs	r1, #91	; 0x5b
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7fb fefa 	bl	80004c4 <d_append_char>
 80046d0:	2111      	movs	r1, #17
 80046d2:	4620      	mov	r0, r4
 80046d4:	6932      	ldr	r2, [r6, #16]
 80046d6:	f000 fa45 	bl	8004b64 <d_print_comp>
 80046da:	215d      	movs	r1, #93	; 0x5d
 80046dc:	f7fe bfe5 	b.w	80036aa <d_print_comp_inner+0xcb6>
 80046e0:	212d      	movs	r1, #45	; 0x2d
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7fb feee 	bl	80004c4 <d_append_char>
 80046e8:	f7fe baf1 	b.w	8002cce <d_print_comp_inner+0x2da>
 80046ec:	2700      	movs	r7, #0
 80046ee:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80046f2:	4620      	mov	r0, r4
 80046f4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80046f8:	4798      	blx	r3
 80046fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046fe:	4639      	mov	r1, r7
 8004700:	3301      	adds	r3, #1
 8004702:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004706:	2301      	movs	r3, #1
 8004708:	f7fe bad7 	b.w	8002cba <d_print_comp_inner+0x2c6>
 800470c:	2700      	movs	r7, #0
 800470e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004712:	4620      	mov	r0, r4
 8004714:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004718:	4798      	blx	r3
 800471a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800471e:	4639      	mov	r1, r7
 8004720:	3301      	adds	r3, #1
 8004722:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004726:	68f2      	ldr	r2, [r6, #12]
 8004728:	2301      	movs	r3, #1
 800472a:	f7fe bab6 	b.w	8002c9a <d_print_comp_inner+0x2a6>
 800472e:	6931      	ldr	r1, [r6, #16]
 8004730:	7809      	ldrb	r1, [r1, #0]
 8004732:	2900      	cmp	r1, #0
 8004734:	f47e aaab 	bne.w	8002c8e <d_print_comp_inner+0x29a>
 8004738:	2b3e      	cmp	r3, #62	; 0x3e
 800473a:	f000 81fa 	beq.w	8004b32 <d_print_comp_inner+0x213e>
 800473e:	2111      	movs	r1, #17
 8004740:	4620      	mov	r0, r4
 8004742:	6932      	ldr	r2, [r6, #16]
 8004744:	3d02      	subs	r5, #2
 8004746:	f000 fa0d 	bl	8004b64 <d_print_comp>
 800474a:	2d04      	cmp	r5, #4
 800474c:	f63e a9b8 	bhi.w	8002ac0 <d_print_comp_inner+0xcc>
 8004750:	e8df f005 	tbb	[pc, r5]
 8004754:	06090c0f 	.word	0x06090c0f
 8004758:	03          	.byte	0x03
 8004759:	00          	.byte	0x00
 800475a:	4620      	mov	r0, r4
 800475c:	4941      	ldr	r1, [pc, #260]	; (8004864 <d_print_comp_inner+0x1e70>)
 800475e:	e537      	b.n	80041d0 <d_print_comp_inner+0x17dc>
 8004760:	4620      	mov	r0, r4
 8004762:	4941      	ldr	r1, [pc, #260]	; (8004868 <d_print_comp_inner+0x1e74>)
 8004764:	e534      	b.n	80041d0 <d_print_comp_inner+0x17dc>
 8004766:	4620      	mov	r0, r4
 8004768:	4940      	ldr	r1, [pc, #256]	; (800486c <d_print_comp_inner+0x1e78>)
 800476a:	e531      	b.n	80041d0 <d_print_comp_inner+0x17dc>
 800476c:	216c      	movs	r1, #108	; 0x6c
 800476e:	f7fe bf9c 	b.w	80036aa <d_print_comp_inner+0xcb6>
 8004772:	2175      	movs	r1, #117	; 0x75
 8004774:	f7fe bf99 	b.w	80036aa <d_print_comp_inner+0xcb6>
 8004778:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
 800477c:	f1bc 0f00 	cmp.w	ip, #0
 8004780:	f340 81a9 	ble.w	8004ad6 <d_print_comp_inner+0x20e2>
 8004784:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004788:	462b      	mov	r3, r5
 800478a:	4670      	mov	r0, lr
 800478c:	e004      	b.n	8004798 <d_print_comp_inner+0x1da4>
 800478e:	4563      	cmp	r3, ip
 8004790:	f100 0008 	add.w	r0, r0, #8
 8004794:	f000 819f 	beq.w	8004ad6 <d_print_comp_inner+0x20e2>
 8004798:	f85e 2033 	ldr.w	r2, [lr, r3, lsl #3]
 800479c:	3301      	adds	r3, #1
 800479e:	4291      	cmp	r1, r2
 80047a0:	d1f5      	bne.n	800478e <d_print_comp_inner+0x1d9a>
 80047a2:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 80047a6:	4663      	mov	r3, ip
 80047a8:	f1bc 0f00 	cmp.w	ip, #0
 80047ac:	d104      	bne.n	80047b8 <d_print_comp_inner+0x1dc4>
 80047ae:	e0f9      	b.n	80049a4 <d_print_comp_inner+0x1fb0>
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80f6 	beq.w	80049a4 <d_print_comp_inner+0x1fb0>
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	428a      	cmp	r2, r1
 80047bc:	d003      	beq.n	80047c6 <d_print_comp_inner+0x1dd2>
 80047be:	42b2      	cmp	r2, r6
 80047c0:	d1f6      	bne.n	80047b0 <d_print_comp_inner+0x1dbc>
 80047c2:	459c      	cmp	ip, r3
 80047c4:	d0f4      	beq.n	80047b0 <d_print_comp_inner+0x1dbc>
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7fb fe9e 	bl	8000508 <d_lookup_template_argument>
 80047cc:	4601      	mov	r1, r0
 80047ce:	2800      	cmp	r0, #0
 80047d0:	f43e a973 	beq.w	8002aba <d_print_comp_inner+0xc6>
 80047d4:	780b      	ldrb	r3, [r1, #0]
 80047d6:	2b2f      	cmp	r3, #47	; 0x2f
 80047d8:	f47e a9d3 	bne.w	8002b82 <d_print_comp_inner+0x18e>
 80047dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f6ff acd3 	blt.w	800418c <d_print_comp_inner+0x1798>
 80047e6:	4608      	mov	r0, r1
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fb fe05 	bl	80003f8 <d_index_template_argument.part.0>
 80047ee:	4601      	mov	r1, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f47f ad78 	bne.w	80042e6 <d_print_comp_inner+0x18f2>
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	f43e a95f 	beq.w	8002aba <d_print_comp_inner+0xc6>
 80047fc:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8004800:	f7fe b95b 	b.w	8002aba <d_print_comp_inner+0xc6>
 8004804:	6933      	ldr	r3, [r6, #16]
 8004806:	f7fe bf1e 	b.w	8003646 <d_print_comp_inner+0xc52>
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004810:	2901      	cmp	r1, #1
 8004812:	d903      	bls.n	800481c <d_print_comp_inner+0x1e28>
 8004814:	3b72      	subs	r3, #114	; 0x72
 8004816:	2b01      	cmp	r3, #1
 8004818:	f63e aef4 	bhi.w	8003604 <d_print_comp_inner+0xc10>
 800481c:	2111      	movs	r1, #17
 800481e:	4620      	mov	r0, r4
 8004820:	f001 f892 	bl	8005948 <d_print_expr_op>
 8004824:	213c      	movs	r1, #60	; 0x3c
 8004826:	4620      	mov	r0, r4
 8004828:	f7fb fe4c 	bl	80004c4 <d_append_char>
 800482c:	6933      	ldr	r3, [r6, #16]
 800482e:	2111      	movs	r1, #17
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	4620      	mov	r0, r4
 8004834:	f000 f996 	bl	8004b64 <d_print_comp>
 8004838:	4620      	mov	r0, r4
 800483a:	490d      	ldr	r1, [pc, #52]	; (8004870 <d_print_comp_inner+0x1e7c>)
 800483c:	f7fb fec8 	bl	80005d0 <d_append_string>
 8004840:	6933      	ldr	r3, [r6, #16]
 8004842:	2111      	movs	r1, #17
 8004844:	4620      	mov	r0, r4
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	f000 f98c 	bl	8004b64 <d_print_comp>
 800484c:	2129      	movs	r1, #41	; 0x29
 800484e:	f7fe bf2c 	b.w	80036aa <d_print_comp_inner+0xcb6>
 8004852:	bf00      	nop
 8004854:	0800fb80 	.word	0x0800fb80
 8004858:	0800f9fc 	.word	0x0800f9fc
 800485c:	0800f988 	.word	0x0800f988
 8004860:	0800fa0c 	.word	0x0800fa0c
 8004864:	0800fbd0 	.word	0x0800fbd0
 8004868:	0800fbcc 	.word	0x0800fbcc
 800486c:	0800fbc8 	.word	0x0800fbc8
 8004870:	0800fbb4 	.word	0x0800fbb4
 8004874:	68ca      	ldr	r2, [r1, #12]
 8004876:	f7fe b927 	b.w	8002ac8 <d_print_comp_inner+0xd4>
 800487a:	2963      	cmp	r1, #99	; 0x63
 800487c:	f000 80b9 	beq.w	80049f2 <d_print_comp_inner+0x1ffe>
 8004880:	2111      	movs	r1, #17
 8004882:	4620      	mov	r0, r4
 8004884:	f001 f860 	bl	8005948 <d_print_expr_op>
 8004888:	6933      	ldr	r3, [r6, #16]
 800488a:	2111      	movs	r1, #17
 800488c:	4620      	mov	r0, r4
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	f001 fa3c 	bl	8005d0c <d_print_subexpr>
 8004894:	f7fe bef9 	b.w	800368a <d_print_comp_inner+0xc96>
 8004898:	4619      	mov	r1, r3
 800489a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800489e:	4620      	mov	r0, r4
 80048a0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048a4:	4798      	blx	r3
 80048a6:	2001      	movs	r0, #1
 80048a8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80048ac:	4633      	mov	r3, r6
 80048ae:	4402      	add	r2, r0
 80048b0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80048b4:	e43c      	b.n	8004130 <d_print_comp_inner+0x173c>
 80048b6:	4632      	mov	r2, r6
 80048b8:	49a6      	ldr	r1, [pc, #664]	; (8004b54 <d_print_comp_inner+0x2160>)
 80048ba:	a802      	add	r0, sp, #8
 80048bc:	f007 fab2 	bl	800be24 <siprintf>
 80048c0:	a802      	add	r0, sp, #8
 80048c2:	f001 fc39 	bl	8006138 <strlen>
 80048c6:	4607      	mov	r7, r0
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f43e a8f9 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 80048ce:	ad02      	add	r5, sp, #8
 80048d0:	f04f 0800 	mov.w	r8, #0
 80048d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048d8:	442f      	add	r7, r5
 80048da:	e009      	b.n	80048f0 <d_print_comp_inner+0x1efc>
 80048dc:	460b      	mov	r3, r1
 80048de:	3101      	adds	r1, #1
 80048e0:	42af      	cmp	r7, r5
 80048e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80048e6:	54e6      	strb	r6, [r4, r3]
 80048e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80048ec:	f43e a8e8 	beq.w	8002ac0 <d_print_comp_inner+0xcc>
 80048f0:	29ff      	cmp	r1, #255	; 0xff
 80048f2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80048f6:	d1f1      	bne.n	80048dc <d_print_comp_inner+0x1ee8>
 80048f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004900:	4620      	mov	r0, r4
 8004902:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004906:	4798      	blx	r3
 8004908:	2101      	movs	r1, #1
 800490a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800490e:	2300      	movs	r3, #0
 8004910:	440a      	add	r2, r1
 8004912:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004916:	e7e3      	b.n	80048e0 <d_print_comp_inner+0x1eec>
 8004918:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 800491c:	2900      	cmp	r1, #0
 800491e:	f6ff acf0 	blt.w	8004302 <d_print_comp_inner+0x190e>
 8004922:	f7fb fd69 	bl	80003f8 <d_index_template_argument.part.0>
 8004926:	4602      	mov	r2, r0
 8004928:	2800      	cmp	r0, #0
 800492a:	f47f acea 	bne.w	8004302 <d_print_comp_inner+0x190e>
 800492e:	f7fe b8c4 	b.w	8002aba <d_print_comp_inner+0xc6>
 8004932:	2500      	movs	r5, #0
 8004934:	4619      	mov	r1, r3
 8004936:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800493a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800493e:	4620      	mov	r0, r4
 8004940:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004944:	4798      	blx	r3
 8004946:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800494a:	462b      	mov	r3, r5
 800494c:	3201      	adds	r2, #1
 800494e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004952:	f7fe bfc3 	b.w	80038dc <d_print_comp_inner+0xee8>
 8004956:	2111      	movs	r1, #17
 8004958:	4620      	mov	r0, r4
 800495a:	68f2      	ldr	r2, [r6, #12]
 800495c:	f001 f9d6 	bl	8005d0c <d_print_subexpr>
 8004960:	4620      	mov	r0, r4
 8004962:	497d      	ldr	r1, [pc, #500]	; (8004b58 <d_print_comp_inner+0x2164>)
 8004964:	e434      	b.n	80041d0 <d_print_comp_inner+0x17dc>
 8004966:	2500      	movs	r5, #0
 8004968:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800496c:	4620      	mov	r0, r4
 800496e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004972:	4798      	blx	r3
 8004974:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004978:	4629      	mov	r1, r5
 800497a:	3301      	adds	r3, #1
 800497c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004980:	e4a7      	b.n	80042d2 <d_print_comp_inner+0x18de>
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	6891      	ldr	r1, [r2, #8]
 8004986:	2901      	cmp	r1, #1
 8004988:	f47e ae49 	bne.w	800361e <d_print_comp_inner+0xc2a>
 800498c:	6852      	ldr	r2, [r2, #4]
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	2a3e      	cmp	r2, #62	; 0x3e
 8004992:	f47e ae44 	bne.w	800361e <d_print_comp_inner+0xc2a>
 8004996:	2128      	movs	r1, #40	; 0x28
 8004998:	4620      	mov	r0, r4
 800499a:	f7fb fd93 	bl	80004c4 <d_append_char>
 800499e:	68f3      	ldr	r3, [r6, #12]
 80049a0:	f7fe be3d 	b.w	800361e <d_print_comp_inner+0xc2a>
 80049a4:	6843      	ldr	r3, [r0, #4]
 80049a6:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 80049aa:	4620      	mov	r0, r4
 80049ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80049b0:	f7fb fdaa 	bl	8000508 <d_lookup_template_argument>
 80049b4:	4601      	mov	r1, r0
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f43f af20 	beq.w	80047fc <d_print_comp_inner+0x1e08>
 80049bc:	2501      	movs	r5, #1
 80049be:	e709      	b.n	80047d4 <d_print_comp_inner+0x1de0>
 80049c0:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80049c4:	f1b9 0f00 	cmp.w	r9, #0
 80049c8:	f43e a877 	beq.w	8002aba <d_print_comp_inner+0xc6>
 80049cc:	f899 1000 	ldrb.w	r1, [r9]
 80049d0:	f7fe b9de 	b.w	8002d90 <d_print_comp_inner+0x39c>
 80049d4:	2500      	movs	r5, #0
 80049d6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80049da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049de:	4620      	mov	r0, r4
 80049e0:	4798      	blx	r3
 80049e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80049e6:	4629      	mov	r1, r5
 80049e8:	3301      	adds	r3, #1
 80049ea:	687d      	ldr	r5, [r7, #4]
 80049ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80049f0:	e59d      	b.n	800452e <d_print_comp_inner+0x1b3a>
 80049f2:	7859      	ldrb	r1, [r3, #1]
 80049f4:	296c      	cmp	r1, #108	; 0x6c
 80049f6:	f47f af43 	bne.w	8004880 <d_print_comp_inner+0x1e8c>
 80049fa:	789b      	ldrb	r3, [r3, #2]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f43f af43 	beq.w	8004888 <d_print_comp_inner+0x1e94>
 8004a02:	e73d      	b.n	8004880 <d_print_comp_inner+0x1e8c>
 8004a04:	2600      	movs	r6, #0
 8004a06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a10:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004a14:	4798      	blx	r3
 8004a16:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004a22:	f7ff b953 	b.w	8003ccc <d_print_comp_inner+0x12d8>
 8004a26:	2600      	movs	r6, #0
 8004a28:	4619      	mov	r1, r3
 8004a2a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8004a2e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004a32:	4798      	blx	r3
 8004a34:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004a38:	4633      	mov	r3, r6
 8004a3a:	3201      	adds	r2, #1
 8004a3c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004a40:	f7ff b933 	b.w	8003caa <d_print_comp_inner+0x12b6>
 8004a44:	4620      	mov	r0, r4
 8004a46:	4945      	ldr	r1, [pc, #276]	; (8004b5c <d_print_comp_inner+0x2168>)
 8004a48:	f7fb fdc2 	bl	80005d0 <d_append_string>
 8004a4c:	68f3      	ldr	r3, [r6, #12]
 8004a4e:	b143      	cbz	r3, 8004a62 <d_print_comp_inner+0x206e>
 8004a50:	2111      	movs	r1, #17
 8004a52:	4620      	mov	r0, r4
 8004a54:	4632      	mov	r2, r6
 8004a56:	f001 f959 	bl	8005d0c <d_print_subexpr>
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7fb fd31 	bl	80004c4 <d_append_char>
 8004a62:	463a      	mov	r2, r7
 8004a64:	2111      	movs	r1, #17
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f87c 	bl	8004b64 <d_print_comp>
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	f47e a9f3 	bne.w	8002e58 <d_print_comp_inner+0x464>
 8004a72:	f7fe b825 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8004a76:	68ea      	ldr	r2, [r5, #12]
 8004a78:	7811      	ldrb	r1, [r2, #0]
 8004a7a:	2901      	cmp	r1, #1
 8004a7c:	f47f acaa 	bne.w	80043d4 <d_print_comp_inner+0x19e0>
 8004a80:	6929      	ldr	r1, [r5, #16]
 8004a82:	7809      	ldrb	r1, [r1, #0]
 8004a84:	2929      	cmp	r1, #41	; 0x29
 8004a86:	bf08      	it	eq
 8004a88:	4615      	moveq	r5, r2
 8004a8a:	e4a3      	b.n	80043d4 <d_print_comp_inner+0x19e0>
 8004a8c:	6913      	ldr	r3, [r2, #16]
 8004a8e:	2111      	movs	r1, #17
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4620      	mov	r0, r4
 8004a94:	2b29      	cmp	r3, #41	; 0x29
 8004a96:	bf18      	it	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	68d2      	ldr	r2, [r2, #12]
 8004a9c:	bf18      	it	ne
 8004a9e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8004aa2:	f001 f933 	bl	8005d0c <d_print_subexpr>
 8004aa6:	f7fe bdd3 	b.w	8003650 <d_print_comp_inner+0xc5c>
 8004aaa:	2111      	movs	r1, #17
 8004aac:	4620      	mov	r0, r4
 8004aae:	68ea      	ldr	r2, [r5, #12]
 8004ab0:	f001 f92c 	bl	8005d0c <d_print_subexpr>
 8004ab4:	463a      	mov	r2, r7
 8004ab6:	2111      	movs	r1, #17
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7ff b912 	b.w	8003ce2 <d_print_comp_inner+0x12ee>
 8004abe:	2111      	movs	r1, #17
 8004ac0:	6932      	ldr	r2, [r6, #16]
 8004ac2:	f000 f84f 	bl	8004b64 <d_print_comp>
 8004ac6:	9b04      	ldr	r3, [sp, #16]
 8004ac8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f43e ad50 	beq.w	8003572 <d_print_comp_inner+0xb7e>
 8004ad2:	f7fd bff5 	b.w	8002ac0 <d_print_comp_inner+0xcc>
 8004ad6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8004ada:	4563      	cmp	r3, ip
 8004adc:	f77d afed 	ble.w	8002aba <d_print_comp_inner+0xc6>
 8004ae0:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8004ae4:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
 8004ae8:	eb02 03cc 	add.w	r3, r2, ip, lsl #3
 8004aec:	f10c 0001 	add.w	r0, ip, #1
 8004af0:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8004af4:	3304      	adds	r3, #4
 8004af6:	f842 103c 	str.w	r1, [r2, ip, lsl #3]
 8004afa:	f1be 0f00 	cmp.w	lr, #0
 8004afe:	d01c      	beq.n	8004b3a <d_print_comp_inner+0x2146>
 8004b00:	e9d4 2c50 	ldrd	r2, ip, [r4, #320]	; 0x140
 8004b04:	e011      	b.n	8004b2a <d_print_comp_inner+0x2136>
 8004b06:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8004b0a:	f8de 8004 	ldr.w	r8, [lr, #4]
 8004b0e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8004b12:	3201      	adds	r2, #1
 8004b14:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
 8004b18:	f8c0 8004 	str.w	r8, [r0, #4]
 8004b1c:	6018      	str	r0, [r3, #0]
 8004b1e:	f8de e000 	ldr.w	lr, [lr]
 8004b22:	4603      	mov	r3, r0
 8004b24:	f1be 0f00 	cmp.w	lr, #0
 8004b28:	d007      	beq.n	8004b3a <d_print_comp_inner+0x2146>
 8004b2a:	4562      	cmp	r2, ip
 8004b2c:	dbeb      	blt.n	8004b06 <d_print_comp_inner+0x2112>
 8004b2e:	f7fd bfc4 	b.w	8002aba <d_print_comp_inner+0xc6>
 8004b32:	212d      	movs	r1, #45	; 0x2d
 8004b34:	f7fb fcc6 	bl	80004c4 <d_append_char>
 8004b38:	e601      	b.n	800473e <d_print_comp_inner+0x1d4a>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e642      	b.n	80047c6 <d_print_comp_inner+0x1dd2>
 8004b40:	4620      	mov	r0, r4
 8004b42:	4907      	ldr	r1, [pc, #28]	; (8004b60 <d_print_comp_inner+0x216c>)
 8004b44:	f7ff bb44 	b.w	80041d0 <d_print_comp_inner+0x17dc>
 8004b48:	463a      	mov	r2, r7
 8004b4a:	2111      	movs	r1, #17
 8004b4c:	f000 fefc 	bl	8005948 <d_print_expr_op>
 8004b50:	f7fe b982 	b.w	8002e58 <d_print_comp_inner+0x464>
 8004b54:	0800f988 	.word	0x0800f988
 8004b58:	0800fc00 	.word	0x0800fc00
 8004b5c:	0800fbc0 	.word	0x0800fbc0
 8004b60:	0800fbd4 	.word	0x0800fbd4

08004b64 <d_print_comp>:
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	4605      	mov	r5, r0
 8004b68:	b083      	sub	sp, #12
 8004b6a:	b31a      	cbz	r2, 8004bb4 <d_print_comp+0x50>
 8004b6c:	6853      	ldr	r3, [r2, #4]
 8004b6e:	4614      	mov	r4, r2
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	dc1f      	bgt.n	8004bb4 <d_print_comp+0x50>
 8004b74:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8004b78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b7c:	dc1a      	bgt.n	8004bb4 <d_print_comp+0x50>
 8004b7e:	3301      	adds	r3, #1
 8004b80:	6053      	str	r3, [r2, #4]
 8004b82:	3101      	adds	r1, #1
 8004b84:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8004b88:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 8004b8c:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
 8004b90:	2111      	movs	r1, #17
 8004b92:	e9cd 2300 	strd	r2, r3, [sp]
 8004b96:	f7fd ff2d 	bl	80029f4 <d_print_comp_inner>
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8004ba0:	9901      	ldr	r1, [sp, #4]
 8004ba2:	3a01      	subs	r2, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
 8004baa:	6062      	str	r2, [r4, #4]
 8004bac:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8004bb0:	b003      	add	sp, #12
 8004bb2:	bd30      	pop	{r4, r5, pc}
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8004bba:	b003      	add	sp, #12
 8004bbc:	bd30      	pop	{r4, r5, pc}
 8004bbe:	bf00      	nop

08004bc0 <d_print_mod>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	7813      	ldrb	r3, [r2, #0]
 8004bc6:	4615      	mov	r5, r2
 8004bc8:	3b03      	subs	r3, #3
 8004bca:	4604      	mov	r4, r0
 8004bcc:	2b4d      	cmp	r3, #77	; 0x4d
 8004bce:	d84f      	bhi.n	8004c70 <d_print_mod+0xb0>
 8004bd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004bd4:	004e011a 	.word	0x004e011a
 8004bd8:	004e004e 	.word	0x004e004e
 8004bdc:	004e004e 	.word	0x004e004e
 8004be0:	004e004e 	.word	0x004e004e
 8004be4:	004e004e 	.word	0x004e004e
 8004be8:	004e004e 	.word	0x004e004e
 8004bec:	004e004e 	.word	0x004e004e
 8004bf0:	004e004e 	.word	0x004e004e
 8004bf4:	004e004e 	.word	0x004e004e
 8004bf8:	004e004e 	.word	0x004e004e
 8004bfc:	004e004e 	.word	0x004e004e
 8004c00:	007a0053 	.word	0x007a0053
 8004c04:	005300a1 	.word	0x005300a1
 8004c08:	00a1007a 	.word	0x00a1007a
 8004c0c:	00fb00ee 	.word	0x00fb00ee
 8004c10:	02990108 	.word	0x02990108
 8004c14:	012d011f 	.word	0x012d011f
 8004c18:	01780152 	.word	0x01780152
 8004c1c:	004e004e 	.word	0x004e004e
 8004c20:	004e004e 	.word	0x004e004e
 8004c24:	004e019e 	.word	0x004e019e
 8004c28:	004e01ce 	.word	0x004e01ce
 8004c2c:	004e004e 	.word	0x004e004e
 8004c30:	004e004e 	.word	0x004e004e
 8004c34:	004e004e 	.word	0x004e004e
 8004c38:	004e004e 	.word	0x004e004e
 8004c3c:	004e004e 	.word	0x004e004e
 8004c40:	004e004e 	.word	0x004e004e
 8004c44:	004e004e 	.word	0x004e004e
 8004c48:	004e004e 	.word	0x004e004e
 8004c4c:	004e004e 	.word	0x004e004e
 8004c50:	004e004e 	.word	0x004e004e
 8004c54:	004e004e 	.word	0x004e004e
 8004c58:	004e004e 	.word	0x004e004e
 8004c5c:	004e004e 	.word	0x004e004e
 8004c60:	004e004e 	.word	0x004e004e
 8004c64:	004e004e 	.word	0x004e004e
 8004c68:	004e01f5 	.word	0x004e01f5
 8004c6c:	00c60230 	.word	0x00c60230
 8004c70:	462a      	mov	r2, r5
 8004c72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c76:	2111      	movs	r1, #17
 8004c78:	e774      	b.n	8004b64 <d_print_comp>
 8004c7a:	4dd5      	ldr	r5, [pc, #852]	; (8004fd0 <d_print_mod+0x410>)
 8004c7c:	2620      	movs	r6, #32
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c86:	f105 0708 	add.w	r7, r5, #8
 8004c8a:	e00b      	b.n	8004ca4 <d_print_mod+0xe4>
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	3101      	adds	r1, #1
 8004c90:	42af      	cmp	r7, r5
 8004c92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c96:	54e6      	strb	r6, [r4, r3]
 8004c98:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004c9c:	f000 80c5 	beq.w	8004e2a <d_print_mod+0x26a>
 8004ca0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004ca4:	29ff      	cmp	r1, #255	; 0xff
 8004ca6:	d1f1      	bne.n	8004c8c <d_print_mod+0xcc>
 8004ca8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cac:	4620      	mov	r0, r4
 8004cae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004cb6:	4798      	blx	r3
 8004cb8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e7e3      	b.n	8004c90 <d_print_mod+0xd0>
 8004cc8:	4dc2      	ldr	r5, [pc, #776]	; (8004fd4 <d_print_mod+0x414>)
 8004cca:	2620      	movs	r6, #32
 8004ccc:	f04f 0800 	mov.w	r8, #0
 8004cd0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004cd4:	f105 0708 	add.w	r7, r5, #8
 8004cd8:	e00b      	b.n	8004cf2 <d_print_mod+0x132>
 8004cda:	460b      	mov	r3, r1
 8004cdc:	3101      	adds	r1, #1
 8004cde:	42af      	cmp	r7, r5
 8004ce0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ce4:	54e6      	strb	r6, [r4, r3]
 8004ce6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004cea:	f000 809e 	beq.w	8004e2a <d_print_mod+0x26a>
 8004cee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004cf2:	29ff      	cmp	r1, #255	; 0xff
 8004cf4:	d1f1      	bne.n	8004cda <d_print_mod+0x11a>
 8004cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d00:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d04:	4798      	blx	r3
 8004d06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d12:	2300      	movs	r3, #0
 8004d14:	e7e3      	b.n	8004cde <d_print_mod+0x11e>
 8004d16:	4db0      	ldr	r5, [pc, #704]	; (8004fd8 <d_print_mod+0x418>)
 8004d18:	2620      	movs	r6, #32
 8004d1a:	f04f 0800 	mov.w	r8, #0
 8004d1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d22:	1d6f      	adds	r7, r5, #5
 8004d24:	e00a      	b.n	8004d3c <d_print_mod+0x17c>
 8004d26:	460b      	mov	r3, r1
 8004d28:	3101      	adds	r1, #1
 8004d2a:	42bd      	cmp	r5, r7
 8004d2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d30:	54e6      	strb	r6, [r4, r3]
 8004d32:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004d36:	d078      	beq.n	8004e2a <d_print_mod+0x26a>
 8004d38:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004d3c:	29ff      	cmp	r1, #255	; 0xff
 8004d3e:	d1f2      	bne.n	8004d26 <d_print_mod+0x166>
 8004d40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d44:	4620      	mov	r0, r4
 8004d46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d4e:	4798      	blx	r3
 8004d50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d54:	2101      	movs	r1, #1
 8004d56:	3301      	adds	r3, #1
 8004d58:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e7e4      	b.n	8004d2a <d_print_mod+0x16a>
 8004d60:	4e9e      	ldr	r6, [pc, #632]	; (8004fdc <d_print_mod+0x41c>)
 8004d62:	2720      	movs	r7, #32
 8004d64:	f04f 0800 	mov.w	r8, #0
 8004d68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d6c:	f106 0905 	add.w	r9, r6, #5
 8004d70:	e00b      	b.n	8004d8a <d_print_mod+0x1ca>
 8004d72:	461a      	mov	r2, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	45b1      	cmp	r9, r6
 8004d78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004d7c:	54a7      	strb	r7, [r4, r2]
 8004d7e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004d82:	f000 817e 	beq.w	8005082 <d_print_mod+0x4c2>
 8004d86:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8004d8a:	2bff      	cmp	r3, #255	; 0xff
 8004d8c:	d1f1      	bne.n	8004d72 <d_print_mod+0x1b2>
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d9e:	4798      	blx	r3
 8004da0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004da4:	2200      	movs	r2, #0
 8004da6:	3301      	adds	r3, #1
 8004da8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004dac:	2301      	movs	r3, #1
 8004dae:	e7e2      	b.n	8004d76 <d_print_mod+0x1b6>
 8004db0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004db4:	2bff      	cmp	r3, #255	; 0xff
 8004db6:	f000 81e5 	beq.w	8005184 <d_print_mod+0x5c4>
 8004dba:	2220      	movs	r2, #32
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8004dc2:	54c2      	strb	r2, [r0, r3]
 8004dc4:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
 8004dc8:	e025      	b.n	8004e16 <d_print_mod+0x256>
 8004dca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004dce:	2bff      	cmp	r3, #255	; 0xff
 8004dd0:	f000 81b8 	beq.w	8005144 <d_print_mod+0x584>
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ddc:	54e2      	strb	r2, [r4, r3]
 8004dde:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004de2:	e026      	b.n	8004e32 <d_print_mod+0x272>
 8004de4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004de8:	2bff      	cmp	r3, #255	; 0xff
 8004dea:	f000 81ba 	beq.w	8005162 <d_print_mod+0x5a2>
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	2220      	movs	r2, #32
 8004df2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004df6:	54e2      	strb	r2, [r4, r3]
 8004df8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	692a      	ldr	r2, [r5, #16]
 8004e00:	2111      	movs	r1, #17
 8004e02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e06:	e6ad      	b.n	8004b64 <d_print_comp>
 8004e08:	68ea      	ldr	r2, [r5, #12]
 8004e0a:	2111      	movs	r1, #17
 8004e0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e10:	e6a8      	b.n	8004b64 <d_print_comp>
 8004e12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e16:	29ff      	cmp	r1, #255	; 0xff
 8004e18:	f000 81c4 	beq.w	80051a4 <d_print_mod+0x5e4>
 8004e1c:	1c4a      	adds	r2, r1, #1
 8004e1e:	2326      	movs	r3, #38	; 0x26
 8004e20:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e24:	5463      	strb	r3, [r4, r1]
 8004e26:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e32:	4d6b      	ldr	r5, [pc, #428]	; (8004fe0 <d_print_mod+0x420>)
 8004e34:	2626      	movs	r6, #38	; 0x26
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	1c6f      	adds	r7, r5, #1
 8004e3c:	e00a      	b.n	8004e54 <d_print_mod+0x294>
 8004e3e:	460b      	mov	r3, r1
 8004e40:	3101      	adds	r1, #1
 8004e42:	42bd      	cmp	r5, r7
 8004e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e48:	54e6      	strb	r6, [r4, r3]
 8004e4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e4e:	d0ec      	beq.n	8004e2a <d_print_mod+0x26a>
 8004e50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e54:	29ff      	cmp	r1, #255	; 0xff
 8004e56:	d1f2      	bne.n	8004e3e <d_print_mod+0x27e>
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004e74:	2300      	movs	r3, #0
 8004e76:	e7e4      	b.n	8004e42 <d_print_mod+0x282>
 8004e78:	4d5a      	ldr	r5, [pc, #360]	; (8004fe4 <d_print_mod+0x424>)
 8004e7a:	2620      	movs	r6, #32
 8004e7c:	f04f 0800 	mov.w	r8, #0
 8004e80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e84:	f105 0708 	add.w	r7, r5, #8
 8004e88:	e00a      	b.n	8004ea0 <d_print_mod+0x2e0>
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	42bd      	cmp	r5, r7
 8004e90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e94:	54e6      	strb	r6, [r4, r3]
 8004e96:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e9a:	d0c6      	beq.n	8004e2a <d_print_mod+0x26a>
 8004e9c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004ea0:	29ff      	cmp	r1, #255	; 0xff
 8004ea2:	d1f2      	bne.n	8004e8a <d_print_mod+0x2ca>
 8004ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004eb2:	4798      	blx	r3
 8004eb4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004eb8:	2101      	movs	r1, #1
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e7e4      	b.n	8004e8e <d_print_mod+0x2ce>
 8004ec4:	4d48      	ldr	r5, [pc, #288]	; (8004fe8 <d_print_mod+0x428>)
 8004ec6:	2620      	movs	r6, #32
 8004ec8:	f04f 0800 	mov.w	r8, #0
 8004ecc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004ed0:	f105 070a 	add.w	r7, r5, #10
 8004ed4:	e00a      	b.n	8004eec <d_print_mod+0x32c>
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	3101      	adds	r1, #1
 8004eda:	42bd      	cmp	r5, r7
 8004edc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ee0:	54e6      	strb	r6, [r4, r3]
 8004ee2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004ee6:	d0a0      	beq.n	8004e2a <d_print_mod+0x26a>
 8004ee8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004eec:	29ff      	cmp	r1, #255	; 0xff
 8004eee:	d1f2      	bne.n	8004ed6 <d_print_mod+0x316>
 8004ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004efa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004efe:	4798      	blx	r3
 8004f00:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f04:	2101      	movs	r1, #1
 8004f06:	3301      	adds	r3, #1
 8004f08:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e7e4      	b.n	8004eda <d_print_mod+0x31a>
 8004f10:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8004f14:	2b28      	cmp	r3, #40	; 0x28
 8004f16:	f040 80ea 	bne.w	80050ee <d_print_mod+0x52e>
 8004f1a:	68ea      	ldr	r2, [r5, #12]
 8004f1c:	4d33      	ldr	r5, [pc, #204]	; (8004fec <d_print_mod+0x42c>)
 8004f1e:	2111      	movs	r1, #17
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff fe1f 	bl	8004b64 <d_print_comp>
 8004f26:	263a      	movs	r6, #58	; 0x3a
 8004f28:	2700      	movs	r7, #0
 8004f2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004f2e:	f105 0802 	add.w	r8, r5, #2
 8004f32:	e00b      	b.n	8004f4c <d_print_mod+0x38c>
 8004f34:	460b      	mov	r3, r1
 8004f36:	3101      	adds	r1, #1
 8004f38:	45a8      	cmp	r8, r5
 8004f3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f3e:	54e6      	strb	r6, [r4, r3]
 8004f40:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004f44:	f43f af71 	beq.w	8004e2a <d_print_mod+0x26a>
 8004f48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004f4c:	29ff      	cmp	r1, #255	; 0xff
 8004f4e:	d1f1      	bne.n	8004f34 <d_print_mod+0x374>
 8004f50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f54:	4620      	mov	r0, r4
 8004f56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f5a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004f5e:	4798      	blx	r3
 8004f60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f64:	2101      	movs	r1, #1
 8004f66:	3301      	adds	r3, #1
 8004f68:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e7e3      	b.n	8004f38 <d_print_mod+0x378>
 8004f70:	4e1f      	ldr	r6, [pc, #124]	; (8004ff0 <d_print_mod+0x430>)
 8004f72:	2720      	movs	r7, #32
 8004f74:	f04f 0800 	mov.w	r8, #0
 8004f78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f7c:	f106 0909 	add.w	r9, r6, #9
 8004f80:	e00b      	b.n	8004f9a <d_print_mod+0x3da>
 8004f82:	460b      	mov	r3, r1
 8004f84:	3101      	adds	r1, #1
 8004f86:	45b1      	cmp	r9, r6
 8004f88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f8c:	54e7      	strb	r7, [r4, r3]
 8004f8e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004f92:	f000 809a 	beq.w	80050ca <d_print_mod+0x50a>
 8004f96:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8004f9a:	29ff      	cmp	r1, #255	; 0xff
 8004f9c:	d1f1      	bne.n	8004f82 <d_print_mod+0x3c2>
 8004f9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fa8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004fac:	4798      	blx	r3
 8004fae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e7e3      	b.n	8004f86 <d_print_mod+0x3c6>
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <d_print_mod+0x434>)
 8004fc0:	2620      	movs	r6, #32
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004fca:	f105 0710 	add.w	r7, r5, #16
 8004fce:	e01f      	b.n	8005010 <d_print_mod+0x450>
 8004fd0:	0800fc80 	.word	0x0800fc80
 8004fd4:	0800fc8c 	.word	0x0800fc8c
 8004fd8:	0800fc98 	.word	0x0800fc98
 8004fdc:	0800fcc0 	.word	0x0800fcc0
 8004fe0:	0800fcc8 	.word	0x0800fcc8
 8004fe4:	0800fccc 	.word	0x0800fccc
 8004fe8:	0800fcd8 	.word	0x0800fcd8
 8004fec:	0800fce4 	.word	0x0800fce4
 8004ff0:	0800fce8 	.word	0x0800fce8
 8004ff4:	0800fca0 	.word	0x0800fca0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	3101      	adds	r1, #1
 8004ffc:	42af      	cmp	r7, r5
 8004ffe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005002:	54e6      	strb	r6, [r4, r3]
 8005004:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005008:	f43f af0f 	beq.w	8004e2a <d_print_mod+0x26a>
 800500c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005010:	29ff      	cmp	r1, #255	; 0xff
 8005012:	d1f1      	bne.n	8004ff8 <d_print_mod+0x438>
 8005014:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005018:	4620      	mov	r0, r4
 800501a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005022:	4798      	blx	r3
 8005024:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005028:	2101      	movs	r1, #1
 800502a:	3301      	adds	r3, #1
 800502c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005030:	2300      	movs	r3, #0
 8005032:	e7e3      	b.n	8004ffc <d_print_mod+0x43c>
 8005034:	4e72      	ldr	r6, [pc, #456]	; (8005200 <d_print_mod+0x640>)
 8005036:	2720      	movs	r7, #32
 8005038:	f04f 0800 	mov.w	r8, #0
 800503c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005040:	f106 0908 	add.w	r9, r6, #8
 8005044:	e00a      	b.n	800505c <d_print_mod+0x49c>
 8005046:	461a      	mov	r2, r3
 8005048:	3301      	adds	r3, #1
 800504a:	454e      	cmp	r6, r9
 800504c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005050:	54a7      	strb	r7, [r4, r2]
 8005052:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005056:	d014      	beq.n	8005082 <d_print_mod+0x4c2>
 8005058:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800505c:	2bff      	cmp	r3, #255	; 0xff
 800505e:	d1f2      	bne.n	8005046 <d_print_mod+0x486>
 8005060:	4619      	mov	r1, r3
 8005062:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005066:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800506a:	4620      	mov	r0, r4
 800506c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005070:	4798      	blx	r3
 8005072:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005076:	2200      	movs	r2, #0
 8005078:	3301      	adds	r3, #1
 800507a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800507e:	2301      	movs	r3, #1
 8005080:	e7e3      	b.n	800504a <d_print_mod+0x48a>
 8005082:	692a      	ldr	r2, [r5, #16]
 8005084:	2a00      	cmp	r2, #0
 8005086:	f43f aed0 	beq.w	8004e2a <d_print_mod+0x26a>
 800508a:	2bff      	cmp	r3, #255	; 0xff
 800508c:	d047      	beq.n	800511e <d_print_mod+0x55e>
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	2528      	movs	r5, #40	; 0x28
 8005092:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005096:	4620      	mov	r0, r4
 8005098:	2111      	movs	r1, #17
 800509a:	54e5      	strb	r5, [r4, r3]
 800509c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80050a0:	f7ff fd60 	bl	8004b64 <d_print_comp>
 80050a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80050a8:	29ff      	cmp	r1, #255	; 0xff
 80050aa:	d117      	bne.n	80050dc <d_print_mod+0x51c>
 80050ac:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80050b0:	2500      	movs	r5, #0
 80050b2:	4620      	mov	r0, r4
 80050b4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80050b8:	4798      	blx	r3
 80050ba:	2201      	movs	r2, #1
 80050bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050c0:	4629      	mov	r1, r5
 80050c2:	4413      	add	r3, r2
 80050c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80050c8:	e009      	b.n	80050de <d_print_mod+0x51e>
 80050ca:	2111      	movs	r1, #17
 80050cc:	4620      	mov	r0, r4
 80050ce:	68ea      	ldr	r2, [r5, #12]
 80050d0:	f7ff fd48 	bl	8004b64 <d_print_comp>
 80050d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80050d8:	29ff      	cmp	r1, #255	; 0xff
 80050da:	d0e7      	beq.n	80050ac <d_print_mod+0x4ec>
 80050dc:	1c4a      	adds	r2, r1, #1
 80050de:	2329      	movs	r3, #41	; 0x29
 80050e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80050e4:	5463      	strb	r3, [r4, r1]
 80050e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80050ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80050f2:	29ff      	cmp	r1, #255	; 0xff
 80050f4:	d065      	beq.n	80051c2 <d_print_mod+0x602>
 80050f6:	1c4a      	adds	r2, r1, #1
 80050f8:	2320      	movs	r3, #32
 80050fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80050fe:	5463      	strb	r3, [r4, r1]
 8005100:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005104:	e709      	b.n	8004f1a <d_print_mod+0x35a>
 8005106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800510a:	29ff      	cmp	r1, #255	; 0xff
 800510c:	d069      	beq.n	80051e2 <d_print_mod+0x622>
 800510e:	1c4a      	adds	r2, r1, #1
 8005110:	232a      	movs	r3, #42	; 0x2a
 8005112:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005116:	5463      	strb	r3, [r4, r1]
 8005118:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800511c:	e685      	b.n	8004e2a <d_print_mod+0x26a>
 800511e:	2600      	movs	r6, #0
 8005120:	4619      	mov	r1, r3
 8005122:	4620      	mov	r0, r4
 8005124:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005128:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005130:	4798      	blx	r3
 8005132:	2101      	movs	r1, #1
 8005134:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8005138:	692a      	ldr	r2, [r5, #16]
 800513a:	4408      	add	r0, r1
 800513c:	4633      	mov	r3, r6
 800513e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8005142:	e7a5      	b.n	8005090 <d_print_mod+0x4d0>
 8005144:	2500      	movs	r5, #0
 8005146:	4619      	mov	r1, r3
 8005148:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 800514c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005150:	4798      	blx	r3
 8005152:	2101      	movs	r1, #1
 8005154:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8005158:	462b      	mov	r3, r5
 800515a:	440a      	add	r2, r1
 800515c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005160:	e639      	b.n	8004dd6 <d_print_mod+0x216>
 8005162:	2600      	movs	r6, #0
 8005164:	4619      	mov	r1, r3
 8005166:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800516a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800516e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005172:	4798      	blx	r3
 8005174:	2101      	movs	r1, #1
 8005176:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800517a:	4633      	mov	r3, r6
 800517c:	440a      	add	r2, r1
 800517e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005182:	e635      	b.n	8004df0 <d_print_mod+0x230>
 8005184:	2500      	movs	r5, #0
 8005186:	4619      	mov	r1, r3
 8005188:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 800518c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005190:	4798      	blx	r3
 8005192:	2101      	movs	r1, #1
 8005194:	2220      	movs	r2, #32
 8005196:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800519a:	7022      	strb	r2, [r4, #0]
 800519c:	440b      	add	r3, r1
 800519e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80051a2:	e63b      	b.n	8004e1c <d_print_mod+0x25c>
 80051a4:	2500      	movs	r5, #0
 80051a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80051aa:	4620      	mov	r0, r4
 80051ac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80051b0:	4798      	blx	r3
 80051b2:	2201      	movs	r2, #1
 80051b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80051b8:	4629      	mov	r1, r5
 80051ba:	4413      	add	r3, r2
 80051bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80051c0:	e62d      	b.n	8004e1e <d_print_mod+0x25e>
 80051c2:	2600      	movs	r6, #0
 80051c4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80051c8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80051cc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80051d0:	4798      	blx	r3
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80051d8:	4631      	mov	r1, r6
 80051da:	4413      	add	r3, r2
 80051dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80051e0:	e78a      	b.n	80050f8 <d_print_mod+0x538>
 80051e2:	2500      	movs	r5, #0
 80051e4:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80051e8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80051ec:	4798      	blx	r3
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80051f4:	4629      	mov	r1, r5
 80051f6:	4413      	add	r3, r2
 80051f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80051fc:	e788      	b.n	8005110 <d_print_mod+0x550>
 80051fe:	bf00      	nop
 8005200:	0800fcb4 	.word	0x0800fcb4

08005204 <d_print_function_type>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	4604      	mov	r4, r0
 800520a:	4617      	mov	r7, r2
 800520c:	461d      	mov	r5, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d064      	beq.n	80052dc <d_print_function_type+0xd8>
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	2a00      	cmp	r2, #0
 8005216:	d161      	bne.n	80052dc <d_print_function_type+0xd8>
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	7811      	ldrb	r1, [r2, #0]
 800521c:	3919      	subs	r1, #25
 800521e:	2912      	cmp	r1, #18
 8005220:	d859      	bhi.n	80052d6 <d_print_function_type+0xd2>
 8005222:	e8df f001 	tbb	[pc, r1]
 8005226:	0a0a      	.short	0x0a0a
 8005228:	5858580a 	.word	0x5858580a
 800522c:	800a5858 	.word	0x800a5858
 8005230:	0a0a8080 	.word	0x0a0a8080
 8005234:	58585858 	.word	0x58585858
 8005238:	0a          	.byte	0x0a
 8005239:	00          	.byte	0x00
 800523a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800523e:	2b20      	cmp	r3, #32
 8005240:	d179      	bne.n	8005336 <d_print_function_type+0x132>
 8005242:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8005246:	2eff      	cmp	r6, #255	; 0xff
 8005248:	f000 8083 	beq.w	8005352 <d_print_function_type+0x14e>
 800524c:	1c73      	adds	r3, r6, #1
 800524e:	f04f 0928 	mov.w	r9, #40	; 0x28
 8005252:	f04f 0a00 	mov.w	sl, #0
 8005256:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800525a:	f804 9006 	strb.w	r9, [r4, r6]
 800525e:	462a      	mov	r2, r5
 8005260:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005264:	2111      	movs	r1, #17
 8005266:	4620      	mov	r0, r4
 8005268:	4653      	mov	r3, sl
 800526a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800526e:	f8c4 a114 	str.w	sl, [r4, #276]	; 0x114
 8005272:	f000 f8b9 	bl	80053e8 <d_print_mod_list>
 8005276:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800527a:	2aff      	cmp	r2, #255	; 0xff
 800527c:	f000 808a 	beq.w	8005394 <d_print_function_type+0x190>
 8005280:	2329      	movs	r3, #41	; 0x29
 8005282:	1c51      	adds	r1, r2, #1
 8005284:	29ff      	cmp	r1, #255	; 0xff
 8005286:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800528a:	54a3      	strb	r3, [r4, r2]
 800528c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005290:	d032      	beq.n	80052f8 <d_print_function_type+0xf4>
 8005292:	2328      	movs	r3, #40	; 0x28
 8005294:	1c4e      	adds	r6, r1, #1
 8005296:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800529a:	5463      	strb	r3, [r4, r1]
 800529c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	b12a      	cbz	r2, 80052b0 <d_print_function_type+0xac>
 80052a4:	2111      	movs	r1, #17
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff fc5c 	bl	8004b64 <d_print_comp>
 80052ac:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80052b0:	2eff      	cmp	r6, #255	; 0xff
 80052b2:	d05f      	beq.n	8005374 <d_print_function_type+0x170>
 80052b4:	1c73      	adds	r3, r6, #1
 80052b6:	2729      	movs	r7, #41	; 0x29
 80052b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80052bc:	462a      	mov	r2, r5
 80052be:	55a7      	strb	r7, [r4, r6]
 80052c0:	2301      	movs	r3, #1
 80052c2:	2111      	movs	r1, #17
 80052c4:	4620      	mov	r0, r4
 80052c6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80052ca:	f000 f88d 	bl	80053e8 <d_print_mod_list>
 80052ce:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 80052d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d19a      	bne.n	8005212 <d_print_function_type+0xe>
 80052dc:	2300      	movs	r3, #0
 80052de:	2111      	movs	r1, #17
 80052e0:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 80052e4:	462a      	mov	r2, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80052ec:	f000 f87c 	bl	80053e8 <d_print_mod_list>
 80052f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80052f4:	29ff      	cmp	r1, #255	; 0xff
 80052f6:	d1cc      	bne.n	8005292 <d_print_function_type+0x8e>
 80052f8:	2300      	movs	r3, #0
 80052fa:	4620      	mov	r0, r4
 80052fc:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005300:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005304:	4798      	blx	r3
 8005306:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800530a:	2601      	movs	r6, #1
 800530c:	3301      	adds	r3, #1
 800530e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005312:	2328      	movs	r3, #40	; 0x28
 8005314:	7023      	strb	r3, [r4, #0]
 8005316:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005320:	2a00      	cmp	r2, #0
 8005322:	d1bf      	bne.n	80052a4 <d_print_function_type+0xa0>
 8005324:	e7c6      	b.n	80052b4 <d_print_function_type+0xb0>
 8005326:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800532a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800532e:	2a28      	cmp	r2, #40	; 0x28
 8005330:	d087      	beq.n	8005242 <d_print_function_type+0x3e>
 8005332:	2b20      	cmp	r3, #32
 8005334:	d085      	beq.n	8005242 <d_print_function_type+0x3e>
 8005336:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800533a:	29ff      	cmp	r1, #255	; 0xff
 800533c:	d043      	beq.n	80053c6 <d_print_function_type+0x1c2>
 800533e:	2320      	movs	r3, #32
 8005340:	1c4e      	adds	r6, r1, #1
 8005342:	2eff      	cmp	r6, #255	; 0xff
 8005344:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005348:	5463      	strb	r3, [r4, r1]
 800534a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800534e:	f47f af7d 	bne.w	800524c <d_print_function_type+0x48>
 8005352:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005356:	f04f 0800 	mov.w	r8, #0
 800535a:	4631      	mov	r1, r6
 800535c:	4620      	mov	r0, r4
 800535e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005362:	4798      	blx	r3
 8005364:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005368:	4646      	mov	r6, r8
 800536a:	3301      	adds	r3, #1
 800536c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005370:	2301      	movs	r3, #1
 8005372:	e76c      	b.n	800524e <d_print_function_type+0x4a>
 8005374:	2700      	movs	r7, #0
 8005376:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800537a:	4631      	mov	r1, r6
 800537c:	4620      	mov	r0, r4
 800537e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005382:	4798      	blx	r3
 8005384:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005388:	463e      	mov	r6, r7
 800538a:	3301      	adds	r3, #1
 800538c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005390:	2301      	movs	r3, #1
 8005392:	e790      	b.n	80052b6 <d_print_function_type+0xb2>
 8005394:	4611      	mov	r1, r2
 8005396:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800539a:	4620      	mov	r0, r4
 800539c:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80053a0:	4798      	blx	r3
 80053a2:	f642 0229 	movw	r2, #10281	; 0x2829
 80053a6:	2602      	movs	r6, #2
 80053a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80053ac:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80053b0:	8022      	strh	r2, [r4, #0]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	3301      	adds	r3, #1
 80053b6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80053ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053be:	2a00      	cmp	r2, #0
 80053c0:	f47f af70 	bne.w	80052a4 <d_print_function_type+0xa0>
 80053c4:	e776      	b.n	80052b4 <d_print_function_type+0xb0>
 80053c6:	2600      	movs	r6, #0
 80053c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80053cc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053d0:	4620      	mov	r0, r4
 80053d2:	4798      	blx	r3
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80053da:	2601      	movs	r6, #1
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80053e2:	7022      	strb	r2, [r4, #0]
 80053e4:	e732      	b.n	800524c <d_print_function_type+0x48>
 80053e6:	bf00      	nop

080053e8 <d_print_mod_list>:
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	f000 80c2 	beq.w	8005572 <d_print_mod_list+0x18a>
 80053ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	4614      	mov	r4, r2
 80053f6:	461e      	mov	r6, r3
 80053f8:	2701      	movs	r7, #1
 80053fa:	b089      	sub	sp, #36	; 0x24
 80053fc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8005400:	b9ca      	cbnz	r2, 8005436 <d_print_mod_list+0x4e>
 8005402:	68a2      	ldr	r2, [r4, #8]
 8005404:	bb0a      	cbnz	r2, 800544a <d_print_mod_list+0x62>
 8005406:	6862      	ldr	r2, [r4, #4]
 8005408:	7811      	ldrb	r1, [r2, #0]
 800540a:	b1be      	cbz	r6, 800543c <d_print_mod_list+0x54>
 800540c:	68e3      	ldr	r3, [r4, #12]
 800540e:	2929      	cmp	r1, #41	; 0x29
 8005410:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 8005414:	60a7      	str	r7, [r4, #8]
 8005416:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800541a:	d024      	beq.n	8005466 <d_print_mod_list+0x7e>
 800541c:	292a      	cmp	r1, #42	; 0x2a
 800541e:	d02c      	beq.n	800547a <d_print_mod_list+0x92>
 8005420:	2902      	cmp	r1, #2
 8005422:	d034      	beq.n	800548e <d_print_mod_list+0xa6>
 8005424:	2111      	movs	r1, #17
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff fbca 	bl	8004bc0 <d_print_mod>
 800542c:	6824      	ldr	r4, [r4, #0]
 800542e:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 8005432:	2c00      	cmp	r4, #0
 8005434:	d1e2      	bne.n	80053fc <d_print_mod_list+0x14>
 8005436:	b009      	add	sp, #36	; 0x24
 8005438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543c:	294d      	cmp	r1, #77	; 0x4d
 800543e:	d004      	beq.n	800544a <d_print_mod_list+0x62>
 8005440:	d807      	bhi.n	8005452 <d_print_mod_list+0x6a>
 8005442:	f1a1 031c 	sub.w	r3, r1, #28
 8005446:	2b04      	cmp	r3, #4
 8005448:	d8e0      	bhi.n	800540c <d_print_mod_list+0x24>
 800544a:	6824      	ldr	r4, [r4, #0]
 800544c:	2c00      	cmp	r4, #0
 800544e:	d1d5      	bne.n	80053fc <d_print_mod_list+0x14>
 8005450:	e7f1      	b.n	8005436 <d_print_mod_list+0x4e>
 8005452:	394f      	subs	r1, #79	; 0x4f
 8005454:	2901      	cmp	r1, #1
 8005456:	d9f8      	bls.n	800544a <d_print_mod_list+0x62>
 8005458:	68e3      	ldr	r3, [r4, #12]
 800545a:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 800545e:	60a7      	str	r7, [r4, #8]
 8005460:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8005464:	e7de      	b.n	8005424 <d_print_mod_list+0x3c>
 8005466:	2111      	movs	r1, #17
 8005468:	4628      	mov	r0, r5
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f7ff feca 	bl	8005204 <d_print_function_type>
 8005470:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 8005474:	b009      	add	sp, #36	; 0x24
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	2111      	movs	r1, #17
 800547c:	4628      	mov	r0, r5
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f000 f8d6 	bl	8005630 <d_print_array_type>
 8005484:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 8005488:	b009      	add	sp, #36	; 0x24
 800548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	f8d5 b114 	ldr.w	fp, [r5, #276]	; 0x114
 8005496:	4e62      	ldr	r6, [pc, #392]	; (8005620 <d_print_mod_list+0x238>)
 8005498:	2111      	movs	r1, #17
 800549a:	68d2      	ldr	r2, [r2, #12]
 800549c:	4628      	mov	r0, r5
 800549e:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
 80054a2:	f7ff fb5f 	bl	8004b64 <d_print_comp>
 80054a6:	273a      	movs	r7, #58	; 0x3a
 80054a8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80054ac:	f106 0a01 	add.w	sl, r6, #1
 80054b0:	f8c5 b114 	str.w	fp, [r5, #276]	; 0x114
 80054b4:	e00a      	b.n	80054cc <d_print_mod_list+0xe4>
 80054b6:	460b      	mov	r3, r1
 80054b8:	3101      	adds	r1, #1
 80054ba:	4556      	cmp	r6, sl
 80054bc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80054c0:	54ef      	strb	r7, [r5, r3]
 80054c2:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 80054c6:	d013      	beq.n	80054f0 <d_print_mod_list+0x108>
 80054c8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80054cc:	29ff      	cmp	r1, #255	; 0xff
 80054ce:	d1f2      	bne.n	80054b6 <d_print_mod_list+0xce>
 80054d0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80054d4:	4628      	mov	r0, r5
 80054d6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80054da:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80054de:	4798      	blx	r3
 80054e0:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80054e4:	2101      	movs	r1, #1
 80054e6:	3301      	adds	r3, #1
 80054e8:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 80054ec:	2300      	movs	r3, #0
 80054ee:	e7e4      	b.n	80054ba <d_print_mod_list+0xd2>
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	691c      	ldr	r4, [r3, #16]
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	2b47      	cmp	r3, #71	; 0x47
 80054f8:	d017      	beq.n	800552a <d_print_mod_list+0x142>
 80054fa:	2b4d      	cmp	r3, #77	; 0x4d
 80054fc:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8005500:	f1a3 011c 	sub.w	r1, r3, #28
 8005504:	d00e      	beq.n	8005524 <d_print_mod_list+0x13c>
 8005506:	d80b      	bhi.n	8005520 <d_print_mod_list+0x138>
 8005508:	2904      	cmp	r1, #4
 800550a:	d90b      	bls.n	8005524 <d_print_mod_list+0x13c>
 800550c:	4622      	mov	r2, r4
 800550e:	2111      	movs	r1, #17
 8005510:	4628      	mov	r0, r5
 8005512:	f7ff fb27 	bl	8004b64 <d_print_comp>
 8005516:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 800551a:	b009      	add	sp, #36	; 0x24
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	2a01      	cmp	r2, #1
 8005522:	d8f3      	bhi.n	800550c <d_print_mod_list+0x124>
 8005524:	68e4      	ldr	r4, [r4, #12]
 8005526:	7823      	ldrb	r3, [r4, #0]
 8005528:	e7e7      	b.n	80054fa <d_print_mod_list+0x112>
 800552a:	4f3e      	ldr	r7, [pc, #248]	; (8005624 <d_print_mod_list+0x23c>)
 800552c:	267b      	movs	r6, #123	; 0x7b
 800552e:	f04f 0900 	mov.w	r9, #0
 8005532:	f107 0a0c 	add.w	sl, r7, #12
 8005536:	e00a      	b.n	800554e <d_print_mod_list+0x166>
 8005538:	460b      	mov	r3, r1
 800553a:	3101      	adds	r1, #1
 800553c:	4557      	cmp	r7, sl
 800553e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005542:	54ee      	strb	r6, [r5, r3]
 8005544:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 8005548:	d014      	beq.n	8005574 <d_print_mod_list+0x18c>
 800554a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800554e:	29ff      	cmp	r1, #255	; 0xff
 8005550:	d1f2      	bne.n	8005538 <d_print_mod_list+0x150>
 8005552:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005556:	4628      	mov	r0, r5
 8005558:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800555c:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8005560:	4798      	blx	r3
 8005562:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8005566:	2101      	movs	r1, #1
 8005568:	3301      	adds	r3, #1
 800556a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 800556e:	2300      	movs	r3, #0
 8005570:	e7e4      	b.n	800553c <d_print_mod_list+0x154>
 8005572:	4770      	bx	lr
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	492c      	ldr	r1, [pc, #176]	; (8005628 <d_print_mod_list+0x240>)
 8005578:	3201      	adds	r2, #1
 800557a:	a801      	add	r0, sp, #4
 800557c:	f006 fc52 	bl	800be24 <siprintf>
 8005580:	a801      	add	r0, sp, #4
 8005582:	f000 fdd9 	bl	8006138 <strlen>
 8005586:	4682      	mov	sl, r0
 8005588:	b318      	cbz	r0, 80055d2 <d_print_mod_list+0x1ea>
 800558a:	ae01      	add	r6, sp, #4
 800558c:	f04f 0900 	mov.w	r9, #0
 8005590:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005594:	44b2      	add	sl, r6
 8005596:	e008      	b.n	80055aa <d_print_mod_list+0x1c2>
 8005598:	460b      	mov	r3, r1
 800559a:	3101      	adds	r1, #1
 800559c:	4556      	cmp	r6, sl
 800559e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80055a2:	54ef      	strb	r7, [r5, r3]
 80055a4:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 80055a8:	d015      	beq.n	80055d6 <d_print_mod_list+0x1ee>
 80055aa:	29ff      	cmp	r1, #255	; 0xff
 80055ac:	f816 7b01 	ldrb.w	r7, [r6], #1
 80055b0:	d1f2      	bne.n	8005598 <d_print_mod_list+0x1b0>
 80055b2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80055b6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80055ba:	4628      	mov	r0, r5
 80055bc:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80055c0:	4798      	blx	r3
 80055c2:	2101      	movs	r1, #1
 80055c4:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 80055c8:	2300      	movs	r3, #0
 80055ca:	440a      	add	r2, r1
 80055cc:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 80055d0:	e7e4      	b.n	800559c <d_print_mod_list+0x1b4>
 80055d2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80055d6:	4f15      	ldr	r7, [pc, #84]	; (800562c <d_print_mod_list+0x244>)
 80055d8:	267d      	movs	r6, #125	; 0x7d
 80055da:	f04f 0900 	mov.w	r9, #0
 80055de:	f107 0a02 	add.w	sl, r7, #2
 80055e2:	e00a      	b.n	80055fa <d_print_mod_list+0x212>
 80055e4:	460b      	mov	r3, r1
 80055e6:	3101      	adds	r1, #1
 80055e8:	45ba      	cmp	sl, r7
 80055ea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80055ee:	54ee      	strb	r6, [r5, r3]
 80055f0:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 80055f4:	d096      	beq.n	8005524 <d_print_mod_list+0x13c>
 80055f6:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80055fa:	29ff      	cmp	r1, #255	; 0xff
 80055fc:	d1f2      	bne.n	80055e4 <d_print_mod_list+0x1fc>
 80055fe:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005602:	4628      	mov	r0, r5
 8005604:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005608:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800560c:	4798      	blx	r3
 800560e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8005612:	2101      	movs	r1, #1
 8005614:	3301      	adds	r3, #1
 8005616:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 800561a:	2300      	movs	r3, #0
 800561c:	e7e4      	b.n	80055e8 <d_print_mod_list+0x200>
 800561e:	bf00      	nop
 8005620:	0800f9f8 	.word	0x0800f9f8
 8005624:	0800f9fc 	.word	0x0800f9fc
 8005628:	0800f988 	.word	0x0800f988
 800562c:	0800fa0c 	.word	0x0800fa0c

08005630 <d_print_array_type>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	4616      	mov	r6, r2
 8005638:	b153      	cbz	r3, 8005650 <d_print_array_type+0x20>
 800563a:	461f      	mov	r7, r3
 800563c:	689d      	ldr	r5, [r3, #8]
 800563e:	b37d      	cbz	r5, 80056a0 <d_print_array_type+0x70>
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1fa      	bne.n	800563c <d_print_array_type+0xc>
 8005646:	463a      	mov	r2, r7
 8005648:	2111      	movs	r1, #17
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff fecc 	bl	80053e8 <d_print_mod_list>
 8005650:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	f000 809d 	beq.w	8005794 <d_print_array_type+0x164>
 800565a:	2220      	movs	r2, #32
 800565c:	1c59      	adds	r1, r3, #1
 800565e:	29ff      	cmp	r1, #255	; 0xff
 8005660:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005664:	54e2      	strb	r2, [r4, r3]
 8005666:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800566a:	d027      	beq.n	80056bc <d_print_array_type+0x8c>
 800566c:	225b      	movs	r2, #91	; 0x5b
 800566e:	1c4b      	adds	r3, r1, #1
 8005670:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005674:	5462      	strb	r2, [r4, r1]
 8005676:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800567a:	68f2      	ldr	r2, [r6, #12]
 800567c:	b12a      	cbz	r2, 800568a <d_print_array_type+0x5a>
 800567e:	2111      	movs	r1, #17
 8005680:	4620      	mov	r0, r4
 8005682:	f7ff fa6f 	bl	8004b64 <d_print_comp>
 8005686:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800568a:	2bff      	cmp	r3, #255	; 0xff
 800568c:	d02f      	beq.n	80056ee <d_print_array_type+0xbe>
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	225d      	movs	r2, #93	; 0x5d
 8005692:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005696:	54e2      	strb	r2, [r4, r3]
 8005698:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b2a      	cmp	r3, #42	; 0x2a
 80056a6:	d132      	bne.n	800570e <d_print_array_type+0xde>
 80056a8:	2111      	movs	r1, #17
 80056aa:	462b      	mov	r3, r5
 80056ac:	463a      	mov	r2, r7
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff fe9a 	bl	80053e8 <d_print_mod_list>
 80056b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056b8:	29ff      	cmp	r1, #255	; 0xff
 80056ba:	d1d7      	bne.n	800566c <d_print_array_type+0x3c>
 80056bc:	2500      	movs	r5, #0
 80056be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056c6:	4620      	mov	r0, r4
 80056c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80056cc:	4798      	blx	r3
 80056ce:	215b      	movs	r1, #91	; 0x5b
 80056d0:	2301      	movs	r3, #1
 80056d2:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80056d6:	7021      	strb	r1, [r4, #0]
 80056d8:	441a      	add	r2, r3
 80056da:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 80056de:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80056e2:	68f2      	ldr	r2, [r6, #12]
 80056e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	d1c8      	bne.n	800567e <d_print_array_type+0x4e>
 80056ec:	e7cf      	b.n	800568e <d_print_array_type+0x5e>
 80056ee:	2500      	movs	r5, #0
 80056f0:	4619      	mov	r1, r3
 80056f2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80056f6:	4620      	mov	r0, r4
 80056f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80056fc:	4798      	blx	r3
 80056fe:	2101      	movs	r1, #1
 8005700:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8005704:	462b      	mov	r3, r5
 8005706:	440a      	add	r2, r1
 8005708:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800570c:	e7c0      	b.n	8005690 <d_print_array_type+0x60>
 800570e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80057f4 <d_print_array_type+0x1c4>
 8005712:	f04f 0920 	mov.w	r9, #32
 8005716:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800571a:	f108 0a01 	add.w	sl, r8, #1
 800571e:	e00c      	b.n	800573a <d_print_array_type+0x10a>
 8005720:	460b      	mov	r3, r1
 8005722:	45d0      	cmp	r8, sl
 8005724:	f101 0101 	add.w	r1, r1, #1
 8005728:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800572c:	f804 9003 	strb.w	r9, [r4, r3]
 8005730:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8005734:	d01a      	beq.n	800576c <d_print_array_type+0x13c>
 8005736:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800573a:	29ff      	cmp	r1, #255	; 0xff
 800573c:	d1f0      	bne.n	8005720 <d_print_array_type+0xf0>
 800573e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005742:	4620      	mov	r0, r4
 8005744:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005748:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800574c:	4798      	blx	r3
 800574e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005752:	2101      	movs	r1, #1
 8005754:	3301      	adds	r3, #1
 8005756:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800575a:	2300      	movs	r3, #0
 800575c:	45d0      	cmp	r8, sl
 800575e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005762:	f804 9003 	strb.w	r9, [r4, r3]
 8005766:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800576a:	d1e4      	bne.n	8005736 <d_print_array_type+0x106>
 800576c:	2111      	movs	r1, #17
 800576e:	2300      	movs	r3, #0
 8005770:	463a      	mov	r2, r7
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff fe38 	bl	80053e8 <d_print_mod_list>
 8005778:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800577c:	29ff      	cmp	r1, #255	; 0xff
 800577e:	d026      	beq.n	80057ce <d_print_array_type+0x19e>
 8005780:	2229      	movs	r2, #41	; 0x29
 8005782:	1c4b      	adds	r3, r1, #1
 8005784:	2bff      	cmp	r3, #255	; 0xff
 8005786:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800578a:	5462      	strb	r2, [r4, r1]
 800578c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005790:	f47f af63 	bne.w	800565a <d_print_array_type+0x2a>
 8005794:	2500      	movs	r5, #0
 8005796:	4619      	mov	r1, r3
 8005798:	4620      	mov	r0, r4
 800579a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800579e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80057a6:	4798      	blx	r3
 80057a8:	f645 3020 	movw	r0, #23328	; 0x5b20
 80057ac:	215b      	movs	r1, #91	; 0x5b
 80057ae:	2302      	movs	r3, #2
 80057b0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80057b4:	8020      	strh	r0, [r4, #0]
 80057b6:	3201      	adds	r2, #1
 80057b8:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 80057bc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80057c0:	68f2      	ldr	r2, [r6, #12]
 80057c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	f47f af59 	bne.w	800567e <d_print_array_type+0x4e>
 80057cc:	e75f      	b.n	800568e <d_print_array_type+0x5e>
 80057ce:	2500      	movs	r5, #0
 80057d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057d8:	4620      	mov	r0, r4
 80057da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80057de:	4798      	blx	r3
 80057e0:	2301      	movs	r3, #1
 80057e2:	2129      	movs	r1, #41	; 0x29
 80057e4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80057e8:	7021      	strb	r1, [r4, #0]
 80057ea:	441a      	add	r2, r3
 80057ec:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80057f0:	e733      	b.n	800565a <d_print_array_type+0x2a>
 80057f2:	bf00      	nop
 80057f4:	0800fbfc 	.word	0x0800fbfc

080057f8 <d_print_conversion>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80057fe:	4604      	mov	r4, r0
 8005800:	4615      	mov	r5, r2
 8005802:	b082      	sub	sp, #8
 8005804:	b12b      	cbz	r3, 8005812 <d_print_conversion+0x1a>
 8005806:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	9200      	str	r2, [sp, #0]
 800580e:	f8c0 d110 	str.w	sp, [r0, #272]	; 0x110
 8005812:	68ea      	ldr	r2, [r5, #12]
 8005814:	2111      	movs	r1, #17
 8005816:	7813      	ldrb	r3, [r2, #0]
 8005818:	4620      	mov	r0, r4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d009      	beq.n	8005832 <d_print_conversion+0x3a>
 800581e:	f7ff f9a1 	bl	8004b64 <d_print_comp>
 8005822:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005826:	b113      	cbz	r3, 800582e <d_print_conversion+0x36>
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800582e:	b002      	add	sp, #8
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	68d2      	ldr	r2, [r2, #12]
 8005834:	f7ff f996 	bl	8004b64 <d_print_comp>
 8005838:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800583c:	b113      	cbz	r3, 8005844 <d_print_conversion+0x4c>
 800583e:	9b00      	ldr	r3, [sp, #0]
 8005840:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8005844:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005848:	2b3c      	cmp	r3, #60	; 0x3c
 800584a:	d021      	beq.n	8005890 <d_print_conversion+0x98>
 800584c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005850:	2bff      	cmp	r3, #255	; 0xff
 8005852:	d044      	beq.n	80058de <d_print_conversion+0xe6>
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	223c      	movs	r2, #60	; 0x3c
 8005858:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800585c:	54e2      	strb	r2, [r4, r3]
 800585e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005862:	68eb      	ldr	r3, [r5, #12]
 8005864:	2111      	movs	r1, #17
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff f97b 	bl	8004b64 <d_print_comp>
 800586e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005872:	2b3e      	cmp	r3, #62	; 0x3e
 8005874:	d027      	beq.n	80058c6 <d_print_conversion+0xce>
 8005876:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800587a:	29ff      	cmp	r1, #255	; 0xff
 800587c:	d014      	beq.n	80058a8 <d_print_conversion+0xb0>
 800587e:	1c4a      	adds	r2, r1, #1
 8005880:	233e      	movs	r3, #62	; 0x3e
 8005882:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005886:	5463      	strb	r3, [r4, r1]
 8005888:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800588c:	b002      	add	sp, #8
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005894:	29ff      	cmp	r1, #255	; 0xff
 8005896:	d034      	beq.n	8005902 <d_print_conversion+0x10a>
 8005898:	2220      	movs	r2, #32
 800589a:	1c4b      	adds	r3, r1, #1
 800589c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80058a0:	5462      	strb	r2, [r4, r1]
 80058a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80058a6:	e7d3      	b.n	8005850 <d_print_conversion+0x58>
 80058a8:	2500      	movs	r5, #0
 80058aa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80058ae:	4620      	mov	r0, r4
 80058b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80058b4:	4798      	blx	r3
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80058bc:	4629      	mov	r1, r5
 80058be:	4413      	add	r3, r2
 80058c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80058c4:	e7dc      	b.n	8005880 <d_print_conversion+0x88>
 80058c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80058ca:	2bff      	cmp	r3, #255	; 0xff
 80058cc:	d02b      	beq.n	8005926 <d_print_conversion+0x12e>
 80058ce:	2220      	movs	r2, #32
 80058d0:	1c59      	adds	r1, r3, #1
 80058d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058d6:	54e2      	strb	r2, [r4, r3]
 80058d8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80058dc:	e7cd      	b.n	800587a <d_print_conversion+0x82>
 80058de:	2600      	movs	r6, #0
 80058e0:	4619      	mov	r1, r3
 80058e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058ea:	4620      	mov	r0, r4
 80058ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80058f0:	4798      	blx	r3
 80058f2:	2101      	movs	r1, #1
 80058f4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80058f8:	4633      	mov	r3, r6
 80058fa:	440a      	add	r2, r1
 80058fc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005900:	e7a9      	b.n	8005856 <d_print_conversion+0x5e>
 8005902:	2600      	movs	r6, #0
 8005904:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800590c:	4620      	mov	r0, r4
 800590e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005912:	4798      	blx	r3
 8005914:	2301      	movs	r3, #1
 8005916:	2120      	movs	r1, #32
 8005918:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800591c:	7021      	strb	r1, [r4, #0]
 800591e:	441a      	add	r2, r3
 8005920:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005924:	e796      	b.n	8005854 <d_print_conversion+0x5c>
 8005926:	2500      	movs	r5, #0
 8005928:	4619      	mov	r1, r3
 800592a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800592e:	4620      	mov	r0, r4
 8005930:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005934:	4798      	blx	r3
 8005936:	2101      	movs	r1, #1
 8005938:	2220      	movs	r2, #32
 800593a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800593e:	7022      	strb	r2, [r4, #0]
 8005940:	440b      	add	r3, r1
 8005942:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005946:	e79a      	b.n	800587e <d_print_conversion+0x86>

08005948 <d_print_expr_op>:
 8005948:	7811      	ldrb	r1, [r2, #0]
 800594a:	2932      	cmp	r1, #50	; 0x32
 800594c:	d002      	beq.n	8005954 <d_print_expr_op+0xc>
 800594e:	2111      	movs	r1, #17
 8005950:	f7ff b908 	b.w	8004b64 <d_print_comp>
 8005954:	68d3      	ldr	r3, [r2, #12]
 8005956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 800595e:	b367      	cbz	r7, 80059ba <d_print_expr_op+0x72>
 8005960:	442f      	add	r7, r5
 8005962:	4604      	mov	r4, r0
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800596c:	3d01      	subs	r5, #1
 800596e:	3f01      	subs	r7, #1
 8005970:	e009      	b.n	8005986 <d_print_expr_op+0x3e>
 8005972:	460b      	mov	r3, r1
 8005974:	42bd      	cmp	r5, r7
 8005976:	f101 0101 	add.w	r1, r1, #1
 800597a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800597e:	54e6      	strb	r6, [r4, r3]
 8005980:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005984:	d019      	beq.n	80059ba <d_print_expr_op+0x72>
 8005986:	29ff      	cmp	r1, #255	; 0xff
 8005988:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800598c:	d1f1      	bne.n	8005972 <d_print_expr_op+0x2a>
 800598e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005992:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005996:	4620      	mov	r0, r4
 8005998:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800599c:	4798      	blx	r3
 800599e:	2101      	movs	r1, #1
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80059a6:	42bd      	cmp	r5, r7
 80059a8:	440a      	add	r2, r1
 80059aa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80059ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80059b2:	54e6      	strb	r6, [r4, r3]
 80059b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80059b8:	d1e5      	bne.n	8005986 <d_print_expr_op+0x3e>
 80059ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059be:	bf00      	nop

080059c0 <d_demangle_callback.constprop.0>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	b0e5      	sub	sp, #404	; 0x194
 80059c6:	f890 9000 	ldrb.w	r9, [r0]
 80059ca:	4604      	mov	r4, r0
 80059cc:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80059d0:	460d      	mov	r5, r1
 80059d2:	4616      	mov	r6, r2
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	f000 80f2 	beq.w	8005bbe <d_demangle_callback.constprop.0+0x1fe>
 80059da:	2208      	movs	r2, #8
 80059dc:	4620      	mov	r0, r4
 80059de:	49c3      	ldr	r1, [pc, #780]	; (8005cec <d_demangle_callback.constprop.0+0x32c>)
 80059e0:	f008 fcf4 	bl	800e3cc <strncmp>
 80059e4:	b948      	cbnz	r0, 80059fa <d_demangle_callback.constprop.0+0x3a>
 80059e6:	7a23      	ldrb	r3, [r4, #8]
 80059e8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ea:	f000 80d7 	beq.w	8005b9c <d_demangle_callback.constprop.0+0x1dc>
 80059ee:	2b5f      	cmp	r3, #95	; 0x5f
 80059f0:	f000 80d4 	beq.w	8005b9c <d_demangle_callback.constprop.0+0x1dc>
 80059f4:	2b24      	cmp	r3, #36	; 0x24
 80059f6:	f000 80d1 	beq.w	8005b9c <d_demangle_callback.constprop.0+0x1dc>
 80059fa:	f04f 0a00 	mov.w	sl, #0
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 fb9a 	bl	8006138 <strlen>
 8005a04:	2311      	movs	r3, #17
 8005a06:	2100      	movs	r1, #0
 8005a08:	0042      	lsls	r2, r0, #1
 8005a0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8005a0e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005a12:	eb04 0300 	add.w	r3, r4, r0
 8005a16:	e9c7 110c 	strd	r1, r1, [r7, #48]	; 0x30
 8005a1a:	e9c7 110e 	strd	r1, r1, [r7, #56]	; 0x38
 8005a1e:	60bc      	str	r4, [r7, #8]
 8005a20:	61f9      	str	r1, [r7, #28]
 8005a22:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a24:	6439      	str	r1, [r7, #64]	; 0x40
 8005a26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	623a      	str	r2, [r7, #32]
 8005a2c:	f200 80b0 	bhi.w	8005b90 <d_demangle_callback.constprop.0+0x1d0>
 8005a30:	46e8      	mov	r8, sp
 8005a32:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 8005a36:	0083      	lsls	r3, r0, #2
 8005a38:	eba8 00cc 	sub.w	r0, r8, ip, lsl #3
 8005a3c:	4685      	mov	sp, r0
 8005a3e:	46eb      	mov	fp, sp
 8005a40:	3307      	adds	r3, #7
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	ebad 0d03 	sub.w	sp, sp, r3
 8005a4a:	f1ba 0f01 	cmp.w	sl, #1
 8005a4e:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
 8005a52:	f8c7 b018 	str.w	fp, [r7, #24]
 8005a56:	f000 80b9 	beq.w	8005bcc <d_demangle_callback.constprop.0+0x20c>
 8005a5a:	f1aa 0302 	sub.w	r3, sl, #2
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	f200 80ba 	bhi.w	8005bd8 <d_demangle_callback.constprop.0+0x218>
 8005a64:	7ae3      	ldrb	r3, [r4, #11]
 8005a66:	f1ba 0f02 	cmp.w	sl, #2
 8005a6a:	bf0c      	ite	eq
 8005a6c:	f04f 0944 	moveq.w	r9, #68	; 0x44
 8005a70:	f04f 0945 	movne.w	r9, #69	; 0x45
 8005a74:	f104 0a0b 	add.w	sl, r4, #11
 8005a78:	2b5f      	cmp	r3, #95	; 0x5f
 8005a7a:	f8c7 a014 	str.w	sl, [r7, #20]
 8005a7e:	d103      	bne.n	8005a88 <d_demangle_callback.constprop.0+0xc8>
 8005a80:	7b23      	ldrb	r3, [r4, #12]
 8005a82:	2b5a      	cmp	r3, #90	; 0x5a
 8005a84:	f000 8125 	beq.w	8005cd2 <d_demangle_callback.constprop.0+0x312>
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	f340 80ad 	ble.w	8005be8 <d_demangle_callback.constprop.0+0x228>
 8005a8e:	4650      	mov	r0, sl
 8005a90:	f000 fb52 	bl	8006138 <strlen>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2201      	movs	r2, #1
 8005a98:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8005a9c:	61fa      	str	r2, [r7, #28]
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f000 80a2 	beq.w	8005be8 <d_demangle_callback.constprop.0+0x228>
 8005aa4:	e9cb a003 	strd	sl, r0, [fp, #12]
 8005aa8:	f88b 3000 	strb.w	r3, [fp]
 8005aac:	4649      	mov	r1, r9
 8005aae:	2300      	movs	r3, #0
 8005ab0:	465a      	mov	r2, fp
 8005ab2:	f107 0008 	add.w	r0, r7, #8
 8005ab6:	f7fa fb49 	bl	800014c <d_make_comp>
 8005aba:	697c      	ldr	r4, [r7, #20]
 8005abc:	4681      	mov	r9, r0
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fb3a 	bl	8006138 <strlen>
 8005ac4:	1823      	adds	r3, r4, r0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	5c23      	ldrb	r3, [r4, r0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8081 	bne.w	8005bd2 <d_demangle_callback.constprop.0+0x212>
 8005ad0:	f1b9 0f00 	cmp.w	r9, #0
 8005ad4:	d07d      	beq.n	8005bd2 <d_demangle_callback.constprop.0+0x212>
 8005ad6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8005ada:	4649      	mov	r1, r9
 8005adc:	4620      	mov	r0, r4
 8005ade:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
 8005ae2:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
 8005ae6:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
 8005aea:	e9c4 334b 	strd	r3, r3, [r4, #300]	; 0x12c
 8005aee:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
 8005af2:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005afc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b00:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005b04:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8005b08:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 8005b0c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8005b10:	f7fa fbe2 	bl	80002d8 <d_count_templates_scopes>
 8005b14:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005b18:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8005b1c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005b20:	bfb8      	it	lt
 8005b22:	687b      	ldrlt	r3, [r7, #4]
 8005b24:	466e      	mov	r6, sp
 8005b26:	bfb8      	it	lt
 8005b28:	f8c4 311c 	strlt.w	r3, [r4, #284]	; 0x11c
 8005b2c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8005b30:	2901      	cmp	r1, #1
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	bfb8      	it	lt
 8005b38:	2101      	movlt	r1, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8005b40:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
 8005b44:	bfb8      	it	lt
 8005b46:	2301      	movlt	r3, #1
 8005b48:	468d      	mov	sp, r1
 8005b4a:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8005b4e:	46ec      	mov	ip, sp
 8005b50:	2500      	movs	r5, #0
 8005b52:	469d      	mov	sp, r3
 8005b54:	464a      	mov	r2, r9
 8005b56:	2111      	movs	r1, #17
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
 8005b5e:	f8c4 c130 	str.w	ip, [r4, #304]	; 0x130
 8005b62:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8005b66:	f7fe fffd 	bl	8004b64 <d_print_comp>
 8005b6a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005b6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005b72:	46b5      	mov	sp, r6
 8005b74:	4620      	mov	r0, r4
 8005b76:	5465      	strb	r5, [r4, r1]
 8005b78:	4798      	blx	r3
 8005b7a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8005b7e:	46c5      	mov	sp, r8
 8005b80:	fab0 f080 	clz	r0, r0
 8005b84:	0940      	lsrs	r0, r0, #5
 8005b86:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	4608      	mov	r0, r1
 8005b92:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8005b96:	46bd      	mov	sp, r7
 8005b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	7a63      	ldrb	r3, [r4, #9]
 8005b9e:	2b44      	cmp	r3, #68	; 0x44
 8005ba0:	d002      	beq.n	8005ba8 <d_demangle_callback.constprop.0+0x1e8>
 8005ba2:	2b49      	cmp	r3, #73	; 0x49
 8005ba4:	f47f af29 	bne.w	80059fa <d_demangle_callback.constprop.0+0x3a>
 8005ba8:	7aa2      	ldrb	r2, [r4, #10]
 8005baa:	2a5f      	cmp	r2, #95	; 0x5f
 8005bac:	f47f af25 	bne.w	80059fa <d_demangle_callback.constprop.0+0x3a>
 8005bb0:	2b49      	cmp	r3, #73	; 0x49
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f04f 0a02 	moveq.w	sl, #2
 8005bb8:	f04f 0a03 	movne.w	sl, #3
 8005bbc:	e71f      	b.n	80059fe <d_demangle_callback.constprop.0+0x3e>
 8005bbe:	7843      	ldrb	r3, [r0, #1]
 8005bc0:	2b5a      	cmp	r3, #90	; 0x5a
 8005bc2:	f47f af0a 	bne.w	80059da <d_demangle_callback.constprop.0+0x1a>
 8005bc6:	f04f 0a01 	mov.w	sl, #1
 8005bca:	e718      	b.n	80059fe <d_demangle_callback.constprop.0+0x3e>
 8005bcc:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8005bd0:	d00d      	beq.n	8005bee <d_demangle_callback.constprop.0+0x22e>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	46c5      	mov	sp, r8
 8005bd6:	e7d6      	b.n	8005b86 <d_demangle_callback.constprop.0+0x1c6>
 8005bd8:	f107 0008 	add.w	r0, r7, #8
 8005bdc:	f7fa ff4a 	bl	8000a74 <d_type>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4681      	mov	r9, r0
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	e770      	b.n	8005aca <d_demangle_callback.constprop.0+0x10a>
 8005be8:	f04f 0b00 	mov.w	fp, #0
 8005bec:	e75e      	b.n	8005aac <d_demangle_callback.constprop.0+0xec>
 8005bee:	7863      	ldrb	r3, [r4, #1]
 8005bf0:	2b5a      	cmp	r3, #90	; 0x5a
 8005bf2:	d1ee      	bne.n	8005bd2 <d_demangle_callback.constprop.0+0x212>
 8005bf4:	78a3      	ldrb	r3, [r4, #2]
 8005bf6:	3402      	adds	r4, #2
 8005bf8:	2b47      	cmp	r3, #71	; 0x47
 8005bfa:	617c      	str	r4, [r7, #20]
 8005bfc:	d07f      	beq.n	8005cfe <d_demangle_callback.constprop.0+0x33e>
 8005bfe:	2b54      	cmp	r3, #84	; 0x54
 8005c00:	d07d      	beq.n	8005cfe <d_demangle_callback.constprop.0+0x33e>
 8005c02:	4651      	mov	r1, sl
 8005c04:	f107 0008 	add.w	r0, r7, #8
 8005c08:	f7fc f802 	bl	8001c10 <d_encoding.part.0>
 8005c0c:	4681      	mov	r9, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	07db      	lsls	r3, r3, #31
 8005c12:	d571      	bpl.n	8005cf8 <d_demangle_callback.constprop.0+0x338>
 8005c14:	6979      	ldr	r1, [r7, #20]
 8005c16:	780b      	ldrb	r3, [r1, #0]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	f47f af56 	bne.w	8005aca <d_demangle_callback.constprop.0+0x10a>
 8005c1e:	2400      	movs	r4, #0
 8005c20:	784b      	ldrb	r3, [r1, #1]
 8005c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c26:	2a19      	cmp	r2, #25
 8005c28:	d947      	bls.n	8005cba <d_demangle_callback.constprop.0+0x2fa>
 8005c2a:	2b5f      	cmp	r3, #95	; 0x5f
 8005c2c:	d045      	beq.n	8005cba <d_demangle_callback.constprop.0+0x2fa>
 8005c2e:	3b30      	subs	r3, #48	; 0x30
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d861      	bhi.n	8005cf8 <d_demangle_callback.constprop.0+0x338>
 8005c34:	460b      	mov	r3, r1
 8005c36:	7808      	ldrb	r0, [r1, #0]
 8005c38:	282e      	cmp	r0, #46	; 0x2e
 8005c3a:	d117      	bne.n	8005c6c <d_demangle_callback.constprop.0+0x2ac>
 8005c3c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8005c40:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005c44:	f1bc 0f09 	cmp.w	ip, #9
 8005c48:	d810      	bhi.n	8005c6c <d_demangle_callback.constprop.0+0x2ac>
 8005c4a:	f893 c002 	ldrb.w	ip, [r3, #2]
 8005c4e:	3302      	adds	r3, #2
 8005c50:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
 8005c54:	2a09      	cmp	r2, #9
 8005c56:	d806      	bhi.n	8005c66 <d_demangle_callback.constprop.0+0x2a6>
 8005c58:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8005c5c:	f1ac 0e30 	sub.w	lr, ip, #48	; 0x30
 8005c60:	f1be 0f09 	cmp.w	lr, #9
 8005c64:	d9f8      	bls.n	8005c58 <d_demangle_callback.constprop.0+0x298>
 8005c66:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8005c6a:	d0e7      	beq.n	8005c3c <d_demangle_callback.constprop.0+0x27c>
 8005c6c:	e9d7 2007 	ldrd	r2, r0, [r7, #28]
 8005c70:	4282      	cmp	r2, r0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	eba3 0c01 	sub.w	ip, r3, r1
 8005c78:	da1d      	bge.n	8005cb6 <d_demangle_callback.constprop.0+0x2f6>
 8005c7a:	69b8      	ldr	r0, [r7, #24]
 8005c7c:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 8005c80:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8005c84:	3201      	adds	r2, #1
 8005c86:	f1bc 0f00 	cmp.w	ip, #0
 8005c8a:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8005c8e:	61fa      	str	r2, [r7, #28]
 8005c90:	dd11      	ble.n	8005cb6 <d_demangle_callback.constprop.0+0x2f6>
 8005c92:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8005c96:	f800 402e 	strb.w	r4, [r0, lr, lsl #2]
 8005c9a:	e9c3 1c03 	strd	r1, ip, [r3, #12]
 8005c9e:	464a      	mov	r2, r9
 8005ca0:	214e      	movs	r1, #78	; 0x4e
 8005ca2:	f107 0008 	add.w	r0, r7, #8
 8005ca6:	f7fa fa51 	bl	800014c <d_make_comp>
 8005caa:	6979      	ldr	r1, [r7, #20]
 8005cac:	4681      	mov	r9, r0
 8005cae:	780b      	ldrb	r3, [r1, #0]
 8005cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb2:	d0b5      	beq.n	8005c20 <d_demangle_callback.constprop.0+0x260>
 8005cb4:	e709      	b.n	8005aca <d_demangle_callback.constprop.0+0x10a>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e7f1      	b.n	8005c9e <d_demangle_callback.constprop.0+0x2de>
 8005cba:	1c8a      	adds	r2, r1, #2
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005cc2:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
 8005cc6:	f1bc 0f19 	cmp.w	ip, #25
 8005cca:	d9f7      	bls.n	8005cbc <d_demangle_callback.constprop.0+0x2fc>
 8005ccc:	285f      	cmp	r0, #95	; 0x5f
 8005cce:	d0f5      	beq.n	8005cbc <d_demangle_callback.constprop.0+0x2fc>
 8005cd0:	e7b2      	b.n	8005c38 <d_demangle_callback.constprop.0+0x278>
 8005cd2:	7b63      	ldrb	r3, [r4, #13]
 8005cd4:	340d      	adds	r4, #13
 8005cd6:	2b47      	cmp	r3, #71	; 0x47
 8005cd8:	617c      	str	r4, [r7, #20]
 8005cda:	f107 0008 	add.w	r0, r7, #8
 8005cde:	d007      	beq.n	8005cf0 <d_demangle_callback.constprop.0+0x330>
 8005ce0:	2b54      	cmp	r3, #84	; 0x54
 8005ce2:	d005      	beq.n	8005cf0 <d_demangle_callback.constprop.0+0x330>
 8005ce4:	f7fb ff94 	bl	8001c10 <d_encoding.part.0>
 8005ce8:	4683      	mov	fp, r0
 8005cea:	e6df      	b.n	8005aac <d_demangle_callback.constprop.0+0xec>
 8005cec:	0800f98c 	.word	0x0800f98c
 8005cf0:	f7fc f80c 	bl	8001d0c <d_special_name>
 8005cf4:	4683      	mov	fp, r0
 8005cf6:	e6d9      	b.n	8005aac <d_demangle_callback.constprop.0+0xec>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	e6e5      	b.n	8005aca <d_demangle_callback.constprop.0+0x10a>
 8005cfe:	f107 0008 	add.w	r0, r7, #8
 8005d02:	f7fc f803 	bl	8001d0c <d_special_name>
 8005d06:	4681      	mov	r9, r0
 8005d08:	e781      	b.n	8005c0e <d_demangle_callback.constprop.0+0x24e>
 8005d0a:	bf00      	nop

08005d0c <d_print_subexpr>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	7813      	ldrb	r3, [r2, #0]
 8005d10:	4615      	mov	r5, r2
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	4604      	mov	r4, r0
 8005d16:	b082      	sub	sp, #8
 8005d18:	d903      	bls.n	8005d22 <d_print_subexpr+0x16>
 8005d1a:	2b31      	cmp	r3, #49	; 0x31
 8005d1c:	d001      	beq.n	8005d22 <d_print_subexpr+0x16>
 8005d1e:	2b06      	cmp	r3, #6
 8005d20:	d138      	bne.n	8005d94 <d_print_subexpr+0x88>
 8005d22:	2601      	movs	r6, #1
 8005d24:	686b      	ldr	r3, [r5, #4]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	dc22      	bgt.n	8005d70 <d_print_subexpr+0x64>
 8005d2a:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005d2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005d32:	dc1d      	bgt.n	8005d70 <d_print_subexpr+0x64>
 8005d34:	3301      	adds	r3, #1
 8005d36:	606b      	str	r3, [r5, #4]
 8005d38:	3201      	adds	r2, #1
 8005d3a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005d3e:	2111      	movs	r1, #17
 8005d40:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8005d44:	4620      	mov	r0, r4
 8005d46:	462a      	mov	r2, r5
 8005d48:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
 8005d4c:	e9cd 5300 	strd	r5, r3, [sp]
 8005d50:	f7fc fe50 	bl	80029f4 <d_print_comp_inner>
 8005d54:	686a      	ldr	r2, [r5, #4]
 8005d56:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005d5a:	9901      	ldr	r1, [sp, #4]
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8005d64:	606a      	str	r2, [r5, #4]
 8005d66:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8005d6a:	b136      	cbz	r6, 8005d7a <d_print_subexpr+0x6e>
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	2301      	movs	r3, #1
 8005d72:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d1f8      	bne.n	8005d6c <d_print_subexpr+0x60>
 8005d7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d7e:	29ff      	cmp	r1, #255	; 0xff
 8005d80:	d015      	beq.n	8005dae <d_print_subexpr+0xa2>
 8005d82:	1c4a      	adds	r2, r1, #1
 8005d84:	2329      	movs	r3, #41	; 0x29
 8005d86:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005d8a:	5463      	strb	r3, [r4, r1]
 8005d8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d90:	b002      	add	sp, #8
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005d98:	29ff      	cmp	r1, #255	; 0xff
 8005d9a:	d016      	beq.n	8005dca <d_print_subexpr+0xbe>
 8005d9c:	1c4a      	adds	r2, r1, #1
 8005d9e:	2328      	movs	r3, #40	; 0x28
 8005da0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005da4:	2600      	movs	r6, #0
 8005da6:	5463      	strb	r3, [r4, r1]
 8005da8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005dac:	e7ba      	b.n	8005d24 <d_print_subexpr+0x18>
 8005dae:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005db2:	4620      	mov	r0, r4
 8005db4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005db8:	4798      	blx	r3
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005dc8:	e7dc      	b.n	8005d84 <d_print_subexpr+0x78>
 8005dca:	2600      	movs	r6, #0
 8005dcc:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005dd0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005dd4:	4798      	blx	r3
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4413      	add	r3, r2
 8005de0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005de4:	e7db      	b.n	8005d9e <d_print_subexpr+0x92>
 8005de6:	bf00      	nop

08005de8 <d_maybe_print_fold_expression>:
 8005de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	68d3      	ldr	r3, [r2, #12]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	7819      	ldrb	r1, [r3, #0]
 8005df4:	2966      	cmp	r1, #102	; 0x66
 8005df6:	d178      	bne.n	8005eea <d_maybe_print_fold_expression+0x102>
 8005df8:	6912      	ldr	r2, [r2, #16]
 8005dfa:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
 8005dfe:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
 8005e02:	f89a 2000 	ldrb.w	r2, [sl]
 8005e06:	4604      	mov	r4, r0
 8005e08:	2a3c      	cmp	r2, #60	; 0x3c
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	bf08      	it	eq
 8005e10:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
 8005e14:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	bf18      	it	ne
 8005e1c:	f04f 0900 	movne.w	r9, #0
 8005e20:	2b6c      	cmp	r3, #108	; 0x6c
 8005e22:	f000 80a2 	beq.w	8005f6a <d_maybe_print_fold_expression+0x182>
 8005e26:	d863      	bhi.n	8005ef0 <d_maybe_print_fold_expression+0x108>
 8005e28:	2b4c      	cmp	r3, #76	; 0x4c
 8005e2a:	d001      	beq.n	8005e30 <d_maybe_print_fold_expression+0x48>
 8005e2c:	2b52      	cmp	r3, #82	; 0x52
 8005e2e:	d157      	bne.n	8005ee0 <d_maybe_print_fold_expression+0xf8>
 8005e30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005e34:	29ff      	cmp	r1, #255	; 0xff
 8005e36:	f000 80eb 	beq.w	8006010 <d_maybe_print_fold_expression+0x228>
 8005e3a:	1c4b      	adds	r3, r1, #1
 8005e3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e40:	2328      	movs	r3, #40	; 0x28
 8005e42:	4652      	mov	r2, sl
 8005e44:	5463      	strb	r3, [r4, r1]
 8005e46:	4620      	mov	r0, r4
 8005e48:	2111      	movs	r1, #17
 8005e4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005e4e:	4d78      	ldr	r5, [pc, #480]	; (8006030 <d_maybe_print_fold_expression+0x248>)
 8005e50:	f7ff ff5c 	bl	8005d0c <d_print_subexpr>
 8005e54:	2111      	movs	r1, #17
 8005e56:	4642      	mov	r2, r8
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff fd75 	bl	8005948 <d_print_expr_op>
 8005e5e:	262e      	movs	r6, #46	; 0x2e
 8005e60:	f04f 0a00 	mov.w	sl, #0
 8005e64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005e68:	f105 0b02 	add.w	fp, r5, #2
 8005e6c:	e00b      	b.n	8005e86 <d_maybe_print_fold_expression+0x9e>
 8005e6e:	460b      	mov	r3, r1
 8005e70:	45ab      	cmp	fp, r5
 8005e72:	f101 0101 	add.w	r1, r1, #1
 8005e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e7a:	54e6      	strb	r6, [r4, r3]
 8005e7c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e80:	d019      	beq.n	8005eb6 <d_maybe_print_fold_expression+0xce>
 8005e82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005e86:	29ff      	cmp	r1, #255	; 0xff
 8005e88:	d1f1      	bne.n	8005e6e <d_maybe_print_fold_expression+0x86>
 8005e8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e94:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8005e98:	4798      	blx	r3
 8005e9a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	45ab      	cmp	fp, r5
 8005eaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005eae:	54e6      	strb	r6, [r4, r3]
 8005eb0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005eb4:	d1e5      	bne.n	8005e82 <d_maybe_print_fold_expression+0x9a>
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	2111      	movs	r1, #17
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff fd44 	bl	8005948 <d_print_expr_op>
 8005ec0:	464a      	mov	r2, r9
 8005ec2:	2111      	movs	r1, #17
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff ff21 	bl	8005d0c <d_print_subexpr>
 8005eca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ece:	29ff      	cmp	r1, #255	; 0xff
 8005ed0:	d07f      	beq.n	8005fd2 <d_maybe_print_fold_expression+0x1ea>
 8005ed2:	1c4a      	adds	r2, r1, #1
 8005ed4:	2329      	movs	r3, #41	; 0x29
 8005ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005eda:	5463      	strb	r3, [r4, r1]
 8005edc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8005ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	2000      	movs	r0, #0
 8005eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	2b72      	cmp	r3, #114	; 0x72
 8005ef2:	d1f5      	bne.n	8005ee0 <d_maybe_print_fold_expression+0xf8>
 8005ef4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ef8:	29ff      	cmp	r1, #255	; 0xff
 8005efa:	d07b      	beq.n	8005ff4 <d_maybe_print_fold_expression+0x20c>
 8005efc:	1c4b      	adds	r3, r1, #1
 8005efe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f02:	2328      	movs	r3, #40	; 0x28
 8005f04:	4652      	mov	r2, sl
 8005f06:	5463      	strb	r3, [r4, r1]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	2111      	movs	r1, #17
 8005f0c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f10:	4d48      	ldr	r5, [pc, #288]	; (8006034 <d_maybe_print_fold_expression+0x24c>)
 8005f12:	f7ff fefb 	bl	8005d0c <d_print_subexpr>
 8005f16:	4642      	mov	r2, r8
 8005f18:	2111      	movs	r1, #17
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f7ff fd14 	bl	8005948 <d_print_expr_op>
 8005f20:	262e      	movs	r6, #46	; 0x2e
 8005f22:	f04f 0900 	mov.w	r9, #0
 8005f26:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f2a:	f105 0803 	add.w	r8, r5, #3
 8005f2e:	e00a      	b.n	8005f46 <d_maybe_print_fold_expression+0x15e>
 8005f30:	460b      	mov	r3, r1
 8005f32:	3101      	adds	r1, #1
 8005f34:	4545      	cmp	r5, r8
 8005f36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f3a:	54e6      	strb	r6, [r4, r3]
 8005f3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005f40:	d0ce      	beq.n	8005ee0 <d_maybe_print_fold_expression+0xf8>
 8005f42:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005f46:	29ff      	cmp	r1, #255	; 0xff
 8005f48:	d1f2      	bne.n	8005f30 <d_maybe_print_fold_expression+0x148>
 8005f4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f54:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005f58:	4798      	blx	r3
 8005f5a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005f5e:	2101      	movs	r1, #1
 8005f60:	3301      	adds	r3, #1
 8005f62:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005f66:	2300      	movs	r3, #0
 8005f68:	e7e4      	b.n	8005f34 <d_maybe_print_fold_expression+0x14c>
 8005f6a:	4d33      	ldr	r5, [pc, #204]	; (8006038 <d_maybe_print_fold_expression+0x250>)
 8005f6c:	2628      	movs	r6, #40	; 0x28
 8005f6e:	f04f 0900 	mov.w	r9, #0
 8005f72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005f76:	f105 0b03 	add.w	fp, r5, #3
 8005f7a:	e00b      	b.n	8005f94 <d_maybe_print_fold_expression+0x1ac>
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	45ab      	cmp	fp, r5
 8005f80:	f101 0101 	add.w	r1, r1, #1
 8005f84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f88:	54e6      	strb	r6, [r4, r3]
 8005f8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005f8e:	d019      	beq.n	8005fc4 <d_maybe_print_fold_expression+0x1dc>
 8005f90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005f94:	29ff      	cmp	r1, #255	; 0xff
 8005f96:	d1f1      	bne.n	8005f7c <d_maybe_print_fold_expression+0x194>
 8005f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fa2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005fa6:	4798      	blx	r3
 8005fa8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fac:	2101      	movs	r1, #1
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	45ab      	cmp	fp, r5
 8005fb8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005fbc:	54e6      	strb	r6, [r4, r3]
 8005fbe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005fc2:	d1e5      	bne.n	8005f90 <d_maybe_print_fold_expression+0x1a8>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	2111      	movs	r1, #17
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff fcbd 	bl	8005948 <d_print_expr_op>
 8005fce:	4652      	mov	r2, sl
 8005fd0:	e777      	b.n	8005ec2 <d_maybe_print_fold_expression+0xda>
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005fe2:	4798      	blx	r3
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fea:	4629      	mov	r1, r5
 8005fec:	4413      	add	r3, r2
 8005fee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ff2:	e76f      	b.n	8005ed4 <d_maybe_print_fold_expression+0xec>
 8005ff4:	2500      	movs	r5, #0
 8005ff6:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005ffa:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005ffe:	4798      	blx	r3
 8006000:	2301      	movs	r3, #1
 8006002:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8006006:	4629      	mov	r1, r5
 8006008:	441a      	add	r2, r3
 800600a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800600e:	e776      	b.n	8005efe <d_maybe_print_fold_expression+0x116>
 8006010:	2500      	movs	r5, #0
 8006012:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8006016:	4620      	mov	r0, r4
 8006018:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800601c:	4798      	blx	r3
 800601e:	2301      	movs	r3, #1
 8006020:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8006024:	4629      	mov	r1, r5
 8006026:	441a      	add	r2, r3
 8006028:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800602c:	e706      	b.n	8005e3c <d_maybe_print_fold_expression+0x54>
 800602e:	bf00      	nop
 8006030:	0800fc00 	.word	0x0800fc00
 8006034:	0800fcfc 	.word	0x0800fcfc
 8006038:	0800fcf4 	.word	0x0800fcf4

0800603c <__cxa_demangle>:
 800603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006040:	461e      	mov	r6, r3
 8006042:	b084      	sub	sp, #16
 8006044:	2800      	cmp	r0, #0
 8006046:	d040      	beq.n	80060ca <__cxa_demangle+0x8e>
 8006048:	460c      	mov	r4, r1
 800604a:	4615      	mov	r5, r2
 800604c:	b109      	cbz	r1, 8006052 <__cxa_demangle+0x16>
 800604e:	2a00      	cmp	r2, #0
 8006050:	d03b      	beq.n	80060ca <__cxa_demangle+0x8e>
 8006052:	2300      	movs	r3, #0
 8006054:	466a      	mov	r2, sp
 8006056:	4929      	ldr	r1, [pc, #164]	; (80060fc <__cxa_demangle+0xc0>)
 8006058:	e9cd 3300 	strd	r3, r3, [sp]
 800605c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006060:	f7ff fcae 	bl	80059c0 <d_demangle_callback.constprop.0>
 8006064:	2800      	cmp	r0, #0
 8006066:	d039      	beq.n	80060dc <__cxa_demangle+0xa0>
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	9f00      	ldr	r7, [sp, #0]
 800606c:	b9d3      	cbnz	r3, 80060a4 <__cxa_demangle+0x68>
 800606e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006072:	2f00      	cmp	r7, #0
 8006074:	d038      	beq.n	80060e8 <__cxa_demangle+0xac>
 8006076:	b32c      	cbz	r4, 80060c4 <__cxa_demangle+0x88>
 8006078:	4638      	mov	r0, r7
 800607a:	f000 f85d 	bl	8006138 <strlen>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	4298      	cmp	r0, r3
 8006082:	d219      	bcs.n	80060b8 <__cxa_demangle+0x7c>
 8006084:	4639      	mov	r1, r7
 8006086:	1c42      	adds	r2, r0, #1
 8006088:	4620      	mov	r0, r4
 800608a:	f007 ff29 	bl	800dee0 <memcpy>
 800608e:	4638      	mov	r0, r7
 8006090:	f007 fcd2 	bl	800da38 <free>
 8006094:	4627      	mov	r7, r4
 8006096:	b10e      	cbz	r6, 800609c <__cxa_demangle+0x60>
 8006098:	2300      	movs	r3, #0
 800609a:	6033      	str	r3, [r6, #0]
 800609c:	4638      	mov	r0, r7
 800609e:	b004      	add	sp, #16
 80060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a4:	f04f 0801 	mov.w	r8, #1
 80060a8:	2f00      	cmp	r7, #0
 80060aa:	d1e4      	bne.n	8006076 <__cxa_demangle+0x3a>
 80060ac:	b1d6      	cbz	r6, 80060e4 <__cxa_demangle+0xa8>
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	2700      	movs	r7, #0
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	e7f1      	b.n	800609c <__cxa_demangle+0x60>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f007 fcbd 	bl	800da38 <free>
 80060be:	f8c5 8000 	str.w	r8, [r5]
 80060c2:	e7e8      	b.n	8006096 <__cxa_demangle+0x5a>
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	d1fa      	bne.n	80060be <__cxa_demangle+0x82>
 80060c8:	e7e5      	b.n	8006096 <__cxa_demangle+0x5a>
 80060ca:	b15e      	cbz	r6, 80060e4 <__cxa_demangle+0xa8>
 80060cc:	2700      	movs	r7, #0
 80060ce:	f06f 0302 	mvn.w	r3, #2
 80060d2:	4638      	mov	r0, r7
 80060d4:	6033      	str	r3, [r6, #0]
 80060d6:	b004      	add	sp, #16
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	9800      	ldr	r0, [sp, #0]
 80060de:	f007 fcab 	bl	800da38 <free>
 80060e2:	b936      	cbnz	r6, 80060f2 <__cxa_demangle+0xb6>
 80060e4:	2700      	movs	r7, #0
 80060e6:	e7d9      	b.n	800609c <__cxa_demangle+0x60>
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	d0fb      	beq.n	80060e4 <__cxa_demangle+0xa8>
 80060ec:	f1b8 0f01 	cmp.w	r8, #1
 80060f0:	d0dd      	beq.n	80060ae <__cxa_demangle+0x72>
 80060f2:	f06f 0301 	mvn.w	r3, #1
 80060f6:	2700      	movs	r7, #0
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	e7cf      	b.n	800609c <__cxa_demangle+0x60>
 80060fc:	0800041d 	.word	0x0800041d

08006100 <__gcclibcxx_demangle_callback>:
 8006100:	b160      	cbz	r0, 800611c <__gcclibcxx_demangle_callback+0x1c>
 8006102:	b508      	push	{r3, lr}
 8006104:	b139      	cbz	r1, 8006116 <__gcclibcxx_demangle_callback+0x16>
 8006106:	f7ff fc5b 	bl	80059c0 <d_demangle_callback.constprop.0>
 800610a:	2800      	cmp	r0, #0
 800610c:	bf14      	ite	ne
 800610e:	2000      	movne	r0, #0
 8006110:	f06f 0001 	mvneq.w	r0, #1
 8006114:	bd08      	pop	{r3, pc}
 8006116:	f06f 0002 	mvn.w	r0, #2
 800611a:	bd08      	pop	{r3, pc}
 800611c:	f06f 0002 	mvn.w	r0, #2
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop

08006124 <strcmp>:
 8006124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800612c:	2a01      	cmp	r2, #1
 800612e:	bf28      	it	cs
 8006130:	429a      	cmpcs	r2, r3
 8006132:	d0f7      	beq.n	8006124 <strcmp>
 8006134:	1ad0      	subs	r0, r2, r3
 8006136:	4770      	bx	lr

08006138 <strlen>:
 8006138:	4603      	mov	r3, r0
 800613a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800613e:	2a00      	cmp	r2, #0
 8006140:	d1fb      	bne.n	800613a <strlen+0x2>
 8006142:	1a18      	subs	r0, r3, r0
 8006144:	3801      	subs	r0, #1
 8006146:	4770      	bx	lr

08006148 <__aeabi_drsub>:
 8006148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800614c:	e002      	b.n	8006154 <__adddf3>
 800614e:	bf00      	nop

08006150 <__aeabi_dsub>:
 8006150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006154 <__adddf3>:
 8006154:	b530      	push	{r4, r5, lr}
 8006156:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800615a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800615e:	ea94 0f05 	teq	r4, r5
 8006162:	bf08      	it	eq
 8006164:	ea90 0f02 	teqeq	r0, r2
 8006168:	bf1f      	itttt	ne
 800616a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800616e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800617a:	f000 80e2 	beq.w	8006342 <__adddf3+0x1ee>
 800617e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006186:	bfb8      	it	lt
 8006188:	426d      	neglt	r5, r5
 800618a:	dd0c      	ble.n	80061a6 <__adddf3+0x52>
 800618c:	442c      	add	r4, r5
 800618e:	ea80 0202 	eor.w	r2, r0, r2
 8006192:	ea81 0303 	eor.w	r3, r1, r3
 8006196:	ea82 0000 	eor.w	r0, r2, r0
 800619a:	ea83 0101 	eor.w	r1, r3, r1
 800619e:	ea80 0202 	eor.w	r2, r0, r2
 80061a2:	ea81 0303 	eor.w	r3, r1, r3
 80061a6:	2d36      	cmp	r5, #54	; 0x36
 80061a8:	bf88      	it	hi
 80061aa:	bd30      	pophi	{r4, r5, pc}
 80061ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80061b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80061b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80061b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80061bc:	d002      	beq.n	80061c4 <__adddf3+0x70>
 80061be:	4240      	negs	r0, r0
 80061c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80061c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80061c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80061cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80061d0:	d002      	beq.n	80061d8 <__adddf3+0x84>
 80061d2:	4252      	negs	r2, r2
 80061d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80061d8:	ea94 0f05 	teq	r4, r5
 80061dc:	f000 80a7 	beq.w	800632e <__adddf3+0x1da>
 80061e0:	f1a4 0401 	sub.w	r4, r4, #1
 80061e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80061e8:	db0d      	blt.n	8006206 <__adddf3+0xb2>
 80061ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80061ee:	fa22 f205 	lsr.w	r2, r2, r5
 80061f2:	1880      	adds	r0, r0, r2
 80061f4:	f141 0100 	adc.w	r1, r1, #0
 80061f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80061fc:	1880      	adds	r0, r0, r2
 80061fe:	fa43 f305 	asr.w	r3, r3, r5
 8006202:	4159      	adcs	r1, r3
 8006204:	e00e      	b.n	8006224 <__adddf3+0xd0>
 8006206:	f1a5 0520 	sub.w	r5, r5, #32
 800620a:	f10e 0e20 	add.w	lr, lr, #32
 800620e:	2a01      	cmp	r2, #1
 8006210:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006214:	bf28      	it	cs
 8006216:	f04c 0c02 	orrcs.w	ip, ip, #2
 800621a:	fa43 f305 	asr.w	r3, r3, r5
 800621e:	18c0      	adds	r0, r0, r3
 8006220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006228:	d507      	bpl.n	800623a <__adddf3+0xe6>
 800622a:	f04f 0e00 	mov.w	lr, #0
 800622e:	f1dc 0c00 	rsbs	ip, ip, #0
 8006232:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006236:	eb6e 0101 	sbc.w	r1, lr, r1
 800623a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800623e:	d31b      	bcc.n	8006278 <__adddf3+0x124>
 8006240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006244:	d30c      	bcc.n	8006260 <__adddf3+0x10c>
 8006246:	0849      	lsrs	r1, r1, #1
 8006248:	ea5f 0030 	movs.w	r0, r0, rrx
 800624c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006250:	f104 0401 	add.w	r4, r4, #1
 8006254:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800625c:	f080 809a 	bcs.w	8006394 <__adddf3+0x240>
 8006260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006264:	bf08      	it	eq
 8006266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800626a:	f150 0000 	adcs.w	r0, r0, #0
 800626e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006272:	ea41 0105 	orr.w	r1, r1, r5
 8006276:	bd30      	pop	{r4, r5, pc}
 8006278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800627c:	4140      	adcs	r0, r0
 800627e:	eb41 0101 	adc.w	r1, r1, r1
 8006282:	3c01      	subs	r4, #1
 8006284:	bf28      	it	cs
 8006286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800628a:	d2e9      	bcs.n	8006260 <__adddf3+0x10c>
 800628c:	f091 0f00 	teq	r1, #0
 8006290:	bf04      	itt	eq
 8006292:	4601      	moveq	r1, r0
 8006294:	2000      	moveq	r0, #0
 8006296:	fab1 f381 	clz	r3, r1
 800629a:	bf08      	it	eq
 800629c:	3320      	addeq	r3, #32
 800629e:	f1a3 030b 	sub.w	r3, r3, #11
 80062a2:	f1b3 0220 	subs.w	r2, r3, #32
 80062a6:	da0c      	bge.n	80062c2 <__adddf3+0x16e>
 80062a8:	320c      	adds	r2, #12
 80062aa:	dd08      	ble.n	80062be <__adddf3+0x16a>
 80062ac:	f102 0c14 	add.w	ip, r2, #20
 80062b0:	f1c2 020c 	rsb	r2, r2, #12
 80062b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80062b8:	fa21 f102 	lsr.w	r1, r1, r2
 80062bc:	e00c      	b.n	80062d8 <__adddf3+0x184>
 80062be:	f102 0214 	add.w	r2, r2, #20
 80062c2:	bfd8      	it	le
 80062c4:	f1c2 0c20 	rsble	ip, r2, #32
 80062c8:	fa01 f102 	lsl.w	r1, r1, r2
 80062cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80062d0:	bfdc      	itt	le
 80062d2:	ea41 010c 	orrle.w	r1, r1, ip
 80062d6:	4090      	lslle	r0, r2
 80062d8:	1ae4      	subs	r4, r4, r3
 80062da:	bfa2      	ittt	ge
 80062dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80062e0:	4329      	orrge	r1, r5
 80062e2:	bd30      	popge	{r4, r5, pc}
 80062e4:	ea6f 0404 	mvn.w	r4, r4
 80062e8:	3c1f      	subs	r4, #31
 80062ea:	da1c      	bge.n	8006326 <__adddf3+0x1d2>
 80062ec:	340c      	adds	r4, #12
 80062ee:	dc0e      	bgt.n	800630e <__adddf3+0x1ba>
 80062f0:	f104 0414 	add.w	r4, r4, #20
 80062f4:	f1c4 0220 	rsb	r2, r4, #32
 80062f8:	fa20 f004 	lsr.w	r0, r0, r4
 80062fc:	fa01 f302 	lsl.w	r3, r1, r2
 8006300:	ea40 0003 	orr.w	r0, r0, r3
 8006304:	fa21 f304 	lsr.w	r3, r1, r4
 8006308:	ea45 0103 	orr.w	r1, r5, r3
 800630c:	bd30      	pop	{r4, r5, pc}
 800630e:	f1c4 040c 	rsb	r4, r4, #12
 8006312:	f1c4 0220 	rsb	r2, r4, #32
 8006316:	fa20 f002 	lsr.w	r0, r0, r2
 800631a:	fa01 f304 	lsl.w	r3, r1, r4
 800631e:	ea40 0003 	orr.w	r0, r0, r3
 8006322:	4629      	mov	r1, r5
 8006324:	bd30      	pop	{r4, r5, pc}
 8006326:	fa21 f004 	lsr.w	r0, r1, r4
 800632a:	4629      	mov	r1, r5
 800632c:	bd30      	pop	{r4, r5, pc}
 800632e:	f094 0f00 	teq	r4, #0
 8006332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006336:	bf06      	itte	eq
 8006338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800633c:	3401      	addeq	r4, #1
 800633e:	3d01      	subne	r5, #1
 8006340:	e74e      	b.n	80061e0 <__adddf3+0x8c>
 8006342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006346:	bf18      	it	ne
 8006348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800634c:	d029      	beq.n	80063a2 <__adddf3+0x24e>
 800634e:	ea94 0f05 	teq	r4, r5
 8006352:	bf08      	it	eq
 8006354:	ea90 0f02 	teqeq	r0, r2
 8006358:	d005      	beq.n	8006366 <__adddf3+0x212>
 800635a:	ea54 0c00 	orrs.w	ip, r4, r0
 800635e:	bf04      	itt	eq
 8006360:	4619      	moveq	r1, r3
 8006362:	4610      	moveq	r0, r2
 8006364:	bd30      	pop	{r4, r5, pc}
 8006366:	ea91 0f03 	teq	r1, r3
 800636a:	bf1e      	ittt	ne
 800636c:	2100      	movne	r1, #0
 800636e:	2000      	movne	r0, #0
 8006370:	bd30      	popne	{r4, r5, pc}
 8006372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006376:	d105      	bne.n	8006384 <__adddf3+0x230>
 8006378:	0040      	lsls	r0, r0, #1
 800637a:	4149      	adcs	r1, r1
 800637c:	bf28      	it	cs
 800637e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006388:	bf3c      	itt	cc
 800638a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800638e:	bd30      	popcc	{r4, r5, pc}
 8006390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639c:	f04f 0000 	mov.w	r0, #0
 80063a0:	bd30      	pop	{r4, r5, pc}
 80063a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80063a6:	bf1a      	itte	ne
 80063a8:	4619      	movne	r1, r3
 80063aa:	4610      	movne	r0, r2
 80063ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80063b0:	bf1c      	itt	ne
 80063b2:	460b      	movne	r3, r1
 80063b4:	4602      	movne	r2, r0
 80063b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80063ba:	bf06      	itte	eq
 80063bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80063c0:	ea91 0f03 	teqeq	r1, r3
 80063c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80063c8:	bd30      	pop	{r4, r5, pc}
 80063ca:	bf00      	nop

080063cc <__aeabi_ui2d>:
 80063cc:	f090 0f00 	teq	r0, #0
 80063d0:	bf04      	itt	eq
 80063d2:	2100      	moveq	r1, #0
 80063d4:	4770      	bxeq	lr
 80063d6:	b530      	push	{r4, r5, lr}
 80063d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80063dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80063e0:	f04f 0500 	mov.w	r5, #0
 80063e4:	f04f 0100 	mov.w	r1, #0
 80063e8:	e750      	b.n	800628c <__adddf3+0x138>
 80063ea:	bf00      	nop

080063ec <__aeabi_i2d>:
 80063ec:	f090 0f00 	teq	r0, #0
 80063f0:	bf04      	itt	eq
 80063f2:	2100      	moveq	r1, #0
 80063f4:	4770      	bxeq	lr
 80063f6:	b530      	push	{r4, r5, lr}
 80063f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80063fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006404:	bf48      	it	mi
 8006406:	4240      	negmi	r0, r0
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	e73e      	b.n	800628c <__adddf3+0x138>
 800640e:	bf00      	nop

08006410 <__aeabi_f2d>:
 8006410:	0042      	lsls	r2, r0, #1
 8006412:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006416:	ea4f 0131 	mov.w	r1, r1, rrx
 800641a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800641e:	bf1f      	itttt	ne
 8006420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800642c:	4770      	bxne	lr
 800642e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006432:	bf08      	it	eq
 8006434:	4770      	bxeq	lr
 8006436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800643a:	bf04      	itt	eq
 800643c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006440:	4770      	bxeq	lr
 8006442:	b530      	push	{r4, r5, lr}
 8006444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800644c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006450:	e71c      	b.n	800628c <__adddf3+0x138>
 8006452:	bf00      	nop

08006454 <__aeabi_ul2d>:
 8006454:	ea50 0201 	orrs.w	r2, r0, r1
 8006458:	bf08      	it	eq
 800645a:	4770      	bxeq	lr
 800645c:	b530      	push	{r4, r5, lr}
 800645e:	f04f 0500 	mov.w	r5, #0
 8006462:	e00a      	b.n	800647a <__aeabi_l2d+0x16>

08006464 <__aeabi_l2d>:
 8006464:	ea50 0201 	orrs.w	r2, r0, r1
 8006468:	bf08      	it	eq
 800646a:	4770      	bxeq	lr
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006472:	d502      	bpl.n	800647a <__aeabi_l2d+0x16>
 8006474:	4240      	negs	r0, r0
 8006476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800647a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800647e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006486:	f43f aed8 	beq.w	800623a <__adddf3+0xe6>
 800648a:	f04f 0203 	mov.w	r2, #3
 800648e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006492:	bf18      	it	ne
 8006494:	3203      	addne	r2, #3
 8006496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800649a:	bf18      	it	ne
 800649c:	3203      	addne	r2, #3
 800649e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80064a2:	f1c2 0320 	rsb	r3, r2, #32
 80064a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80064aa:	fa20 f002 	lsr.w	r0, r0, r2
 80064ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80064b2:	ea40 000e 	orr.w	r0, r0, lr
 80064b6:	fa21 f102 	lsr.w	r1, r1, r2
 80064ba:	4414      	add	r4, r2
 80064bc:	e6bd      	b.n	800623a <__adddf3+0xe6>
 80064be:	bf00      	nop

080064c0 <__aeabi_dmul>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80064c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80064ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80064ce:	bf1d      	ittte	ne
 80064d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80064d4:	ea94 0f0c 	teqne	r4, ip
 80064d8:	ea95 0f0c 	teqne	r5, ip
 80064dc:	f000 f8de 	bleq	800669c <__aeabi_dmul+0x1dc>
 80064e0:	442c      	add	r4, r5
 80064e2:	ea81 0603 	eor.w	r6, r1, r3
 80064e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80064ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80064ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80064f2:	bf18      	it	ne
 80064f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80064f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006500:	d038      	beq.n	8006574 <__aeabi_dmul+0xb4>
 8006502:	fba0 ce02 	umull	ip, lr, r0, r2
 8006506:	f04f 0500 	mov.w	r5, #0
 800650a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800650e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800651e:	f09c 0f00 	teq	ip, #0
 8006522:	bf18      	it	ne
 8006524:	f04e 0e01 	orrne.w	lr, lr, #1
 8006528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800652c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006534:	d204      	bcs.n	8006540 <__aeabi_dmul+0x80>
 8006536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800653a:	416d      	adcs	r5, r5
 800653c:	eb46 0606 	adc.w	r6, r6, r6
 8006540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800654c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006558:	bf88      	it	hi
 800655a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800655e:	d81e      	bhi.n	800659e <__aeabi_dmul+0xde>
 8006560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006564:	bf08      	it	eq
 8006566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800656a:	f150 0000 	adcs.w	r0, r0, #0
 800656e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006578:	ea46 0101 	orr.w	r1, r6, r1
 800657c:	ea40 0002 	orr.w	r0, r0, r2
 8006580:	ea81 0103 	eor.w	r1, r1, r3
 8006584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006588:	bfc2      	ittt	gt
 800658a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800658e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006592:	bd70      	popgt	{r4, r5, r6, pc}
 8006594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006598:	f04f 0e00 	mov.w	lr, #0
 800659c:	3c01      	subs	r4, #1
 800659e:	f300 80ab 	bgt.w	80066f8 <__aeabi_dmul+0x238>
 80065a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80065a6:	bfde      	ittt	le
 80065a8:	2000      	movle	r0, #0
 80065aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80065ae:	bd70      	pople	{r4, r5, r6, pc}
 80065b0:	f1c4 0400 	rsb	r4, r4, #0
 80065b4:	3c20      	subs	r4, #32
 80065b6:	da35      	bge.n	8006624 <__aeabi_dmul+0x164>
 80065b8:	340c      	adds	r4, #12
 80065ba:	dc1b      	bgt.n	80065f4 <__aeabi_dmul+0x134>
 80065bc:	f104 0414 	add.w	r4, r4, #20
 80065c0:	f1c4 0520 	rsb	r5, r4, #32
 80065c4:	fa00 f305 	lsl.w	r3, r0, r5
 80065c8:	fa20 f004 	lsr.w	r0, r0, r4
 80065cc:	fa01 f205 	lsl.w	r2, r1, r5
 80065d0:	ea40 0002 	orr.w	r0, r0, r2
 80065d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80065d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80065dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80065e0:	fa21 f604 	lsr.w	r6, r1, r4
 80065e4:	eb42 0106 	adc.w	r1, r2, r6
 80065e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80065ec:	bf08      	it	eq
 80065ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f1c4 040c 	rsb	r4, r4, #12
 80065f8:	f1c4 0520 	rsb	r5, r4, #32
 80065fc:	fa00 f304 	lsl.w	r3, r0, r4
 8006600:	fa20 f005 	lsr.w	r0, r0, r5
 8006604:	fa01 f204 	lsl.w	r2, r1, r4
 8006608:	ea40 0002 	orr.w	r0, r0, r2
 800660c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006614:	f141 0100 	adc.w	r1, r1, #0
 8006618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800661c:	bf08      	it	eq
 800661e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f1c4 0520 	rsb	r5, r4, #32
 8006628:	fa00 f205 	lsl.w	r2, r0, r5
 800662c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006630:	fa20 f304 	lsr.w	r3, r0, r4
 8006634:	fa01 f205 	lsl.w	r2, r1, r5
 8006638:	ea43 0302 	orr.w	r3, r3, r2
 800663c:	fa21 f004 	lsr.w	r0, r1, r4
 8006640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006644:	fa21 f204 	lsr.w	r2, r1, r4
 8006648:	ea20 0002 	bic.w	r0, r0, r2
 800664c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006654:	bf08      	it	eq
 8006656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f094 0f00 	teq	r4, #0
 8006660:	d10f      	bne.n	8006682 <__aeabi_dmul+0x1c2>
 8006662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006666:	0040      	lsls	r0, r0, #1
 8006668:	eb41 0101 	adc.w	r1, r1, r1
 800666c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006670:	bf08      	it	eq
 8006672:	3c01      	subeq	r4, #1
 8006674:	d0f7      	beq.n	8006666 <__aeabi_dmul+0x1a6>
 8006676:	ea41 0106 	orr.w	r1, r1, r6
 800667a:	f095 0f00 	teq	r5, #0
 800667e:	bf18      	it	ne
 8006680:	4770      	bxne	lr
 8006682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006686:	0052      	lsls	r2, r2, #1
 8006688:	eb43 0303 	adc.w	r3, r3, r3
 800668c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006690:	bf08      	it	eq
 8006692:	3d01      	subeq	r5, #1
 8006694:	d0f7      	beq.n	8006686 <__aeabi_dmul+0x1c6>
 8006696:	ea43 0306 	orr.w	r3, r3, r6
 800669a:	4770      	bx	lr
 800669c:	ea94 0f0c 	teq	r4, ip
 80066a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80066a4:	bf18      	it	ne
 80066a6:	ea95 0f0c 	teqne	r5, ip
 80066aa:	d00c      	beq.n	80066c6 <__aeabi_dmul+0x206>
 80066ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066b0:	bf18      	it	ne
 80066b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066b6:	d1d1      	bne.n	800665c <__aeabi_dmul+0x19c>
 80066b8:	ea81 0103 	eor.w	r1, r1, r3
 80066bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066c0:	f04f 0000 	mov.w	r0, #0
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066ca:	bf06      	itte	eq
 80066cc:	4610      	moveq	r0, r2
 80066ce:	4619      	moveq	r1, r3
 80066d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066d4:	d019      	beq.n	800670a <__aeabi_dmul+0x24a>
 80066d6:	ea94 0f0c 	teq	r4, ip
 80066da:	d102      	bne.n	80066e2 <__aeabi_dmul+0x222>
 80066dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80066e0:	d113      	bne.n	800670a <__aeabi_dmul+0x24a>
 80066e2:	ea95 0f0c 	teq	r5, ip
 80066e6:	d105      	bne.n	80066f4 <__aeabi_dmul+0x234>
 80066e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80066ec:	bf1c      	itt	ne
 80066ee:	4610      	movne	r0, r2
 80066f0:	4619      	movne	r1, r3
 80066f2:	d10a      	bne.n	800670a <__aeabi_dmul+0x24a>
 80066f4:	ea81 0103 	eor.w	r1, r1, r3
 80066f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006704:	f04f 0000 	mov.w	r0, #0
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800670e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__aeabi_ddiv>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800671a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800671e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006722:	bf1d      	ittte	ne
 8006724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006728:	ea94 0f0c 	teqne	r4, ip
 800672c:	ea95 0f0c 	teqne	r5, ip
 8006730:	f000 f8a7 	bleq	8006882 <__aeabi_ddiv+0x16e>
 8006734:	eba4 0405 	sub.w	r4, r4, r5
 8006738:	ea81 0e03 	eor.w	lr, r1, r3
 800673c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006744:	f000 8088 	beq.w	8006858 <__aeabi_ddiv+0x144>
 8006748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800674c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800675c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800676c:	429d      	cmp	r5, r3
 800676e:	bf08      	it	eq
 8006770:	4296      	cmpeq	r6, r2
 8006772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800677a:	d202      	bcs.n	8006782 <__aeabi_ddiv+0x6e>
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006782:	1ab6      	subs	r6, r6, r2
 8006784:	eb65 0503 	sbc.w	r5, r5, r3
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	ea4f 0232 	mov.w	r2, r2, rrx
 800678e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006796:	ebb6 0e02 	subs.w	lr, r6, r2
 800679a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800679e:	bf22      	ittt	cs
 80067a0:	1ab6      	subcs	r6, r6, r2
 80067a2:	4675      	movcs	r5, lr
 80067a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80067ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80067b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067b6:	bf22      	ittt	cs
 80067b8:	1ab6      	subcs	r6, r6, r2
 80067ba:	4675      	movcs	r5, lr
 80067bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80067c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80067ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067ce:	bf22      	ittt	cs
 80067d0:	1ab6      	subcs	r6, r6, r2
 80067d2:	4675      	movcs	r5, lr
 80067d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	ea4f 0232 	mov.w	r2, r2, rrx
 80067de:	ebb6 0e02 	subs.w	lr, r6, r2
 80067e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067e6:	bf22      	ittt	cs
 80067e8:	1ab6      	subcs	r6, r6, r2
 80067ea:	4675      	movcs	r5, lr
 80067ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80067f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80067f4:	d018      	beq.n	8006828 <__aeabi_ddiv+0x114>
 80067f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80067fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80067fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800680a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800680e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006812:	d1c0      	bne.n	8006796 <__aeabi_ddiv+0x82>
 8006814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006818:	d10b      	bne.n	8006832 <__aeabi_ddiv+0x11e>
 800681a:	ea41 0100 	orr.w	r1, r1, r0
 800681e:	f04f 0000 	mov.w	r0, #0
 8006822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006826:	e7b6      	b.n	8006796 <__aeabi_ddiv+0x82>
 8006828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800682c:	bf04      	itt	eq
 800682e:	4301      	orreq	r1, r0
 8006830:	2000      	moveq	r0, #0
 8006832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006836:	bf88      	it	hi
 8006838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800683c:	f63f aeaf 	bhi.w	800659e <__aeabi_dmul+0xde>
 8006840:	ebb5 0c03 	subs.w	ip, r5, r3
 8006844:	bf04      	itt	eq
 8006846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800684a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800684e:	f150 0000 	adcs.w	r0, r0, #0
 8006852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800685c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006864:	bfc2      	ittt	gt
 8006866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800686a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800686e:	bd70      	popgt	{r4, r5, r6, pc}
 8006870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006874:	f04f 0e00 	mov.w	lr, #0
 8006878:	3c01      	subs	r4, #1
 800687a:	e690      	b.n	800659e <__aeabi_dmul+0xde>
 800687c:	ea45 0e06 	orr.w	lr, r5, r6
 8006880:	e68d      	b.n	800659e <__aeabi_dmul+0xde>
 8006882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006886:	ea94 0f0c 	teq	r4, ip
 800688a:	bf08      	it	eq
 800688c:	ea95 0f0c 	teqeq	r5, ip
 8006890:	f43f af3b 	beq.w	800670a <__aeabi_dmul+0x24a>
 8006894:	ea94 0f0c 	teq	r4, ip
 8006898:	d10a      	bne.n	80068b0 <__aeabi_ddiv+0x19c>
 800689a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800689e:	f47f af34 	bne.w	800670a <__aeabi_dmul+0x24a>
 80068a2:	ea95 0f0c 	teq	r5, ip
 80068a6:	f47f af25 	bne.w	80066f4 <__aeabi_dmul+0x234>
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	e72c      	b.n	800670a <__aeabi_dmul+0x24a>
 80068b0:	ea95 0f0c 	teq	r5, ip
 80068b4:	d106      	bne.n	80068c4 <__aeabi_ddiv+0x1b0>
 80068b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80068ba:	f43f aefd 	beq.w	80066b8 <__aeabi_dmul+0x1f8>
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	e722      	b.n	800670a <__aeabi_dmul+0x24a>
 80068c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068c8:	bf18      	it	ne
 80068ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068ce:	f47f aec5 	bne.w	800665c <__aeabi_dmul+0x19c>
 80068d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80068d6:	f47f af0d 	bne.w	80066f4 <__aeabi_dmul+0x234>
 80068da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80068de:	f47f aeeb 	bne.w	80066b8 <__aeabi_dmul+0x1f8>
 80068e2:	e712      	b.n	800670a <__aeabi_dmul+0x24a>

080068e4 <__gedf2>:
 80068e4:	f04f 3cff 	mov.w	ip, #4294967295
 80068e8:	e006      	b.n	80068f8 <__cmpdf2+0x4>
 80068ea:	bf00      	nop

080068ec <__ledf2>:
 80068ec:	f04f 0c01 	mov.w	ip, #1
 80068f0:	e002      	b.n	80068f8 <__cmpdf2+0x4>
 80068f2:	bf00      	nop

080068f4 <__cmpdf2>:
 80068f4:	f04f 0c01 	mov.w	ip, #1
 80068f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80068fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006908:	bf18      	it	ne
 800690a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800690e:	d01b      	beq.n	8006948 <__cmpdf2+0x54>
 8006910:	b001      	add	sp, #4
 8006912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006916:	bf0c      	ite	eq
 8006918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800691c:	ea91 0f03 	teqne	r1, r3
 8006920:	bf02      	ittt	eq
 8006922:	ea90 0f02 	teqeq	r0, r2
 8006926:	2000      	moveq	r0, #0
 8006928:	4770      	bxeq	lr
 800692a:	f110 0f00 	cmn.w	r0, #0
 800692e:	ea91 0f03 	teq	r1, r3
 8006932:	bf58      	it	pl
 8006934:	4299      	cmppl	r1, r3
 8006936:	bf08      	it	eq
 8006938:	4290      	cmpeq	r0, r2
 800693a:	bf2c      	ite	cs
 800693c:	17d8      	asrcs	r0, r3, #31
 800693e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006942:	f040 0001 	orr.w	r0, r0, #1
 8006946:	4770      	bx	lr
 8006948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800694c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006950:	d102      	bne.n	8006958 <__cmpdf2+0x64>
 8006952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006956:	d107      	bne.n	8006968 <__cmpdf2+0x74>
 8006958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800695c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006960:	d1d6      	bne.n	8006910 <__cmpdf2+0x1c>
 8006962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006966:	d0d3      	beq.n	8006910 <__cmpdf2+0x1c>
 8006968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <__aeabi_cdrcmple>:
 8006970:	4684      	mov	ip, r0
 8006972:	4610      	mov	r0, r2
 8006974:	4662      	mov	r2, ip
 8006976:	468c      	mov	ip, r1
 8006978:	4619      	mov	r1, r3
 800697a:	4663      	mov	r3, ip
 800697c:	e000      	b.n	8006980 <__aeabi_cdcmpeq>
 800697e:	bf00      	nop

08006980 <__aeabi_cdcmpeq>:
 8006980:	b501      	push	{r0, lr}
 8006982:	f7ff ffb7 	bl	80068f4 <__cmpdf2>
 8006986:	2800      	cmp	r0, #0
 8006988:	bf48      	it	mi
 800698a:	f110 0f00 	cmnmi.w	r0, #0
 800698e:	bd01      	pop	{r0, pc}

08006990 <__aeabi_dcmpeq>:
 8006990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006994:	f7ff fff4 	bl	8006980 <__aeabi_cdcmpeq>
 8006998:	bf0c      	ite	eq
 800699a:	2001      	moveq	r0, #1
 800699c:	2000      	movne	r0, #0
 800699e:	f85d fb08 	ldr.w	pc, [sp], #8
 80069a2:	bf00      	nop

080069a4 <__aeabi_dcmplt>:
 80069a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069a8:	f7ff ffea 	bl	8006980 <__aeabi_cdcmpeq>
 80069ac:	bf34      	ite	cc
 80069ae:	2001      	movcc	r0, #1
 80069b0:	2000      	movcs	r0, #0
 80069b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80069b6:	bf00      	nop

080069b8 <__aeabi_dcmple>:
 80069b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069bc:	f7ff ffe0 	bl	8006980 <__aeabi_cdcmpeq>
 80069c0:	bf94      	ite	ls
 80069c2:	2001      	movls	r0, #1
 80069c4:	2000      	movhi	r0, #0
 80069c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80069ca:	bf00      	nop

080069cc <__aeabi_dcmpge>:
 80069cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069d0:	f7ff ffce 	bl	8006970 <__aeabi_cdrcmple>
 80069d4:	bf94      	ite	ls
 80069d6:	2001      	movls	r0, #1
 80069d8:	2000      	movhi	r0, #0
 80069da:	f85d fb08 	ldr.w	pc, [sp], #8
 80069de:	bf00      	nop

080069e0 <__aeabi_dcmpgt>:
 80069e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069e4:	f7ff ffc4 	bl	8006970 <__aeabi_cdrcmple>
 80069e8:	bf34      	ite	cc
 80069ea:	2001      	movcc	r0, #1
 80069ec:	2000      	movcs	r0, #0
 80069ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80069f2:	bf00      	nop

080069f4 <__aeabi_d2f>:
 80069f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80069f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80069fc:	bf24      	itt	cs
 80069fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006a06:	d90d      	bls.n	8006a24 <__aeabi_d2f+0x30>
 8006a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006a1c:	bf08      	it	eq
 8006a1e:	f020 0001 	biceq.w	r0, r0, #1
 8006a22:	4770      	bx	lr
 8006a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006a28:	d121      	bne.n	8006a6e <__aeabi_d2f+0x7a>
 8006a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006a2e:	bfbc      	itt	lt
 8006a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006a34:	4770      	bxlt	lr
 8006a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006a3e:	f1c2 0218 	rsb	r2, r2, #24
 8006a42:	f1c2 0c20 	rsb	ip, r2, #32
 8006a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8006a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8006a4e:	bf18      	it	ne
 8006a50:	f040 0001 	orrne.w	r0, r0, #1
 8006a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006a60:	ea40 000c 	orr.w	r0, r0, ip
 8006a64:	fa23 f302 	lsr.w	r3, r3, r2
 8006a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a6c:	e7cc      	b.n	8006a08 <__aeabi_d2f+0x14>
 8006a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006a72:	d107      	bne.n	8006a84 <__aeabi_d2f+0x90>
 8006a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006a78:	bf1e      	ittt	ne
 8006a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006a82:	4770      	bxne	lr
 8006a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <__aeabi_frsub>:
 8006a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006a98:	e002      	b.n	8006aa0 <__addsf3>
 8006a9a:	bf00      	nop

08006a9c <__aeabi_fsub>:
 8006a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006aa0 <__addsf3>:
 8006aa0:	0042      	lsls	r2, r0, #1
 8006aa2:	bf1f      	itttt	ne
 8006aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006aa8:	ea92 0f03 	teqne	r2, r3
 8006aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006ab4:	d06a      	beq.n	8006b8c <__addsf3+0xec>
 8006ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006abe:	bfc1      	itttt	gt
 8006ac0:	18d2      	addgt	r2, r2, r3
 8006ac2:	4041      	eorgt	r1, r0
 8006ac4:	4048      	eorgt	r0, r1
 8006ac6:	4041      	eorgt	r1, r0
 8006ac8:	bfb8      	it	lt
 8006aca:	425b      	neglt	r3, r3
 8006acc:	2b19      	cmp	r3, #25
 8006ace:	bf88      	it	hi
 8006ad0:	4770      	bxhi	lr
 8006ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8006ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006ade:	bf18      	it	ne
 8006ae0:	4240      	negne	r0, r0
 8006ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006aee:	bf18      	it	ne
 8006af0:	4249      	negne	r1, r1
 8006af2:	ea92 0f03 	teq	r2, r3
 8006af6:	d03f      	beq.n	8006b78 <__addsf3+0xd8>
 8006af8:	f1a2 0201 	sub.w	r2, r2, #1
 8006afc:	fa41 fc03 	asr.w	ip, r1, r3
 8006b00:	eb10 000c 	adds.w	r0, r0, ip
 8006b04:	f1c3 0320 	rsb	r3, r3, #32
 8006b08:	fa01 f103 	lsl.w	r1, r1, r3
 8006b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006b10:	d502      	bpl.n	8006b18 <__addsf3+0x78>
 8006b12:	4249      	negs	r1, r1
 8006b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006b1c:	d313      	bcc.n	8006b46 <__addsf3+0xa6>
 8006b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006b22:	d306      	bcc.n	8006b32 <__addsf3+0x92>
 8006b24:	0840      	lsrs	r0, r0, #1
 8006b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8006b2a:	f102 0201 	add.w	r2, r2, #1
 8006b2e:	2afe      	cmp	r2, #254	; 0xfe
 8006b30:	d251      	bcs.n	8006bd6 <__addsf3+0x136>
 8006b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006b3a:	bf08      	it	eq
 8006b3c:	f020 0001 	biceq.w	r0, r0, #1
 8006b40:	ea40 0003 	orr.w	r0, r0, r3
 8006b44:	4770      	bx	lr
 8006b46:	0049      	lsls	r1, r1, #1
 8006b48:	eb40 0000 	adc.w	r0, r0, r0
 8006b4c:	3a01      	subs	r2, #1
 8006b4e:	bf28      	it	cs
 8006b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8006b54:	d2ed      	bcs.n	8006b32 <__addsf3+0x92>
 8006b56:	fab0 fc80 	clz	ip, r0
 8006b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8006b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8006b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8006b66:	bfaa      	itet	ge
 8006b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006b6c:	4252      	neglt	r2, r2
 8006b6e:	4318      	orrge	r0, r3
 8006b70:	bfbc      	itt	lt
 8006b72:	40d0      	lsrlt	r0, r2
 8006b74:	4318      	orrlt	r0, r3
 8006b76:	4770      	bx	lr
 8006b78:	f092 0f00 	teq	r2, #0
 8006b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006b80:	bf06      	itte	eq
 8006b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8006b86:	3201      	addeq	r2, #1
 8006b88:	3b01      	subne	r3, #1
 8006b8a:	e7b5      	b.n	8006af8 <__addsf3+0x58>
 8006b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006b94:	bf18      	it	ne
 8006b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006b9a:	d021      	beq.n	8006be0 <__addsf3+0x140>
 8006b9c:	ea92 0f03 	teq	r2, r3
 8006ba0:	d004      	beq.n	8006bac <__addsf3+0x10c>
 8006ba2:	f092 0f00 	teq	r2, #0
 8006ba6:	bf08      	it	eq
 8006ba8:	4608      	moveq	r0, r1
 8006baa:	4770      	bx	lr
 8006bac:	ea90 0f01 	teq	r0, r1
 8006bb0:	bf1c      	itt	ne
 8006bb2:	2000      	movne	r0, #0
 8006bb4:	4770      	bxne	lr
 8006bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006bba:	d104      	bne.n	8006bc6 <__addsf3+0x126>
 8006bbc:	0040      	lsls	r0, r0, #1
 8006bbe:	bf28      	it	cs
 8006bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006bc4:	4770      	bx	lr
 8006bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006bca:	bf3c      	itt	cc
 8006bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006bd0:	4770      	bxcc	lr
 8006bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006bde:	4770      	bx	lr
 8006be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006be4:	bf16      	itet	ne
 8006be6:	4608      	movne	r0, r1
 8006be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006bec:	4601      	movne	r1, r0
 8006bee:	0242      	lsls	r2, r0, #9
 8006bf0:	bf06      	itte	eq
 8006bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8006bf6:	ea90 0f01 	teqeq	r0, r1
 8006bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006bfe:	4770      	bx	lr

08006c00 <__aeabi_ui2f>:
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	e004      	b.n	8006c10 <__aeabi_i2f+0x8>
 8006c06:	bf00      	nop

08006c08 <__aeabi_i2f>:
 8006c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006c0c:	bf48      	it	mi
 8006c0e:	4240      	negmi	r0, r0
 8006c10:	ea5f 0c00 	movs.w	ip, r0
 8006c14:	bf08      	it	eq
 8006c16:	4770      	bxeq	lr
 8006c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	f04f 0000 	mov.w	r0, #0
 8006c22:	e01c      	b.n	8006c5e <__aeabi_l2f+0x2a>

08006c24 <__aeabi_ul2f>:
 8006c24:	ea50 0201 	orrs.w	r2, r0, r1
 8006c28:	bf08      	it	eq
 8006c2a:	4770      	bxeq	lr
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e00a      	b.n	8006c48 <__aeabi_l2f+0x14>
 8006c32:	bf00      	nop

08006c34 <__aeabi_l2f>:
 8006c34:	ea50 0201 	orrs.w	r2, r0, r1
 8006c38:	bf08      	it	eq
 8006c3a:	4770      	bxeq	lr
 8006c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8006c40:	d502      	bpl.n	8006c48 <__aeabi_l2f+0x14>
 8006c42:	4240      	negs	r0, r0
 8006c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c48:	ea5f 0c01 	movs.w	ip, r1
 8006c4c:	bf02      	ittt	eq
 8006c4e:	4684      	moveq	ip, r0
 8006c50:	4601      	moveq	r1, r0
 8006c52:	2000      	moveq	r0, #0
 8006c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8006c58:	bf08      	it	eq
 8006c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006c62:	fabc f28c 	clz	r2, ip
 8006c66:	3a08      	subs	r2, #8
 8006c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006c6c:	db10      	blt.n	8006c90 <__aeabi_l2f+0x5c>
 8006c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8006c72:	4463      	add	r3, ip
 8006c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8006c78:	f1c2 0220 	rsb	r2, r2, #32
 8006c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006c80:	fa20 f202 	lsr.w	r2, r0, r2
 8006c84:	eb43 0002 	adc.w	r0, r3, r2
 8006c88:	bf08      	it	eq
 8006c8a:	f020 0001 	biceq.w	r0, r0, #1
 8006c8e:	4770      	bx	lr
 8006c90:	f102 0220 	add.w	r2, r2, #32
 8006c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8006c98:	f1c2 0220 	rsb	r2, r2, #32
 8006c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8006ca4:	eb43 0002 	adc.w	r0, r3, r2
 8006ca8:	bf08      	it	eq
 8006caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006cae:	4770      	bx	lr

08006cb0 <__aeabi_fmul>:
 8006cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006cb8:	bf1e      	ittt	ne
 8006cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006cbe:	ea92 0f0c 	teqne	r2, ip
 8006cc2:	ea93 0f0c 	teqne	r3, ip
 8006cc6:	d06f      	beq.n	8006da8 <__aeabi_fmul+0xf8>
 8006cc8:	441a      	add	r2, r3
 8006cca:	ea80 0c01 	eor.w	ip, r0, r1
 8006cce:	0240      	lsls	r0, r0, #9
 8006cd0:	bf18      	it	ne
 8006cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8006cd6:	d01e      	beq.n	8006d16 <__aeabi_fmul+0x66>
 8006cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8006ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006cf0:	bf3e      	ittt	cc
 8006cf2:	0049      	lslcc	r1, r1, #1
 8006cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8006cf8:	005b      	lslcc	r3, r3, #1
 8006cfa:	ea40 0001 	orr.w	r0, r0, r1
 8006cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006d02:	2afd      	cmp	r2, #253	; 0xfd
 8006d04:	d81d      	bhi.n	8006d42 <__aeabi_fmul+0x92>
 8006d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006d0e:	bf08      	it	eq
 8006d10:	f020 0001 	biceq.w	r0, r0, #1
 8006d14:	4770      	bx	lr
 8006d16:	f090 0f00 	teq	r0, #0
 8006d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006d1e:	bf08      	it	eq
 8006d20:	0249      	lsleq	r1, r1, #9
 8006d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8006d2a:	3a7f      	subs	r2, #127	; 0x7f
 8006d2c:	bfc2      	ittt	gt
 8006d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006d36:	4770      	bxgt	lr
 8006d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	3a01      	subs	r2, #1
 8006d42:	dc5d      	bgt.n	8006e00 <__aeabi_fmul+0x150>
 8006d44:	f112 0f19 	cmn.w	r2, #25
 8006d48:	bfdc      	itt	le
 8006d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006d4e:	4770      	bxle	lr
 8006d50:	f1c2 0200 	rsb	r2, r2, #0
 8006d54:	0041      	lsls	r1, r0, #1
 8006d56:	fa21 f102 	lsr.w	r1, r1, r2
 8006d5a:	f1c2 0220 	rsb	r2, r2, #32
 8006d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8006d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8006d66:	f140 0000 	adc.w	r0, r0, #0
 8006d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006d6e:	bf08      	it	eq
 8006d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006d74:	4770      	bx	lr
 8006d76:	f092 0f00 	teq	r2, #0
 8006d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006d7e:	bf02      	ittt	eq
 8006d80:	0040      	lsleq	r0, r0, #1
 8006d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006d86:	3a01      	subeq	r2, #1
 8006d88:	d0f9      	beq.n	8006d7e <__aeabi_fmul+0xce>
 8006d8a:	ea40 000c 	orr.w	r0, r0, ip
 8006d8e:	f093 0f00 	teq	r3, #0
 8006d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006d96:	bf02      	ittt	eq
 8006d98:	0049      	lsleq	r1, r1, #1
 8006d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006d9e:	3b01      	subeq	r3, #1
 8006da0:	d0f9      	beq.n	8006d96 <__aeabi_fmul+0xe6>
 8006da2:	ea41 010c 	orr.w	r1, r1, ip
 8006da6:	e78f      	b.n	8006cc8 <__aeabi_fmul+0x18>
 8006da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006dac:	ea92 0f0c 	teq	r2, ip
 8006db0:	bf18      	it	ne
 8006db2:	ea93 0f0c 	teqne	r3, ip
 8006db6:	d00a      	beq.n	8006dce <__aeabi_fmul+0x11e>
 8006db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006dbc:	bf18      	it	ne
 8006dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006dc2:	d1d8      	bne.n	8006d76 <__aeabi_fmul+0xc6>
 8006dc4:	ea80 0001 	eor.w	r0, r0, r1
 8006dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006dcc:	4770      	bx	lr
 8006dce:	f090 0f00 	teq	r0, #0
 8006dd2:	bf17      	itett	ne
 8006dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006dd8:	4608      	moveq	r0, r1
 8006dda:	f091 0f00 	teqne	r1, #0
 8006dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006de2:	d014      	beq.n	8006e0e <__aeabi_fmul+0x15e>
 8006de4:	ea92 0f0c 	teq	r2, ip
 8006de8:	d101      	bne.n	8006dee <__aeabi_fmul+0x13e>
 8006dea:	0242      	lsls	r2, r0, #9
 8006dec:	d10f      	bne.n	8006e0e <__aeabi_fmul+0x15e>
 8006dee:	ea93 0f0c 	teq	r3, ip
 8006df2:	d103      	bne.n	8006dfc <__aeabi_fmul+0x14c>
 8006df4:	024b      	lsls	r3, r1, #9
 8006df6:	bf18      	it	ne
 8006df8:	4608      	movne	r0, r1
 8006dfa:	d108      	bne.n	8006e0e <__aeabi_fmul+0x15e>
 8006dfc:	ea80 0001 	eor.w	r0, r0, r1
 8006e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006e0c:	4770      	bx	lr
 8006e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006e16:	4770      	bx	lr

08006e18 <__aeabi_fdiv>:
 8006e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006e20:	bf1e      	ittt	ne
 8006e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006e26:	ea92 0f0c 	teqne	r2, ip
 8006e2a:	ea93 0f0c 	teqne	r3, ip
 8006e2e:	d069      	beq.n	8006f04 <__aeabi_fdiv+0xec>
 8006e30:	eba2 0203 	sub.w	r2, r2, r3
 8006e34:	ea80 0c01 	eor.w	ip, r0, r1
 8006e38:	0249      	lsls	r1, r1, #9
 8006e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8006e3e:	d037      	beq.n	8006eb0 <__aeabi_fdiv+0x98>
 8006e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8006e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006e50:	428b      	cmp	r3, r1
 8006e52:	bf38      	it	cc
 8006e54:	005b      	lslcc	r3, r3, #1
 8006e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8006e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8006e5e:	428b      	cmp	r3, r1
 8006e60:	bf24      	itt	cs
 8006e62:	1a5b      	subcs	r3, r3, r1
 8006e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8006e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8006e6c:	bf24      	itt	cs
 8006e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8006e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8006e7a:	bf24      	itt	cs
 8006e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8006e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8006e88:	bf24      	itt	cs
 8006e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8006e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	bf18      	it	ne
 8006e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8006e9a:	d1e0      	bne.n	8006e5e <__aeabi_fdiv+0x46>
 8006e9c:	2afd      	cmp	r2, #253	; 0xfd
 8006e9e:	f63f af50 	bhi.w	8006d42 <__aeabi_fmul+0x92>
 8006ea2:	428b      	cmp	r3, r1
 8006ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006ea8:	bf08      	it	eq
 8006eaa:	f020 0001 	biceq.w	r0, r0, #1
 8006eae:	4770      	bx	lr
 8006eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006eb8:	327f      	adds	r2, #127	; 0x7f
 8006eba:	bfc2      	ittt	gt
 8006ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006ec4:	4770      	bxgt	lr
 8006ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	3a01      	subs	r2, #1
 8006ed0:	e737      	b.n	8006d42 <__aeabi_fmul+0x92>
 8006ed2:	f092 0f00 	teq	r2, #0
 8006ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006eda:	bf02      	ittt	eq
 8006edc:	0040      	lsleq	r0, r0, #1
 8006ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006ee2:	3a01      	subeq	r2, #1
 8006ee4:	d0f9      	beq.n	8006eda <__aeabi_fdiv+0xc2>
 8006ee6:	ea40 000c 	orr.w	r0, r0, ip
 8006eea:	f093 0f00 	teq	r3, #0
 8006eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006ef2:	bf02      	ittt	eq
 8006ef4:	0049      	lsleq	r1, r1, #1
 8006ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006efa:	3b01      	subeq	r3, #1
 8006efc:	d0f9      	beq.n	8006ef2 <__aeabi_fdiv+0xda>
 8006efe:	ea41 010c 	orr.w	r1, r1, ip
 8006f02:	e795      	b.n	8006e30 <__aeabi_fdiv+0x18>
 8006f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006f08:	ea92 0f0c 	teq	r2, ip
 8006f0c:	d108      	bne.n	8006f20 <__aeabi_fdiv+0x108>
 8006f0e:	0242      	lsls	r2, r0, #9
 8006f10:	f47f af7d 	bne.w	8006e0e <__aeabi_fmul+0x15e>
 8006f14:	ea93 0f0c 	teq	r3, ip
 8006f18:	f47f af70 	bne.w	8006dfc <__aeabi_fmul+0x14c>
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	e776      	b.n	8006e0e <__aeabi_fmul+0x15e>
 8006f20:	ea93 0f0c 	teq	r3, ip
 8006f24:	d104      	bne.n	8006f30 <__aeabi_fdiv+0x118>
 8006f26:	024b      	lsls	r3, r1, #9
 8006f28:	f43f af4c 	beq.w	8006dc4 <__aeabi_fmul+0x114>
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	e76e      	b.n	8006e0e <__aeabi_fmul+0x15e>
 8006f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006f34:	bf18      	it	ne
 8006f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006f3a:	d1ca      	bne.n	8006ed2 <__aeabi_fdiv+0xba>
 8006f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8006f40:	f47f af5c 	bne.w	8006dfc <__aeabi_fmul+0x14c>
 8006f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006f48:	f47f af3c 	bne.w	8006dc4 <__aeabi_fmul+0x114>
 8006f4c:	e75f      	b.n	8006e0e <__aeabi_fmul+0x15e>
 8006f4e:	bf00      	nop

08006f50 <__gesf2>:
 8006f50:	f04f 3cff 	mov.w	ip, #4294967295
 8006f54:	e006      	b.n	8006f64 <__cmpsf2+0x4>
 8006f56:	bf00      	nop

08006f58 <__lesf2>:
 8006f58:	f04f 0c01 	mov.w	ip, #1
 8006f5c:	e002      	b.n	8006f64 <__cmpsf2+0x4>
 8006f5e:	bf00      	nop

08006f60 <__cmpsf2>:
 8006f60:	f04f 0c01 	mov.w	ip, #1
 8006f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006f74:	bf18      	it	ne
 8006f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006f7a:	d011      	beq.n	8006fa0 <__cmpsf2+0x40>
 8006f7c:	b001      	add	sp, #4
 8006f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8006f82:	bf18      	it	ne
 8006f84:	ea90 0f01 	teqne	r0, r1
 8006f88:	bf58      	it	pl
 8006f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8006f8e:	bf88      	it	hi
 8006f90:	17c8      	asrhi	r0, r1, #31
 8006f92:	bf38      	it	cc
 8006f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8006f98:	bf18      	it	ne
 8006f9a:	f040 0001 	orrne.w	r0, r0, #1
 8006f9e:	4770      	bx	lr
 8006fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006fa4:	d102      	bne.n	8006fac <__cmpsf2+0x4c>
 8006fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8006faa:	d105      	bne.n	8006fb8 <__cmpsf2+0x58>
 8006fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006fb0:	d1e4      	bne.n	8006f7c <__cmpsf2+0x1c>
 8006fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8006fb6:	d0e1      	beq.n	8006f7c <__cmpsf2+0x1c>
 8006fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <__aeabi_cfrcmple>:
 8006fc0:	4684      	mov	ip, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4661      	mov	r1, ip
 8006fc6:	e7ff      	b.n	8006fc8 <__aeabi_cfcmpeq>

08006fc8 <__aeabi_cfcmpeq>:
 8006fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8006fca:	f7ff ffc9 	bl	8006f60 <__cmpsf2>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	bf48      	it	mi
 8006fd2:	f110 0f00 	cmnmi.w	r0, #0
 8006fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08006fd8 <__aeabi_fcmpeq>:
 8006fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006fdc:	f7ff fff4 	bl	8006fc8 <__aeabi_cfcmpeq>
 8006fe0:	bf0c      	ite	eq
 8006fe2:	2001      	moveq	r0, #1
 8006fe4:	2000      	movne	r0, #0
 8006fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006fea:	bf00      	nop

08006fec <__aeabi_fcmplt>:
 8006fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ff0:	f7ff ffea 	bl	8006fc8 <__aeabi_cfcmpeq>
 8006ff4:	bf34      	ite	cc
 8006ff6:	2001      	movcc	r0, #1
 8006ff8:	2000      	movcs	r0, #0
 8006ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ffe:	bf00      	nop

08007000 <__aeabi_fcmple>:
 8007000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007004:	f7ff ffe0 	bl	8006fc8 <__aeabi_cfcmpeq>
 8007008:	bf94      	ite	ls
 800700a:	2001      	movls	r0, #1
 800700c:	2000      	movhi	r0, #0
 800700e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007012:	bf00      	nop

08007014 <__aeabi_fcmpge>:
 8007014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007018:	f7ff ffd2 	bl	8006fc0 <__aeabi_cfrcmple>
 800701c:	bf94      	ite	ls
 800701e:	2001      	movls	r0, #1
 8007020:	2000      	movhi	r0, #0
 8007022:	f85d fb08 	ldr.w	pc, [sp], #8
 8007026:	bf00      	nop

08007028 <__aeabi_fcmpgt>:
 8007028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800702c:	f7ff ffc8 	bl	8006fc0 <__aeabi_cfrcmple>
 8007030:	bf34      	ite	cc
 8007032:	2001      	movcc	r0, #1
 8007034:	2000      	movcs	r0, #0
 8007036:	f85d fb08 	ldr.w	pc, [sp], #8
 800703a:	bf00      	nop

0800703c <__aeabi_f2iz>:
 800703c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007040:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007044:	d30f      	bcc.n	8007066 <__aeabi_f2iz+0x2a>
 8007046:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800704a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800704e:	d90d      	bls.n	800706c <__aeabi_f2iz+0x30>
 8007050:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007058:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800705c:	fa23 f002 	lsr.w	r0, r3, r2
 8007060:	bf18      	it	ne
 8007062:	4240      	negne	r0, r0
 8007064:	4770      	bx	lr
 8007066:	f04f 0000 	mov.w	r0, #0
 800706a:	4770      	bx	lr
 800706c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007070:	d101      	bne.n	8007076 <__aeabi_f2iz+0x3a>
 8007072:	0242      	lsls	r2, r0, #9
 8007074:	d105      	bne.n	8007082 <__aeabi_f2iz+0x46>
 8007076:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800707a:	bf08      	it	eq
 800707c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007080:	4770      	bx	lr
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	4770      	bx	lr

08007088 <selfrel_offset31>:
 8007088:	6803      	ldr	r3, [r0, #0]
 800708a:	005a      	lsls	r2, r3, #1
 800708c:	bf4c      	ite	mi
 800708e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007092:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8007096:	4418      	add	r0, r3
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop

0800709c <search_EIT_table>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	b339      	cbz	r1, 80070f2 <search_EIT_table+0x56>
 80070a2:	1e4f      	subs	r7, r1, #1
 80070a4:	4604      	mov	r4, r0
 80070a6:	4615      	mov	r5, r2
 80070a8:	463e      	mov	r6, r7
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	eb08 0106 	add.w	r1, r8, r6
 80070b2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80070b6:	1049      	asrs	r1, r1, #1
 80070b8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80070bc:	4648      	mov	r0, r9
 80070be:	f7ff ffe3 	bl	8007088 <selfrel_offset31>
 80070c2:	4603      	mov	r3, r0
 80070c4:	00c8      	lsls	r0, r1, #3
 80070c6:	3008      	adds	r0, #8
 80070c8:	428f      	cmp	r7, r1
 80070ca:	4420      	add	r0, r4
 80070cc:	d00b      	beq.n	80070e6 <search_EIT_table+0x4a>
 80070ce:	42ab      	cmp	r3, r5
 80070d0:	d80b      	bhi.n	80070ea <search_EIT_table+0x4e>
 80070d2:	f7ff ffd9 	bl	8007088 <selfrel_offset31>
 80070d6:	3801      	subs	r0, #1
 80070d8:	42a8      	cmp	r0, r5
 80070da:	f101 0801 	add.w	r8, r1, #1
 80070de:	d3e6      	bcc.n	80070ae <search_EIT_table+0x12>
 80070e0:	4648      	mov	r0, r9
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	42ab      	cmp	r3, r5
 80070e8:	d9fa      	bls.n	80070e0 <search_EIT_table+0x44>
 80070ea:	4588      	cmp	r8, r1
 80070ec:	d001      	beq.n	80070f2 <search_EIT_table+0x56>
 80070ee:	1e4e      	subs	r6, r1, #1
 80070f0:	e7dd      	b.n	80070ae <search_EIT_table+0x12>
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	4648      	mov	r0, r9
 80070f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070fc <__gnu_unwind_get_pr_addr>:
 80070fc:	2801      	cmp	r0, #1
 80070fe:	d007      	beq.n	8007110 <__gnu_unwind_get_pr_addr+0x14>
 8007100:	2802      	cmp	r0, #2
 8007102:	d007      	beq.n	8007114 <__gnu_unwind_get_pr_addr+0x18>
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <__gnu_unwind_get_pr_addr+0x1c>)
 8007106:	2800      	cmp	r0, #0
 8007108:	bf0c      	ite	eq
 800710a:	4618      	moveq	r0, r3
 800710c:	2000      	movne	r0, #0
 800710e:	4770      	bx	lr
 8007110:	4802      	ldr	r0, [pc, #8]	; (800711c <__gnu_unwind_get_pr_addr+0x20>)
 8007112:	4770      	bx	lr
 8007114:	4802      	ldr	r0, [pc, #8]	; (8007120 <__gnu_unwind_get_pr_addr+0x24>)
 8007116:	4770      	bx	lr
 8007118:	080077ed 	.word	0x080077ed
 800711c:	080077f1 	.word	0x080077f1
 8007120:	080077f5 	.word	0x080077f5

08007124 <get_eit_entry>:
 8007124:	b530      	push	{r4, r5, lr}
 8007126:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <get_eit_entry+0x94>)
 8007128:	4604      	mov	r4, r0
 800712a:	b083      	sub	sp, #12
 800712c:	1e8d      	subs	r5, r1, #2
 800712e:	b33b      	cbz	r3, 8007180 <get_eit_entry+0x5c>
 8007130:	4628      	mov	r0, r5
 8007132:	a901      	add	r1, sp, #4
 8007134:	f3af 8000 	nop.w
 8007138:	b1e8      	cbz	r0, 8007176 <get_eit_entry+0x52>
 800713a:	9901      	ldr	r1, [sp, #4]
 800713c:	462a      	mov	r2, r5
 800713e:	f7ff ffad 	bl	800709c <search_EIT_table>
 8007142:	4601      	mov	r1, r0
 8007144:	b1b8      	cbz	r0, 8007176 <get_eit_entry+0x52>
 8007146:	f7ff ff9f 	bl	8007088 <selfrel_offset31>
 800714a:	684b      	ldr	r3, [r1, #4]
 800714c:	64a0      	str	r0, [r4, #72]	; 0x48
 800714e:	2b01      	cmp	r3, #1
 8007150:	d02e      	beq.n	80071b0 <get_eit_entry+0x8c>
 8007152:	2b00      	cmp	r3, #0
 8007154:	db27      	blt.n	80071a6 <get_eit_entry+0x82>
 8007156:	1d08      	adds	r0, r1, #4
 8007158:	f7ff ff96 	bl	8007088 <selfrel_offset31>
 800715c:	2300      	movs	r3, #0
 800715e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007162:	6803      	ldr	r3, [r0, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	db12      	blt.n	800718e <get_eit_entry+0x6a>
 8007168:	f7ff ff8e 	bl	8007088 <selfrel_offset31>
 800716c:	4603      	mov	r3, r0
 800716e:	2000      	movs	r0, #0
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	b003      	add	sp, #12
 8007174:	bd30      	pop	{r4, r5, pc}
 8007176:	2300      	movs	r3, #0
 8007178:	2009      	movs	r0, #9
 800717a:	6123      	str	r3, [r4, #16]
 800717c:	b003      	add	sp, #12
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <get_eit_entry+0x98>)
 8007182:	490f      	ldr	r1, [pc, #60]	; (80071c0 <get_eit_entry+0x9c>)
 8007184:	4618      	mov	r0, r3
 8007186:	1ac9      	subs	r1, r1, r3
 8007188:	10c9      	asrs	r1, r1, #3
 800718a:	9101      	str	r1, [sp, #4]
 800718c:	e7d6      	b.n	800713c <get_eit_entry+0x18>
 800718e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007192:	f7ff ffb3 	bl	80070fc <__gnu_unwind_get_pr_addr>
 8007196:	2800      	cmp	r0, #0
 8007198:	4603      	mov	r3, r0
 800719a:	bf14      	ite	ne
 800719c:	2000      	movne	r0, #0
 800719e:	2009      	moveq	r0, #9
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	b003      	add	sp, #12
 80071a4:	bd30      	pop	{r4, r5, pc}
 80071a6:	2301      	movs	r3, #1
 80071a8:	1d08      	adds	r0, r1, #4
 80071aa:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80071ae:	e7d8      	b.n	8007162 <get_eit_entry+0x3e>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2005      	movs	r0, #5
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	e7dc      	b.n	8007172 <get_eit_entry+0x4e>
 80071b8:	00000000 	.word	0x00000000
 80071bc:	08010360 	.word	0x08010360
 80071c0:	08010528 	.word	0x08010528

080071c4 <restore_non_core_regs>:
 80071c4:	6803      	ldr	r3, [r0, #0]
 80071c6:	b510      	push	{r4, lr}
 80071c8:	07da      	lsls	r2, r3, #31
 80071ca:	4604      	mov	r4, r0
 80071cc:	d406      	bmi.n	80071dc <restore_non_core_regs+0x18>
 80071ce:	079b      	lsls	r3, r3, #30
 80071d0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80071d4:	d509      	bpl.n	80071ea <restore_non_core_regs+0x26>
 80071d6:	f000 fc5d 	bl	8007a94 <__gnu_Unwind_Restore_VFP_D>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	0759      	lsls	r1, r3, #29
 80071de:	d509      	bpl.n	80071f4 <restore_non_core_regs+0x30>
 80071e0:	071a      	lsls	r2, r3, #28
 80071e2:	d50e      	bpl.n	8007202 <restore_non_core_regs+0x3e>
 80071e4:	06db      	lsls	r3, r3, #27
 80071e6:	d513      	bpl.n	8007210 <restore_non_core_regs+0x4c>
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	f000 fc4b 	bl	8007a84 <__gnu_Unwind_Restore_VFP>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	0759      	lsls	r1, r3, #29
 80071f2:	d4f5      	bmi.n	80071e0 <restore_non_core_regs+0x1c>
 80071f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071f8:	f000 fc54 	bl	8007aa4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	071a      	lsls	r2, r3, #28
 8007200:	d4f0      	bmi.n	80071e4 <restore_non_core_regs+0x20>
 8007202:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007206:	f000 fc55 	bl	8007ab4 <__gnu_Unwind_Restore_WMMXD>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	06db      	lsls	r3, r3, #27
 800720e:	d4eb      	bmi.n	80071e8 <restore_non_core_regs+0x24>
 8007210:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007218:	f000 bc90 	b.w	8007b3c <__gnu_Unwind_Restore_WMMXC>

0800721c <__gnu_unwind_24bit.constprop.0>:
 800721c:	2009      	movs	r0, #9
 800721e:	4770      	bx	lr

08007220 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8007220:	4603      	mov	r3, r0
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	b100      	cbz	r0, 8007228 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8007226:	4418      	add	r0, r3
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <_Unwind_DebugHook>:
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <unwind_phase2>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	460e      	mov	r6, r1
 8007236:	4620      	mov	r0, r4
 8007238:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800723a:	f7ff ff73 	bl	8007124 <get_eit_entry>
 800723e:	4605      	mov	r5, r0
 8007240:	b998      	cbnz	r0, 800726a <unwind_phase2+0x3a>
 8007242:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8007246:	4632      	mov	r2, r6
 8007248:	4621      	mov	r1, r4
 800724a:	2001      	movs	r0, #1
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	f8c4 c014 	str.w	ip, [r4, #20]
 8007252:	4798      	blx	r3
 8007254:	2808      	cmp	r0, #8
 8007256:	d0ee      	beq.n	8007236 <unwind_phase2+0x6>
 8007258:	2807      	cmp	r0, #7
 800725a:	d106      	bne.n	800726a <unwind_phase2+0x3a>
 800725c:	4628      	mov	r0, r5
 800725e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007260:	f7ff ffe4 	bl	800722c <_Unwind_DebugHook>
 8007264:	1d30      	adds	r0, r6, #4
 8007266:	f000 fc01 	bl	8007a6c <__restore_core_regs>
 800726a:	f006 fb7b 	bl	800d964 <abort>
 800726e:	bf00      	nop

08007270 <unwind_phase2_forced>:
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	f04f 0a00 	mov.w	sl, #0
 8007278:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800727c:	f10d 0e0c 	add.w	lr, sp, #12
 8007280:	f101 0c04 	add.w	ip, r1, #4
 8007284:	68c7      	ldr	r7, [r0, #12]
 8007286:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800728a:	4606      	mov	r6, r0
 800728c:	4614      	mov	r4, r2
 800728e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007292:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800729a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800729e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80072a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80072a6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80072aa:	ad02      	add	r5, sp, #8
 80072ac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80072b0:	f8c5 a000 	str.w	sl, [r5]
 80072b4:	e021      	b.n	80072fa <unwind_phase2_forced+0x8a>
 80072b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80072b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80072bc:	4629      	mov	r1, r5
 80072be:	6173      	str	r3, [r6, #20]
 80072c0:	a87a      	add	r0, sp, #488	; 0x1e8
 80072c2:	f006 fe0d 	bl	800dee0 <memcpy>
 80072c6:	4631      	mov	r1, r6
 80072c8:	4650      	mov	r0, sl
 80072ca:	6933      	ldr	r3, [r6, #16]
 80072cc:	aa7a      	add	r2, sp, #488	; 0x1e8
 80072ce:	4798      	blx	r3
 80072d0:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80072d2:	4682      	mov	sl, r0
 80072d4:	646c      	str	r4, [r5, #68]	; 0x44
 80072d6:	4633      	mov	r3, r6
 80072d8:	4632      	mov	r2, r6
 80072da:	4649      	mov	r1, r9
 80072dc:	2001      	movs	r0, #1
 80072de:	e9cd 5800 	strd	r5, r8, [sp]
 80072e2:	47b8      	blx	r7
 80072e4:	4604      	mov	r4, r0
 80072e6:	b9f0      	cbnz	r0, 8007326 <unwind_phase2_forced+0xb6>
 80072e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80072ec:	4628      	mov	r0, r5
 80072ee:	a97a      	add	r1, sp, #488	; 0x1e8
 80072f0:	f006 fdf6 	bl	800dee0 <memcpy>
 80072f4:	f1ba 0f08 	cmp.w	sl, #8
 80072f8:	d11b      	bne.n	8007332 <unwind_phase2_forced+0xc2>
 80072fa:	4630      	mov	r0, r6
 80072fc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80072fe:	f7ff ff11 	bl	8007124 <get_eit_entry>
 8007302:	f104 0909 	add.w	r9, r4, #9
 8007306:	fa5f fa89 	uxtb.w	sl, r9
 800730a:	4604      	mov	r4, r0
 800730c:	2800      	cmp	r0, #0
 800730e:	d0d2      	beq.n	80072b6 <unwind_phase2_forced+0x46>
 8007310:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8007312:	4633      	mov	r3, r6
 8007314:	6469      	str	r1, [r5, #68]	; 0x44
 8007316:	4632      	mov	r2, r6
 8007318:	2001      	movs	r0, #1
 800731a:	e9cd 5800 	strd	r5, r8, [sp]
 800731e:	f04a 0110 	orr.w	r1, sl, #16
 8007322:	47b8      	blx	r7
 8007324:	b100      	cbz	r0, 8007328 <unwind_phase2_forced+0xb8>
 8007326:	2409      	movs	r4, #9
 8007328:	4620      	mov	r0, r4
 800732a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	f1ba 0f07 	cmp.w	sl, #7
 8007336:	d1f6      	bne.n	8007326 <unwind_phase2_forced+0xb6>
 8007338:	4620      	mov	r0, r4
 800733a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800733c:	f7ff ff76 	bl	800722c <_Unwind_DebugHook>
 8007340:	a803      	add	r0, sp, #12
 8007342:	f000 fb93 	bl	8007a6c <__restore_core_regs>
 8007346:	bf00      	nop

08007348 <_Unwind_GetCFA>:
 8007348:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800734a:	4770      	bx	lr

0800734c <__gnu_Unwind_RaiseException>:
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	f04f 37ff 	mov.w	r7, #4294967295
 8007352:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007354:	b0f9      	sub	sp, #484	; 0x1e4
 8007356:	640b      	str	r3, [r1, #64]	; 0x40
 8007358:	ac01      	add	r4, sp, #4
 800735a:	f101 0c04 	add.w	ip, r1, #4
 800735e:	460e      	mov	r6, r1
 8007360:	4605      	mov	r5, r0
 8007362:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007368:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800736c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800736e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007374:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800737c:	9700      	str	r7, [sp, #0]
 800737e:	e006      	b.n	800738e <__gnu_Unwind_RaiseException+0x42>
 8007380:	466a      	mov	r2, sp
 8007382:	4629      	mov	r1, r5
 8007384:	692b      	ldr	r3, [r5, #16]
 8007386:	4798      	blx	r3
 8007388:	2808      	cmp	r0, #8
 800738a:	4604      	mov	r4, r0
 800738c:	d108      	bne.n	80073a0 <__gnu_Unwind_RaiseException+0x54>
 800738e:	4628      	mov	r0, r5
 8007390:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007392:	f7ff fec7 	bl	8007124 <get_eit_entry>
 8007396:	2800      	cmp	r0, #0
 8007398:	d0f2      	beq.n	8007380 <__gnu_Unwind_RaiseException+0x34>
 800739a:	2009      	movs	r0, #9
 800739c:	b079      	add	sp, #484	; 0x1e4
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a0:	4668      	mov	r0, sp
 80073a2:	f7ff ff0f 	bl	80071c4 <restore_non_core_regs>
 80073a6:	2c06      	cmp	r4, #6
 80073a8:	d1f7      	bne.n	800739a <__gnu_Unwind_RaiseException+0x4e>
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	f7ff ff3f 	bl	8007230 <unwind_phase2>
 80073b2:	bf00      	nop

080073b4 <__gnu_Unwind_ForcedUnwind>:
 80073b4:	b410      	push	{r4}
 80073b6:	4614      	mov	r4, r2
 80073b8:	6184      	str	r4, [r0, #24]
 80073ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80073bc:	60c1      	str	r1, [r0, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	641c      	str	r4, [r3, #64]	; 0x40
 80073c2:	4619      	mov	r1, r3
 80073c4:	bc10      	pop	{r4}
 80073c6:	e753      	b.n	8007270 <unwind_phase2_forced>

080073c8 <__gnu_Unwind_Resume>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	6943      	ldr	r3, [r0, #20]
 80073cc:	68c6      	ldr	r6, [r0, #12]
 80073ce:	640b      	str	r3, [r1, #64]	; 0x40
 80073d0:	b9ae      	cbnz	r6, 80073fe <__gnu_Unwind_Resume+0x36>
 80073d2:	460a      	mov	r2, r1
 80073d4:	6903      	ldr	r3, [r0, #16]
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	4601      	mov	r1, r0
 80073dc:	2002      	movs	r0, #2
 80073de:	4798      	blx	r3
 80073e0:	2807      	cmp	r0, #7
 80073e2:	d005      	beq.n	80073f0 <__gnu_Unwind_Resume+0x28>
 80073e4:	2808      	cmp	r0, #8
 80073e6:	d10f      	bne.n	8007408 <__gnu_Unwind_Resume+0x40>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7ff ff20 	bl	8007230 <unwind_phase2>
 80073f0:	4630      	mov	r0, r6
 80073f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80073f4:	f7ff ff1a 	bl	800722c <_Unwind_DebugHook>
 80073f8:	1d28      	adds	r0, r5, #4
 80073fa:	f000 fb37 	bl	8007a6c <__restore_core_regs>
 80073fe:	2201      	movs	r2, #1
 8007400:	f7ff ff36 	bl	8007270 <unwind_phase2_forced>
 8007404:	f006 faae 	bl	800d964 <abort>
 8007408:	f006 faac 	bl	800d964 <abort>

0800740c <__gnu_Unwind_Resume_or_Rethrow>:
 800740c:	68c2      	ldr	r2, [r0, #12]
 800740e:	b12a      	cbz	r2, 800741c <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8007410:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8007414:	2200      	movs	r2, #0
 8007416:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 800741a:	e729      	b.n	8007270 <unwind_phase2_forced>
 800741c:	e796      	b.n	800734c <__gnu_Unwind_RaiseException>
 800741e:	bf00      	nop

08007420 <_Unwind_Complete>:
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <_Unwind_DeleteException>:
 8007424:	6883      	ldr	r3, [r0, #8]
 8007426:	4601      	mov	r1, r0
 8007428:	b10b      	cbz	r3, 800742e <_Unwind_DeleteException+0xa>
 800742a:	2001      	movs	r0, #1
 800742c:	4718      	bx	r3
 800742e:	4770      	bx	lr

08007430 <_Unwind_VRS_Get>:
 8007430:	2901      	cmp	r1, #1
 8007432:	d012      	beq.n	800745a <_Unwind_VRS_Get+0x2a>
 8007434:	d809      	bhi.n	800744a <_Unwind_VRS_Get+0x1a>
 8007436:	b973      	cbnz	r3, 8007456 <_Unwind_VRS_Get+0x26>
 8007438:	2a0f      	cmp	r2, #15
 800743a:	d80c      	bhi.n	8007456 <_Unwind_VRS_Get+0x26>
 800743c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007440:	6842      	ldr	r2, [r0, #4]
 8007442:	4618      	mov	r0, r3
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	4770      	bx	lr
 800744a:	3903      	subs	r1, #3
 800744c:	2901      	cmp	r1, #1
 800744e:	bf94      	ite	ls
 8007450:	2001      	movls	r0, #1
 8007452:	2002      	movhi	r0, #2
 8007454:	4770      	bx	lr
 8007456:	2002      	movs	r0, #2
 8007458:	4770      	bx	lr
 800745a:	4608      	mov	r0, r1
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <_Unwind_GetGR>:
 8007460:	2300      	movs	r3, #0
 8007462:	b500      	push	{lr}
 8007464:	b085      	sub	sp, #20
 8007466:	460a      	mov	r2, r1
 8007468:	a903      	add	r1, sp, #12
 800746a:	9100      	str	r1, [sp, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	f7ff ffdf 	bl	8007430 <_Unwind_VRS_Get>
 8007472:	9803      	ldr	r0, [sp, #12]
 8007474:	b005      	add	sp, #20
 8007476:	f85d fb04 	ldr.w	pc, [sp], #4
 800747a:	bf00      	nop

0800747c <_Unwind_VRS_Set>:
 800747c:	2901      	cmp	r1, #1
 800747e:	d012      	beq.n	80074a6 <_Unwind_VRS_Set+0x2a>
 8007480:	d809      	bhi.n	8007496 <_Unwind_VRS_Set+0x1a>
 8007482:	b973      	cbnz	r3, 80074a2 <_Unwind_VRS_Set+0x26>
 8007484:	2a0f      	cmp	r2, #15
 8007486:	d80c      	bhi.n	80074a2 <_Unwind_VRS_Set+0x26>
 8007488:	9900      	ldr	r1, [sp, #0]
 800748a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800748e:	6809      	ldr	r1, [r1, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	6051      	str	r1, [r2, #4]
 8007494:	4770      	bx	lr
 8007496:	3903      	subs	r1, #3
 8007498:	2901      	cmp	r1, #1
 800749a:	bf94      	ite	ls
 800749c:	2001      	movls	r0, #1
 800749e:	2002      	movhi	r0, #2
 80074a0:	4770      	bx	lr
 80074a2:	2002      	movs	r0, #2
 80074a4:	4770      	bx	lr
 80074a6:	4608      	mov	r0, r1
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <_Unwind_SetGR>:
 80074ac:	2300      	movs	r3, #0
 80074ae:	b510      	push	{r4, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	ac03      	add	r4, sp, #12
 80074b4:	9203      	str	r2, [sp, #12]
 80074b6:	9400      	str	r4, [sp, #0]
 80074b8:	460a      	mov	r2, r1
 80074ba:	4619      	mov	r1, r3
 80074bc:	f7ff ffde 	bl	800747c <_Unwind_VRS_Set>
 80074c0:	b004      	add	sp, #16
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <__gnu_Unwind_Backtrace>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	f04f 36ff 	mov.w	r6, #4294967295
 80074ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80074cc:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80074d0:	6413      	str	r3, [r2, #64]	; 0x40
 80074d2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80074d6:	f102 0c04 	add.w	ip, r2, #4
 80074da:	4605      	mov	r5, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80074e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80074e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80074ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80074ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80074f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80074f6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80074fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80074fe:	9616      	str	r6, [sp, #88]	; 0x58
 8007500:	e012      	b.n	8007528 <__gnu_Unwind_Backtrace+0x64>
 8007502:	210c      	movs	r1, #12
 8007504:	a816      	add	r0, sp, #88	; 0x58
 8007506:	466a      	mov	r2, sp
 8007508:	f7ff ffd0 	bl	80074ac <_Unwind_SetGR>
 800750c:	4621      	mov	r1, r4
 800750e:	a816      	add	r0, sp, #88	; 0x58
 8007510:	47a8      	blx	r5
 8007512:	b978      	cbnz	r0, 8007534 <__gnu_Unwind_Backtrace+0x70>
 8007514:	4669      	mov	r1, sp
 8007516:	2008      	movs	r0, #8
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	aa16      	add	r2, sp, #88	; 0x58
 800751c:	4798      	blx	r3
 800751e:	2805      	cmp	r0, #5
 8007520:	4606      	mov	r6, r0
 8007522:	d008      	beq.n	8007536 <__gnu_Unwind_Backtrace+0x72>
 8007524:	2809      	cmp	r0, #9
 8007526:	d005      	beq.n	8007534 <__gnu_Unwind_Backtrace+0x70>
 8007528:	4668      	mov	r0, sp
 800752a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800752c:	f7ff fdfa 	bl	8007124 <get_eit_entry>
 8007530:	2800      	cmp	r0, #0
 8007532:	d0e6      	beq.n	8007502 <__gnu_Unwind_Backtrace+0x3e>
 8007534:	2609      	movs	r6, #9
 8007536:	a816      	add	r0, sp, #88	; 0x58
 8007538:	f7ff fe44 	bl	80071c4 <restore_non_core_regs>
 800753c:	4630      	mov	r0, r6
 800753e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8007542:	bd70      	pop	{r4, r5, r6, pc}

08007544 <__gnu_unwind_pr_common>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	461e      	mov	r6, r3
 800754a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800754c:	b089      	sub	sp, #36	; 0x24
 800754e:	f854 3b04 	ldr.w	r3, [r4], #4
 8007552:	460d      	mov	r5, r1
 8007554:	4617      	mov	r7, r2
 8007556:	f000 0803 	and.w	r8, r0, #3
 800755a:	9406      	str	r4, [sp, #24]
 800755c:	2e00      	cmp	r6, #0
 800755e:	d079      	beq.n	8007654 <__gnu_unwind_pr_common+0x110>
 8007560:	2202      	movs	r2, #2
 8007562:	f88d 201c 	strb.w	r2, [sp, #28]
 8007566:	0c1a      	lsrs	r2, r3, #16
 8007568:	f88d 201d 	strb.w	r2, [sp, #29]
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007576:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007578:	f1b8 0f02 	cmp.w	r8, #2
 800757c:	bf08      	it	eq
 800757e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007580:	f013 0301 	ands.w	r3, r3, #1
 8007584:	d00c      	beq.n	80075a0 <__gnu_unwind_pr_common+0x5c>
 8007586:	4638      	mov	r0, r7
 8007588:	a905      	add	r1, sp, #20
 800758a:	f000 fb71 	bl	8007c70 <__gnu_unwind_execute>
 800758e:	b918      	cbnz	r0, 8007598 <__gnu_unwind_pr_common+0x54>
 8007590:	2008      	movs	r0, #8
 8007592:	b009      	add	sp, #36	; 0x24
 8007594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007598:	2009      	movs	r0, #9
 800759a:	b009      	add	sp, #36	; 0x24
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	f8d4 a000 	ldr.w	sl, [r4]
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	d0ed      	beq.n	8007586 <__gnu_unwind_pr_common+0x42>
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	f000 0308 	and.w	r3, r0, #8
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	2e02      	cmp	r6, #2
 80075b4:	d04a      	beq.n	800764c <__gnu_unwind_pr_common+0x108>
 80075b6:	f8b4 a000 	ldrh.w	sl, [r4]
 80075ba:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80075be:	3404      	adds	r4, #4
 80075c0:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80075c2:	210f      	movs	r1, #15
 80075c4:	4638      	mov	r0, r7
 80075c6:	f029 0b01 	bic.w	fp, r9, #1
 80075ca:	4493      	add	fp, r2
 80075cc:	f7ff ff48 	bl	8007460 <_Unwind_GetGR>
 80075d0:	4583      	cmp	fp, r0
 80075d2:	d839      	bhi.n	8007648 <__gnu_unwind_pr_common+0x104>
 80075d4:	f02a 0201 	bic.w	r2, sl, #1
 80075d8:	445a      	add	r2, fp
 80075da:	4282      	cmp	r2, r0
 80075dc:	bf94      	ite	ls
 80075de:	2000      	movls	r0, #0
 80075e0:	2001      	movhi	r0, #1
 80075e2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	f00a 0a01 	and.w	sl, sl, #1
 80075ee:	ea43 030a 	orr.w	r3, r3, sl
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d049      	beq.n	800768a <__gnu_unwind_pr_common+0x146>
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d032      	beq.n	8007660 <__gnu_unwind_pr_common+0x11c>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1cc      	bne.n	8007598 <__gnu_unwind_pr_common+0x54>
 80075fe:	f1b8 0f00 	cmp.w	r8, #0
 8007602:	d002      	beq.n	800760a <__gnu_unwind_pr_common+0xc6>
 8007604:	2800      	cmp	r0, #0
 8007606:	f040 80ce 	bne.w	80077a6 <__gnu_unwind_pr_common+0x262>
 800760a:	3404      	adds	r4, #4
 800760c:	f8d4 a000 	ldr.w	sl, [r4]
 8007610:	f1ba 0f00 	cmp.w	sl, #0
 8007614:	d1cd      	bne.n	80075b2 <__gnu_unwind_pr_common+0x6e>
 8007616:	4638      	mov	r0, r7
 8007618:	a905      	add	r1, sp, #20
 800761a:	f000 fb29 	bl	8007c70 <__gnu_unwind_execute>
 800761e:	2800      	cmp	r0, #0
 8007620:	d1ba      	bne.n	8007598 <__gnu_unwind_pr_common+0x54>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0b3      	beq.n	8007590 <__gnu_unwind_pr_common+0x4c>
 8007628:	210f      	movs	r1, #15
 800762a:	4638      	mov	r0, r7
 800762c:	f7ff ff18 	bl	8007460 <_Unwind_GetGR>
 8007630:	210e      	movs	r1, #14
 8007632:	4602      	mov	r2, r0
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff ff39 	bl	80074ac <_Unwind_SetGR>
 800763a:	4638      	mov	r0, r7
 800763c:	210f      	movs	r1, #15
 800763e:	4a6a      	ldr	r2, [pc, #424]	; (80077e8 <__gnu_unwind_pr_common+0x2a4>)
 8007640:	f7ff ff34 	bl	80074ac <_Unwind_SetGR>
 8007644:	2007      	movs	r0, #7
 8007646:	e7a8      	b.n	800759a <__gnu_unwind_pr_common+0x56>
 8007648:	2000      	movs	r0, #0
 800764a:	e7ca      	b.n	80075e2 <__gnu_unwind_pr_common+0x9e>
 800764c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007650:	3408      	adds	r4, #8
 8007652:	e7b5      	b.n	80075c0 <__gnu_unwind_pr_common+0x7c>
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	2303      	movs	r3, #3
 800765a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800765e:	e78a      	b.n	8007576 <__gnu_unwind_pr_common+0x32>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007666:	f1b8 0f00 	cmp.w	r8, #0
 800766a:	d145      	bne.n	80076f8 <__gnu_unwind_pr_common+0x1b4>
 800766c:	b128      	cbz	r0, 800767a <__gnu_unwind_pr_common+0x136>
 800766e:	9a02      	ldr	r2, [sp, #8]
 8007670:	2a00      	cmp	r2, #0
 8007672:	d05c      	beq.n	800772e <__gnu_unwind_pr_common+0x1ea>
 8007674:	f1bb 0f00 	cmp.w	fp, #0
 8007678:	d074      	beq.n	8007764 <__gnu_unwind_pr_common+0x220>
 800767a:	2b00      	cmp	r3, #0
 800767c:	da00      	bge.n	8007680 <__gnu_unwind_pr_common+0x13c>
 800767e:	3404      	adds	r4, #4
 8007680:	f10b 0b01 	add.w	fp, fp, #1
 8007684:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8007688:	e7c0      	b.n	800760c <__gnu_unwind_pr_common+0xc8>
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	d119      	bne.n	80076c4 <__gnu_unwind_pr_common+0x180>
 8007690:	b1b0      	cbz	r0, 80076c0 <__gnu_unwind_pr_common+0x17c>
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	1c99      	adds	r1, r3, #2
 8007698:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800769c:	f43f af7c 	beq.w	8007598 <__gnu_unwind_pr_common+0x54>
 80076a0:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80076a4:	3301      	adds	r3, #1
 80076a6:	9104      	str	r1, [sp, #16]
 80076a8:	f000 8091 	beq.w	80077ce <__gnu_unwind_pr_common+0x28a>
 80076ac:	1d20      	adds	r0, r4, #4
 80076ae:	f7ff fdb7 	bl	8007220 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80076b2:	ab04      	add	r3, sp, #16
 80076b4:	4601      	mov	r1, r0
 80076b6:	4628      	mov	r0, r5
 80076b8:	f005 f880 	bl	800c7bc <__cxa_type_match>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d15c      	bne.n	800777a <__gnu_unwind_pr_common+0x236>
 80076c0:	3408      	adds	r4, #8
 80076c2:	e7a3      	b.n	800760c <__gnu_unwind_pr_common+0xc8>
 80076c4:	210d      	movs	r1, #13
 80076c6:	4638      	mov	r0, r7
 80076c8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80076cc:	f7ff fec8 	bl	8007460 <_Unwind_GetGR>
 80076d0:	4581      	cmp	r9, r0
 80076d2:	d1f5      	bne.n	80076c0 <__gnu_unwind_pr_common+0x17c>
 80076d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d1f2      	bne.n	80076c0 <__gnu_unwind_pr_common+0x17c>
 80076da:	4620      	mov	r0, r4
 80076dc:	f7ff fcd4 	bl	8007088 <selfrel_offset31>
 80076e0:	210f      	movs	r1, #15
 80076e2:	4602      	mov	r2, r0
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff fee1 	bl	80074ac <_Unwind_SetGR>
 80076ea:	4638      	mov	r0, r7
 80076ec:	462a      	mov	r2, r5
 80076ee:	2100      	movs	r1, #0
 80076f0:	f7ff fedc 	bl	80074ac <_Unwind_SetGR>
 80076f4:	2007      	movs	r0, #7
 80076f6:	e750      	b.n	800759a <__gnu_unwind_pr_common+0x56>
 80076f8:	210d      	movs	r1, #13
 80076fa:	4638      	mov	r0, r7
 80076fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8007700:	f7ff feae 	bl	8007460 <_Unwind_GetGR>
 8007704:	4581      	cmp	r9, r0
 8007706:	d001      	beq.n	800770c <__gnu_unwind_pr_common+0x1c8>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	e7b6      	b.n	800767a <__gnu_unwind_pr_common+0x136>
 800770c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800770e:	429c      	cmp	r4, r3
 8007710:	d1fa      	bne.n	8007708 <__gnu_unwind_pr_common+0x1c4>
 8007712:	2304      	movs	r3, #4
 8007714:	2200      	movs	r2, #0
 8007716:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800771a:	18e3      	adds	r3, r4, r3
 800771c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8007720:	636b      	str	r3, [r5, #52]	; 0x34
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	db5a      	blt.n	80077de <__gnu_unwind_pr_common+0x29a>
 8007728:	2301      	movs	r3, #1
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	e7a8      	b.n	8007680 <__gnu_unwind_pr_common+0x13c>
 800772e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007732:	f8cd 800c 	str.w	r8, [sp, #12]
 8007736:	4691      	mov	r9, r2
 8007738:	46b0      	mov	r8, r6
 800773a:	f104 0a04 	add.w	sl, r4, #4
 800773e:	461e      	mov	r6, r3
 8007740:	e00e      	b.n	8007760 <__gnu_unwind_pr_common+0x21c>
 8007742:	4650      	mov	r0, sl
 8007744:	9604      	str	r6, [sp, #16]
 8007746:	f7ff fd6b 	bl	8007220 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800774a:	2200      	movs	r2, #0
 800774c:	4601      	mov	r1, r0
 800774e:	ab04      	add	r3, sp, #16
 8007750:	4628      	mov	r0, r5
 8007752:	f109 0901 	add.w	r9, r9, #1
 8007756:	f10a 0a04 	add.w	sl, sl, #4
 800775a:	f005 f82f 	bl	800c7bc <__cxa_type_match>
 800775e:	b9e8      	cbnz	r0, 800779c <__gnu_unwind_pr_common+0x258>
 8007760:	45d9      	cmp	r9, fp
 8007762:	d1ee      	bne.n	8007742 <__gnu_unwind_pr_common+0x1fe>
 8007764:	210d      	movs	r1, #13
 8007766:	4638      	mov	r0, r7
 8007768:	f7ff fe7a 	bl	8007460 <_Unwind_GetGR>
 800776c:	4603      	mov	r3, r0
 800776e:	9a04      	ldr	r2, [sp, #16]
 8007770:	2006      	movs	r0, #6
 8007772:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8007776:	622b      	str	r3, [r5, #32]
 8007778:	e70f      	b.n	800759a <__gnu_unwind_pr_common+0x56>
 800777a:	4681      	mov	r9, r0
 800777c:	210d      	movs	r1, #13
 800777e:	4638      	mov	r0, r7
 8007780:	f7ff fe6e 	bl	8007460 <_Unwind_GetGR>
 8007784:	f1b9 0f02 	cmp.w	r9, #2
 8007788:	6228      	str	r0, [r5, #32]
 800778a:	d125      	bne.n	80077d8 <__gnu_unwind_pr_common+0x294>
 800778c:	462b      	mov	r3, r5
 800778e:	9a04      	ldr	r2, [sp, #16]
 8007790:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007794:	626b      	str	r3, [r5, #36]	; 0x24
 8007796:	2006      	movs	r0, #6
 8007798:	62ac      	str	r4, [r5, #40]	; 0x28
 800779a:	e6fe      	b.n	800759a <__gnu_unwind_pr_common+0x56>
 800779c:	4646      	mov	r6, r8
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077a4:	e769      	b.n	800767a <__gnu_unwind_pr_common+0x136>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7ff fc6e 	bl	8007088 <selfrel_offset31>
 80077ac:	4602      	mov	r2, r0
 80077ae:	3404      	adds	r4, #4
 80077b0:	63ac      	str	r4, [r5, #56]	; 0x38
 80077b2:	4628      	mov	r0, r5
 80077b4:	4614      	mov	r4, r2
 80077b6:	f005 f85b 	bl	800c870 <__cxa_begin_cleanup>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aeec 	beq.w	8007598 <__gnu_unwind_pr_common+0x54>
 80077c0:	4638      	mov	r0, r7
 80077c2:	4622      	mov	r2, r4
 80077c4:	210f      	movs	r1, #15
 80077c6:	f7ff fe71 	bl	80074ac <_Unwind_SetGR>
 80077ca:	2007      	movs	r0, #7
 80077cc:	e6e5      	b.n	800759a <__gnu_unwind_pr_common+0x56>
 80077ce:	210d      	movs	r1, #13
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff fe45 	bl	8007460 <_Unwind_GetGR>
 80077d6:	6228      	str	r0, [r5, #32]
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	626b      	str	r3, [r5, #36]	; 0x24
 80077dc:	e7db      	b.n	8007796 <__gnu_unwind_pr_common+0x252>
 80077de:	f10b 0001 	add.w	r0, fp, #1
 80077e2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80077e6:	e779      	b.n	80076dc <__gnu_unwind_pr_common+0x198>
 80077e8:	0800d759 	.word	0x0800d759

080077ec <__aeabi_unwind_cpp_pr0>:
 80077ec:	2300      	movs	r3, #0
 80077ee:	e6a9      	b.n	8007544 <__gnu_unwind_pr_common>

080077f0 <__aeabi_unwind_cpp_pr1>:
 80077f0:	2301      	movs	r3, #1
 80077f2:	e6a7      	b.n	8007544 <__gnu_unwind_pr_common>

080077f4 <__aeabi_unwind_cpp_pr2>:
 80077f4:	2302      	movs	r3, #2
 80077f6:	e6a5      	b.n	8007544 <__gnu_unwind_pr_common>

080077f8 <_Unwind_VRS_Pop>:
 80077f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077fc:	4606      	mov	r6, r0
 80077fe:	4615      	mov	r5, r2
 8007800:	461c      	mov	r4, r3
 8007802:	b0c3      	sub	sp, #268	; 0x10c
 8007804:	2904      	cmp	r1, #4
 8007806:	f200 80b8 	bhi.w	800797a <_Unwind_VRS_Pop+0x182>
 800780a:	e8df f001 	tbb	[pc, r1]
 800780e:	569c      	.short	0x569c
 8007810:	2db6      	.short	0x2db6
 8007812:	03          	.byte	0x03
 8007813:	00          	.byte	0x00
 8007814:	2c00      	cmp	r4, #0
 8007816:	f040 80b0 	bne.w	800797a <_Unwind_VRS_Pop+0x182>
 800781a:	2a10      	cmp	r2, #16
 800781c:	f200 80ad 	bhi.w	800797a <_Unwind_VRS_Pop+0x182>
 8007820:	6803      	ldr	r3, [r0, #0]
 8007822:	06d8      	lsls	r0, r3, #27
 8007824:	f100 80f1 	bmi.w	8007a0a <_Unwind_VRS_Pop+0x212>
 8007828:	af20      	add	r7, sp, #128	; 0x80
 800782a:	4638      	mov	r0, r7
 800782c:	f000 f990 	bl	8007b50 <__gnu_Unwind_Save_WMMXC>
 8007830:	2401      	movs	r4, #1
 8007832:	4638      	mov	r0, r7
 8007834:	2300      	movs	r3, #0
 8007836:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8007838:	fa04 f203 	lsl.w	r2, r4, r3
 800783c:	422a      	tst	r2, r5
 800783e:	f103 0301 	add.w	r3, r3, #1
 8007842:	d005      	beq.n	8007850 <_Unwind_VRS_Pop+0x58>
 8007844:	460a      	mov	r2, r1
 8007846:	f852 cb04 	ldr.w	ip, [r2], #4
 800784a:	4611      	mov	r1, r2
 800784c:	f8c0 c000 	str.w	ip, [r0]
 8007850:	2b04      	cmp	r3, #4
 8007852:	f100 0004 	add.w	r0, r0, #4
 8007856:	d1ef      	bne.n	8007838 <_Unwind_VRS_Pop+0x40>
 8007858:	4638      	mov	r0, r7
 800785a:	63b1      	str	r1, [r6, #56]	; 0x38
 800785c:	f000 f96e 	bl	8007b3c <__gnu_Unwind_Restore_WMMXC>
 8007860:	2000      	movs	r0, #0
 8007862:	b043      	add	sp, #268	; 0x10c
 8007864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007868:	2c03      	cmp	r4, #3
 800786a:	f040 8086 	bne.w	800797a <_Unwind_VRS_Pop+0x182>
 800786e:	b294      	uxth	r4, r2
 8007870:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8007874:	2b10      	cmp	r3, #16
 8007876:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800787a:	d87e      	bhi.n	800797a <_Unwind_VRS_Pop+0x182>
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	071f      	lsls	r7, r3, #28
 8007880:	f100 80cb 	bmi.w	8007a1a <_Unwind_VRS_Pop+0x222>
 8007884:	af20      	add	r7, sp, #128	; 0x80
 8007886:	4638      	mov	r0, r7
 8007888:	f000 f936 	bl	8007af8 <__gnu_Unwind_Save_WMMXD>
 800788c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800788e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8007892:	b154      	cbz	r4, 80078aa <_Unwind_VRS_Pop+0xb2>
 8007894:	460b      	mov	r3, r1
 8007896:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800789a:	1ad0      	subs	r0, r2, r3
 800789c:	00e4      	lsls	r4, r4, #3
 800789e:	581d      	ldr	r5, [r3, r0]
 80078a0:	f843 5b04 	str.w	r5, [r3], #4
 80078a4:	428b      	cmp	r3, r1
 80078a6:	d1fa      	bne.n	800789e <_Unwind_VRS_Pop+0xa6>
 80078a8:	4422      	add	r2, r4
 80078aa:	4638      	mov	r0, r7
 80078ac:	63b2      	str	r2, [r6, #56]	; 0x38
 80078ae:	f000 f901 	bl	8007ab4 <__gnu_Unwind_Restore_WMMXD>
 80078b2:	2000      	movs	r0, #0
 80078b4:	b043      	add	sp, #268	; 0x10c
 80078b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ba:	2c01      	cmp	r4, #1
 80078bc:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80078c0:	b295      	uxth	r5, r2
 80078c2:	d056      	beq.n	8007972 <_Unwind_VRS_Pop+0x17a>
 80078c4:	2c05      	cmp	r4, #5
 80078c6:	d158      	bne.n	800797a <_Unwind_VRS_Pop+0x182>
 80078c8:	eb08 0905 	add.w	r9, r8, r5
 80078cc:	f1b9 0f20 	cmp.w	r9, #32
 80078d0:	d853      	bhi.n	800797a <_Unwind_VRS_Pop+0x182>
 80078d2:	f1b8 0f0f 	cmp.w	r8, #15
 80078d6:	d973      	bls.n	80079c0 <_Unwind_VRS_Pop+0x1c8>
 80078d8:	46a9      	mov	r9, r5
 80078da:	2d00      	cmp	r5, #0
 80078dc:	f040 8084 	bne.w	80079e8 <_Unwind_VRS_Pop+0x1f0>
 80078e0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80078e2:	b365      	cbz	r5, 800793e <_Unwind_VRS_Pop+0x146>
 80078e4:	af20      	add	r7, sp, #128	; 0x80
 80078e6:	f04f 0900 	mov.w	r9, #0
 80078ea:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80078ee:	3f04      	subs	r7, #4
 80078f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80078f4:	f853 1b04 	ldr.w	r1, [r3], #4
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	f847 1f04 	str.w	r1, [r7, #4]!
 80078fe:	d1f9      	bne.n	80078f4 <_Unwind_VRS_Pop+0xfc>
 8007900:	f1b9 0f00 	cmp.w	r9, #0
 8007904:	d00f      	beq.n	8007926 <_Unwind_VRS_Pop+0x12e>
 8007906:	466f      	mov	r7, sp
 8007908:	4641      	mov	r1, r8
 800790a:	2910      	cmp	r1, #16
 800790c:	bf38      	it	cc
 800790e:	2110      	movcc	r1, #16
 8007910:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007914:	3984      	subs	r1, #132	; 0x84
 8007916:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800791a:	f853 0b04 	ldr.w	r0, [r3], #4
 800791e:	42ab      	cmp	r3, r5
 8007920:	f841 0f04 	str.w	r0, [r1, #4]!
 8007924:	d1f9      	bne.n	800791a <_Unwind_VRS_Pop+0x122>
 8007926:	2c01      	cmp	r4, #1
 8007928:	d07f      	beq.n	8007a2a <_Unwind_VRS_Pop+0x232>
 800792a:	f1b8 0f0f 	cmp.w	r8, #15
 800792e:	63b5      	str	r5, [r6, #56]	; 0x38
 8007930:	d942      	bls.n	80079b8 <_Unwind_VRS_Pop+0x1c0>
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	d002      	beq.n	800793e <_Unwind_VRS_Pop+0x146>
 8007938:	4668      	mov	r0, sp
 800793a:	f000 f8b3 	bl	8007aa4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800793e:	2000      	movs	r0, #0
 8007940:	b043      	add	sp, #268	; 0x10c
 8007942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007946:	b9c4      	cbnz	r4, 800797a <_Unwind_VRS_Pop+0x182>
 8007948:	4623      	mov	r3, r4
 800794a:	2401      	movs	r4, #1
 800794c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800794e:	1d37      	adds	r7, r6, #4
 8007950:	b2a8      	uxth	r0, r5
 8007952:	fa04 f103 	lsl.w	r1, r4, r3
 8007956:	4201      	tst	r1, r0
 8007958:	bf1c      	itt	ne
 800795a:	f852 1b04 	ldrne.w	r1, [r2], #4
 800795e:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8007962:	3301      	adds	r3, #1
 8007964:	2b10      	cmp	r3, #16
 8007966:	d1f4      	bne.n	8007952 <_Unwind_VRS_Pop+0x15a>
 8007968:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 800796c:	d1e7      	bne.n	800793e <_Unwind_VRS_Pop+0x146>
 800796e:	63b2      	str	r2, [r6, #56]	; 0x38
 8007970:	e004      	b.n	800797c <_Unwind_VRS_Pop+0x184>
 8007972:	eb08 0305 	add.w	r3, r8, r5
 8007976:	2b10      	cmp	r3, #16
 8007978:	d903      	bls.n	8007982 <_Unwind_VRS_Pop+0x18a>
 800797a:	2002      	movs	r0, #2
 800797c:	b043      	add	sp, #268	; 0x10c
 800797e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007982:	f1b8 0f0f 	cmp.w	r8, #15
 8007986:	d8f8      	bhi.n	800797a <_Unwind_VRS_Pop+0x182>
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	07da      	lsls	r2, r3, #31
 800798c:	d506      	bpl.n	800799c <_Unwind_VRS_Pop+0x1a4>
 800798e:	4630      	mov	r0, r6
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	f840 3b48 	str.w	r3, [r0], #72
 8007998:	f000 f878 	bl	8007a8c <__gnu_Unwind_Save_VFP>
 800799c:	af20      	add	r7, sp, #128	; 0x80
 800799e:	4638      	mov	r0, r7
 80079a0:	f000 f874 	bl	8007a8c <__gnu_Unwind_Save_VFP>
 80079a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d19d      	bne.n	80078e6 <_Unwind_VRS_Pop+0xee>
 80079aa:	461d      	mov	r5, r3
 80079ac:	3504      	adds	r5, #4
 80079ae:	4638      	mov	r0, r7
 80079b0:	63b5      	str	r5, [r6, #56]	; 0x38
 80079b2:	f000 f867 	bl	8007a84 <__gnu_Unwind_Restore_VFP>
 80079b6:	e7c2      	b.n	800793e <_Unwind_VRS_Pop+0x146>
 80079b8:	a820      	add	r0, sp, #128	; 0x80
 80079ba:	f000 f86b 	bl	8007a94 <__gnu_Unwind_Restore_VFP_D>
 80079be:	e7b8      	b.n	8007932 <_Unwind_VRS_Pop+0x13a>
 80079c0:	f1b9 0f10 	cmp.w	r9, #16
 80079c4:	d93f      	bls.n	8007a46 <_Unwind_VRS_Pop+0x24e>
 80079c6:	f1a9 0910 	sub.w	r9, r9, #16
 80079ca:	6833      	ldr	r3, [r6, #0]
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d508      	bpl.n	80079e2 <_Unwind_VRS_Pop+0x1ea>
 80079d0:	4630      	mov	r0, r6
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	f840 3b48 	str.w	r3, [r0], #72
 80079de:	f000 f85d 	bl	8007a9c <__gnu_Unwind_Save_VFP_D>
 80079e2:	f1b9 0f00 	cmp.w	r9, #0
 80079e6:	d031      	beq.n	8007a4c <_Unwind_VRS_Pop+0x254>
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	075a      	lsls	r2, r3, #29
 80079ec:	d41f      	bmi.n	8007a2e <_Unwind_VRS_Pop+0x236>
 80079ee:	f1b8 0f0f 	cmp.w	r8, #15
 80079f2:	d924      	bls.n	8007a3e <_Unwind_VRS_Pop+0x246>
 80079f4:	466f      	mov	r7, sp
 80079f6:	f1c8 0510 	rsb	r5, r8, #16
 80079fa:	4638      	mov	r0, r7
 80079fc:	f000 f856 	bl	8007aac <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007a00:	2d00      	cmp	r5, #0
 8007a02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007a04:	dd80      	ble.n	8007908 <_Unwind_VRS_Pop+0x110>
 8007a06:	af20      	add	r7, sp, #128	; 0x80
 8007a08:	e76f      	b.n	80078ea <_Unwind_VRS_Pop+0xf2>
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	6033      	str	r3, [r6, #0]
 8007a10:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8007a14:	f000 f89c 	bl	8007b50 <__gnu_Unwind_Save_WMMXC>
 8007a18:	e706      	b.n	8007828 <_Unwind_VRS_Pop+0x30>
 8007a1a:	f023 0308 	bic.w	r3, r3, #8
 8007a1e:	6003      	str	r3, [r0, #0]
 8007a20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8007a24:	f000 f868 	bl	8007af8 <__gnu_Unwind_Save_WMMXD>
 8007a28:	e72c      	b.n	8007884 <_Unwind_VRS_Pop+0x8c>
 8007a2a:	af20      	add	r7, sp, #128	; 0x80
 8007a2c:	e7be      	b.n	80079ac <_Unwind_VRS_Pop+0x1b4>
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f023 0304 	bic.w	r3, r3, #4
 8007a34:	f840 3bd0 	str.w	r3, [r0], #208
 8007a38:	f000 f838 	bl	8007aac <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007a3c:	e7d7      	b.n	80079ee <_Unwind_VRS_Pop+0x1f6>
 8007a3e:	a820      	add	r0, sp, #128	; 0x80
 8007a40:	f000 f82c 	bl	8007a9c <__gnu_Unwind_Save_VFP_D>
 8007a44:	e7d6      	b.n	80079f4 <_Unwind_VRS_Pop+0x1fc>
 8007a46:	f04f 0900 	mov.w	r9, #0
 8007a4a:	e7be      	b.n	80079ca <_Unwind_VRS_Pop+0x1d2>
 8007a4c:	f1b8 0f0f 	cmp.w	r8, #15
 8007a50:	f63f af46 	bhi.w	80078e0 <_Unwind_VRS_Pop+0xe8>
 8007a54:	af20      	add	r7, sp, #128	; 0x80
 8007a56:	4638      	mov	r0, r7
 8007a58:	f000 f820 	bl	8007a9c <__gnu_Unwind_Save_VFP_D>
 8007a5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	f47f af41 	bne.w	80078e6 <_Unwind_VRS_Pop+0xee>
 8007a64:	4638      	mov	r0, r7
 8007a66:	f000 f815 	bl	8007a94 <__gnu_Unwind_Restore_VFP_D>
 8007a6a:	e768      	b.n	800793e <_Unwind_VRS_Pop+0x146>

08007a6c <__restore_core_regs>:
 8007a6c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007a70:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007a74:	469c      	mov	ip, r3
 8007a76:	46a6      	mov	lr, r4
 8007a78:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007a7c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007a80:	46e5      	mov	sp, ip
 8007a82:	bd00      	pop	{pc}

08007a84 <__gnu_Unwind_Restore_VFP>:
 8007a84:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <__gnu_Unwind_Save_VFP>:
 8007a8c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <__gnu_Unwind_Restore_VFP_D>:
 8007a94:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop

08007a9c <__gnu_Unwind_Save_VFP_D>:
 8007a9c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop

08007aa4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007aa4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007aac:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop

08007ab4 <__gnu_Unwind_Restore_WMMXD>:
 8007ab4:	ecf0 0102 	ldfe	f0, [r0], #8
 8007ab8:	ecf0 1102 	ldfe	f1, [r0], #8
 8007abc:	ecf0 2102 	ldfe	f2, [r0], #8
 8007ac0:	ecf0 3102 	ldfe	f3, [r0], #8
 8007ac4:	ecf0 4102 	ldfe	f4, [r0], #8
 8007ac8:	ecf0 5102 	ldfe	f5, [r0], #8
 8007acc:	ecf0 6102 	ldfe	f6, [r0], #8
 8007ad0:	ecf0 7102 	ldfe	f7, [r0], #8
 8007ad4:	ecf0 8102 	ldfp	f0, [r0], #8
 8007ad8:	ecf0 9102 	ldfp	f1, [r0], #8
 8007adc:	ecf0 a102 	ldfp	f2, [r0], #8
 8007ae0:	ecf0 b102 	ldfp	f3, [r0], #8
 8007ae4:	ecf0 c102 	ldfp	f4, [r0], #8
 8007ae8:	ecf0 d102 	ldfp	f5, [r0], #8
 8007aec:	ecf0 e102 	ldfp	f6, [r0], #8
 8007af0:	ecf0 f102 	ldfp	f7, [r0], #8
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <__gnu_Unwind_Save_WMMXD>:
 8007af8:	ece0 0102 	stfe	f0, [r0], #8
 8007afc:	ece0 1102 	stfe	f1, [r0], #8
 8007b00:	ece0 2102 	stfe	f2, [r0], #8
 8007b04:	ece0 3102 	stfe	f3, [r0], #8
 8007b08:	ece0 4102 	stfe	f4, [r0], #8
 8007b0c:	ece0 5102 	stfe	f5, [r0], #8
 8007b10:	ece0 6102 	stfe	f6, [r0], #8
 8007b14:	ece0 7102 	stfe	f7, [r0], #8
 8007b18:	ece0 8102 	stfp	f0, [r0], #8
 8007b1c:	ece0 9102 	stfp	f1, [r0], #8
 8007b20:	ece0 a102 	stfp	f2, [r0], #8
 8007b24:	ece0 b102 	stfp	f3, [r0], #8
 8007b28:	ece0 c102 	stfp	f4, [r0], #8
 8007b2c:	ece0 d102 	stfp	f5, [r0], #8
 8007b30:	ece0 e102 	stfp	f6, [r0], #8
 8007b34:	ece0 f102 	stfp	f7, [r0], #8
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <__gnu_Unwind_Restore_WMMXC>:
 8007b3c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007b40:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007b44:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007b48:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop

08007b50 <__gnu_Unwind_Save_WMMXC>:
 8007b50:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007b54:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007b58:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007b5c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <_Unwind_RaiseException>:
 8007b64:	46ec      	mov	ip, sp
 8007b66:	b500      	push	{lr}
 8007b68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007b6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007b78:	a901      	add	r1, sp, #4
 8007b7a:	f7ff fbe7 	bl	800734c <__gnu_Unwind_RaiseException>
 8007b7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007b82:	b012      	add	sp, #72	; 0x48
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop

08007b88 <_Unwind_Resume>:
 8007b88:	46ec      	mov	ip, sp
 8007b8a:	b500      	push	{lr}
 8007b8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007b90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007b9c:	a901      	add	r1, sp, #4
 8007b9e:	f7ff fc13 	bl	80073c8 <__gnu_Unwind_Resume>
 8007ba2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007ba6:	b012      	add	sp, #72	; 0x48
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop

08007bac <_Unwind_Resume_or_Rethrow>:
 8007bac:	46ec      	mov	ip, sp
 8007bae:	b500      	push	{lr}
 8007bb0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007bb4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007bc0:	a901      	add	r1, sp, #4
 8007bc2:	f7ff fc23 	bl	800740c <__gnu_Unwind_Resume_or_Rethrow>
 8007bc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007bca:	b012      	add	sp, #72	; 0x48
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop

08007bd0 <_Unwind_ForcedUnwind>:
 8007bd0:	46ec      	mov	ip, sp
 8007bd2:	b500      	push	{lr}
 8007bd4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007bd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007be4:	ab01      	add	r3, sp, #4
 8007be6:	f7ff fbe5 	bl	80073b4 <__gnu_Unwind_ForcedUnwind>
 8007bea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007bee:	b012      	add	sp, #72	; 0x48
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <_Unwind_Backtrace>:
 8007bf4:	46ec      	mov	ip, sp
 8007bf6:	b500      	push	{lr}
 8007bf8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007bfc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007c08:	aa01      	add	r2, sp, #4
 8007c0a:	f7ff fc5b 	bl	80074c4 <__gnu_Unwind_Backtrace>
 8007c0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007c12:	b012      	add	sp, #72	; 0x48
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop

08007c18 <next_unwind_byte>:
 8007c18:	7a02      	ldrb	r2, [r0, #8]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	b97a      	cbnz	r2, 8007c3e <next_unwind_byte+0x26>
 8007c1e:	7a42      	ldrb	r2, [r0, #9]
 8007c20:	b1a2      	cbz	r2, 8007c4c <next_unwind_byte+0x34>
 8007c22:	f04f 0c03 	mov.w	ip, #3
 8007c26:	6841      	ldr	r1, [r0, #4]
 8007c28:	3a01      	subs	r2, #1
 8007c2a:	7242      	strb	r2, [r0, #9]
 8007c2c:	6808      	ldr	r0, [r1, #0]
 8007c2e:	1d0a      	adds	r2, r1, #4
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	0202      	lsls	r2, r0, #8
 8007c34:	f883 c008 	strb.w	ip, [r3, #8]
 8007c38:	0e00      	lsrs	r0, r0, #24
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	3a01      	subs	r2, #1
 8007c42:	721a      	strb	r2, [r3, #8]
 8007c44:	0202      	lsls	r2, r0, #8
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	0e00      	lsrs	r0, r0, #24
 8007c4a:	4770      	bx	lr
 8007c4c:	20b0      	movs	r0, #176	; 0xb0
 8007c4e:	4770      	bx	lr

08007c50 <_Unwind_GetGR.constprop.0>:
 8007c50:	2300      	movs	r3, #0
 8007c52:	b500      	push	{lr}
 8007c54:	b085      	sub	sp, #20
 8007c56:	a903      	add	r1, sp, #12
 8007c58:	9100      	str	r1, [sp, #0]
 8007c5a:	220c      	movs	r2, #12
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f7ff fbe7 	bl	8007430 <_Unwind_VRS_Get>
 8007c62:	9803      	ldr	r0, [sp, #12]
 8007c64:	b005      	add	sp, #20
 8007c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c6a:	bf00      	nop

08007c6c <unwind_UCB_from_context>:
 8007c6c:	e7f0      	b.n	8007c50 <_Unwind_GetGR.constprop.0>
 8007c6e:	bf00      	nop

08007c70 <__gnu_unwind_execute>:
 8007c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460e      	mov	r6, r1
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ffca 	bl	8007c18 <next_unwind_byte>
 8007c84:	28b0      	cmp	r0, #176	; 0xb0
 8007c86:	4604      	mov	r4, r0
 8007c88:	f000 80ba 	beq.w	8007e00 <__gnu_unwind_execute+0x190>
 8007c8c:	0607      	lsls	r7, r0, #24
 8007c8e:	d520      	bpl.n	8007cd2 <__gnu_unwind_execute+0x62>
 8007c90:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d04d      	beq.n	8007d34 <__gnu_unwind_execute+0xc4>
 8007c98:	2b90      	cmp	r3, #144	; 0x90
 8007c9a:	d036      	beq.n	8007d0a <__gnu_unwind_execute+0x9a>
 8007c9c:	2ba0      	cmp	r3, #160	; 0xa0
 8007c9e:	d060      	beq.n	8007d62 <__gnu_unwind_execute+0xf2>
 8007ca0:	2bb0      	cmp	r3, #176	; 0xb0
 8007ca2:	d073      	beq.n	8007d8c <__gnu_unwind_execute+0x11c>
 8007ca4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca6:	f000 808a 	beq.w	8007dbe <__gnu_unwind_execute+0x14e>
 8007caa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007cae:	2bd0      	cmp	r3, #208	; 0xd0
 8007cb0:	d10b      	bne.n	8007cca <__gnu_unwind_execute+0x5a>
 8007cb2:	f000 0207 	and.w	r2, r0, #7
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	2305      	movs	r3, #5
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007cc2:	f7ff fd99 	bl	80077f8 <_Unwind_VRS_Pop>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0d9      	beq.n	8007c7e <__gnu_unwind_execute+0xe>
 8007cca:	2009      	movs	r0, #9
 8007ccc:	b005      	add	sp, #20
 8007cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cd2:	0083      	lsls	r3, r0, #2
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	1d1f      	adds	r7, r3, #4
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f10d 090c 	add.w	r9, sp, #12
 8007cde:	4619      	mov	r1, r3
 8007ce0:	220d      	movs	r2, #13
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f8cd 9000 	str.w	r9, [sp]
 8007ce8:	f7ff fba2 	bl	8007430 <_Unwind_VRS_Get>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	0660      	lsls	r0, r4, #25
 8007cf0:	bf4c      	ite	mi
 8007cf2:	1bdf      	submi	r7, r3, r7
 8007cf4:	18ff      	addpl	r7, r7, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220d      	movs	r2, #13
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	f8cd 9000 	str.w	r9, [sp]
 8007d02:	9703      	str	r7, [sp, #12]
 8007d04:	f7ff fbba 	bl	800747c <_Unwind_VRS_Set>
 8007d08:	e7b9      	b.n	8007c7e <__gnu_unwind_execute+0xe>
 8007d0a:	f000 030d 	and.w	r3, r0, #13
 8007d0e:	2b0d      	cmp	r3, #13
 8007d10:	d0db      	beq.n	8007cca <__gnu_unwind_execute+0x5a>
 8007d12:	2300      	movs	r3, #0
 8007d14:	af03      	add	r7, sp, #12
 8007d16:	4619      	mov	r1, r3
 8007d18:	f000 020f 	and.w	r2, r0, #15
 8007d1c:	9700      	str	r7, [sp, #0]
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff fb86 	bl	8007430 <_Unwind_VRS_Get>
 8007d24:	2300      	movs	r3, #0
 8007d26:	220d      	movs	r2, #13
 8007d28:	4628      	mov	r0, r5
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	9700      	str	r7, [sp, #0]
 8007d2e:	f7ff fba5 	bl	800747c <_Unwind_VRS_Set>
 8007d32:	e7a4      	b.n	8007c7e <__gnu_unwind_execute+0xe>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ff6f 	bl	8007c18 <next_unwind_byte>
 8007d3a:	0224      	lsls	r4, r4, #8
 8007d3c:	4320      	orrs	r0, r4
 8007d3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007d42:	d0c2      	beq.n	8007cca <__gnu_unwind_execute+0x5a>
 8007d44:	2300      	movs	r3, #0
 8007d46:	0104      	lsls	r4, r0, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	b2a2      	uxth	r2, r4
 8007d4e:	f7ff fd53 	bl	80077f8 <_Unwind_VRS_Pop>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d1b9      	bne.n	8007cca <__gnu_unwind_execute+0x5a>
 8007d56:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007d5a:	bf18      	it	ne
 8007d5c:	f04f 0801 	movne.w	r8, #1
 8007d60:	e78d      	b.n	8007c7e <__gnu_unwind_execute+0xe>
 8007d62:	43c3      	mvns	r3, r0
 8007d64:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	411a      	asrs	r2, r3
 8007d6e:	2300      	movs	r3, #0
 8007d70:	0701      	lsls	r1, r0, #28
 8007d72:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007d76:	bf48      	it	mi
 8007d78:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7ff fd3a 	bl	80077f8 <_Unwind_VRS_Pop>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f43f af7a 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007d8a:	e79e      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007d8c:	28b1      	cmp	r0, #177	; 0xb1
 8007d8e:	d03c      	beq.n	8007e0a <__gnu_unwind_execute+0x19a>
 8007d90:	28b2      	cmp	r0, #178	; 0xb2
 8007d92:	f000 80b0 	beq.w	8007ef6 <__gnu_unwind_execute+0x286>
 8007d96:	28b3      	cmp	r0, #179	; 0xb3
 8007d98:	d04a      	beq.n	8007e30 <__gnu_unwind_execute+0x1c0>
 8007d9a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8007d9e:	2bb4      	cmp	r3, #180	; 0xb4
 8007da0:	d093      	beq.n	8007cca <__gnu_unwind_execute+0x5a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	f000 0207 	and.w	r2, r0, #7
 8007da8:	441a      	add	r2, r3
 8007daa:	4628      	mov	r0, r5
 8007dac:	4619      	mov	r1, r3
 8007dae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007db2:	f7ff fd21 	bl	80077f8 <_Unwind_VRS_Pop>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f43f af61 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007dbc:	e785      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007dbe:	28c6      	cmp	r0, #198	; 0xc6
 8007dc0:	d04f      	beq.n	8007e62 <__gnu_unwind_execute+0x1f2>
 8007dc2:	28c7      	cmp	r0, #199	; 0xc7
 8007dc4:	d061      	beq.n	8007e8a <__gnu_unwind_execute+0x21a>
 8007dc6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007dca:	2bc0      	cmp	r3, #192	; 0xc0
 8007dcc:	d070      	beq.n	8007eb0 <__gnu_unwind_execute+0x240>
 8007dce:	28c8      	cmp	r0, #200	; 0xc8
 8007dd0:	d07c      	beq.n	8007ecc <__gnu_unwind_execute+0x25c>
 8007dd2:	28c9      	cmp	r0, #201	; 0xc9
 8007dd4:	f47f af79 	bne.w	8007cca <__gnu_unwind_execute+0x5a>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff ff1d 	bl	8007c18 <next_unwind_byte>
 8007dde:	2305      	movs	r3, #5
 8007de0:	4602      	mov	r2, r0
 8007de2:	2101      	movs	r1, #1
 8007de4:	4628      	mov	r0, r5
 8007de6:	0314      	lsls	r4, r2, #12
 8007de8:	f002 020f 	and.w	r2, r2, #15
 8007dec:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8007df0:	440a      	add	r2, r1
 8007df2:	4322      	orrs	r2, r4
 8007df4:	f7ff fd00 	bl	80077f8 <_Unwind_VRS_Pop>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f43f af40 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007dfe:	e764      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	d01c      	beq.n	8007e40 <__gnu_unwind_execute+0x1d0>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e760      	b.n	8007ccc <__gnu_unwind_execute+0x5c>
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ff04 	bl	8007c18 <next_unwind_byte>
 8007e10:	4602      	mov	r2, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f43f af59 	beq.w	8007cca <__gnu_unwind_execute+0x5a>
 8007e18:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007e1c:	f47f af55 	bne.w	8007cca <__gnu_unwind_execute+0x5a>
 8007e20:	4619      	mov	r1, r3
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff fce8 	bl	80077f8 <_Unwind_VRS_Pop>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	f43f af28 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007e2e:	e74c      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff fef1 	bl	8007c18 <next_unwind_byte>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4602      	mov	r2, r0
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	e7d2      	b.n	8007de6 <__gnu_unwind_execute+0x176>
 8007e40:	ac03      	add	r4, sp, #12
 8007e42:	4643      	mov	r3, r8
 8007e44:	220e      	movs	r2, #14
 8007e46:	4641      	mov	r1, r8
 8007e48:	4628      	mov	r0, r5
 8007e4a:	9400      	str	r4, [sp, #0]
 8007e4c:	f7ff faf0 	bl	8007430 <_Unwind_VRS_Get>
 8007e50:	4643      	mov	r3, r8
 8007e52:	220f      	movs	r2, #15
 8007e54:	4628      	mov	r0, r5
 8007e56:	4641      	mov	r1, r8
 8007e58:	9400      	str	r4, [sp, #0]
 8007e5a:	f7ff fb0f 	bl	800747c <_Unwind_VRS_Set>
 8007e5e:	4640      	mov	r0, r8
 8007e60:	e734      	b.n	8007ccc <__gnu_unwind_execute+0x5c>
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff fed8 	bl	8007c18 <next_unwind_byte>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	0314      	lsls	r4, r2, #12
 8007e6e:	f002 020f 	and.w	r2, r2, #15
 8007e72:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8007e76:	3201      	adds	r2, #1
 8007e78:	4628      	mov	r0, r5
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4322      	orrs	r2, r4
 8007e7e:	f7ff fcbb 	bl	80077f8 <_Unwind_VRS_Pop>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	f43f aefb 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007e88:	e71f      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff fec4 	bl	8007c18 <next_unwind_byte>
 8007e90:	4602      	mov	r2, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f43f af19 	beq.w	8007cca <__gnu_unwind_execute+0x5a>
 8007e98:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007e9c:	f47f af15 	bne.w	8007cca <__gnu_unwind_execute+0x5a>
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f7ff fca8 	bl	80077f8 <_Unwind_VRS_Pop>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	f43f aee8 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007eae:	e70c      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	f000 020f 	and.w	r2, r0, #15
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	4628      	mov	r0, r5
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007ec0:	f7ff fc9a 	bl	80077f8 <_Unwind_VRS_Pop>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f aeda 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007eca:	e6fe      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff fea3 	bl	8007c18 <next_unwind_byte>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8007eda:	f002 020f 	and.w	r2, r2, #15
 8007ede:	3410      	adds	r4, #16
 8007ee0:	440a      	add	r2, r1
 8007ee2:	2305      	movs	r3, #5
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8007eea:	f7ff fc85 	bl	80077f8 <_Unwind_VRS_Pop>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f43f aec5 	beq.w	8007c7e <__gnu_unwind_execute+0xe>
 8007ef4:	e6e9      	b.n	8007cca <__gnu_unwind_execute+0x5a>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f10d 090c 	add.w	r9, sp, #12
 8007efc:	220d      	movs	r2, #13
 8007efe:	4619      	mov	r1, r3
 8007f00:	4628      	mov	r0, r5
 8007f02:	f8cd 9000 	str.w	r9, [sp]
 8007f06:	f7ff fa93 	bl	8007430 <_Unwind_VRS_Get>
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff fe84 	bl	8007c18 <next_unwind_byte>
 8007f10:	0602      	lsls	r2, r0, #24
 8007f12:	f04f 0402 	mov.w	r4, #2
 8007f16:	d50c      	bpl.n	8007f32 <__gnu_unwind_execute+0x2c2>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007f1e:	40a0      	lsls	r0, r4
 8007f20:	4418      	add	r0, r3
 8007f22:	9003      	str	r0, [sp, #12]
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff fe77 	bl	8007c18 <next_unwind_byte>
 8007f2a:	0603      	lsls	r3, r0, #24
 8007f2c:	f104 0407 	add.w	r4, r4, #7
 8007f30:	d4f2      	bmi.n	8007f18 <__gnu_unwind_execute+0x2a8>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8007f38:	40a2      	lsls	r2, r4
 8007f3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007f3e:	441a      	add	r2, r3
 8007f40:	2300      	movs	r3, #0
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	4628      	mov	r0, r5
 8007f46:	220d      	movs	r2, #13
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f8cd 9000 	str.w	r9, [sp]
 8007f4e:	f7ff fa95 	bl	800747c <_Unwind_VRS_Set>
 8007f52:	e694      	b.n	8007c7e <__gnu_unwind_execute+0xe>

08007f54 <__gnu_unwind_frame>:
 8007f54:	460b      	mov	r3, r1
 8007f56:	f04f 0c03 	mov.w	ip, #3
 8007f5a:	b500      	push	{lr}
 8007f5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	6853      	ldr	r3, [r2, #4]
 8007f62:	b085      	sub	sp, #20
 8007f64:	3208      	adds	r2, #8
 8007f66:	9202      	str	r2, [sp, #8]
 8007f68:	a901      	add	r1, sp, #4
 8007f6a:	0e1a      	lsrs	r2, r3, #24
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	f88d c00c 	strb.w	ip, [sp, #12]
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	f88d 200d 	strb.w	r2, [sp, #13]
 8007f78:	f7ff fe7a 	bl	8007c70 <__gnu_unwind_execute>
 8007f7c:	b005      	add	sp, #20
 8007f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f82:	bf00      	nop

08007f84 <_Unwind_GetRegionStart>:
 8007f84:	b508      	push	{r3, lr}
 8007f86:	f7ff fe71 	bl	8007c6c <unwind_UCB_from_context>
 8007f8a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007f8c:	bd08      	pop	{r3, pc}
 8007f8e:	bf00      	nop

08007f90 <_Unwind_GetLanguageSpecificData>:
 8007f90:	b508      	push	{r3, lr}
 8007f92:	f7ff fe6b 	bl	8007c6c <unwind_UCB_from_context>
 8007f96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007f98:	79c3      	ldrb	r3, [r0, #7]
 8007f9a:	3302      	adds	r3, #2
 8007f9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fa0:	bd08      	pop	{r3, pc}
 8007fa2:	bf00      	nop

08007fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8007fa8:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <HAL_InitTick+0x24>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <HAL_InitTick+0x28>)
 8007fae:	fba3 3000 	umull	r3, r0, r3, r0
 8007fb2:	0980      	lsrs	r0, r0, #6
 8007fb4:	f000 fa8c 	bl	80084d0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	f000 fa50 	bl	8008464 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	20000000 	.word	0x20000000
 8007fcc:	10624dd3 	.word	0x10624dd3

08007fd0 <HAL_Init>:
{
 8007fd0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fd2:	4a07      	ldr	r2, [pc, #28]	; (8007ff0 <HAL_Init+0x20>)
 8007fd4:	6813      	ldr	r3, [r2, #0]
 8007fd6:	f043 0310 	orr.w	r3, r3, #16
 8007fda:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fdc:	2003      	movs	r0, #3
 8007fde:	f000 fa2f 	bl	8008440 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f7ff ffde 	bl	8007fa4 <HAL_InitTick>
  HAL_MspInit();
 8007fe8:	f003 fc42 	bl	800b870 <HAL_MspInit>
}
 8007fec:	2000      	movs	r0, #0
 8007fee:	bd08      	pop	{r3, pc}
 8007ff0:	40022000 	.word	0x40022000

08007ff4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8007ff4:	4a02      	ldr	r2, [pc, #8]	; (8008000 <HAL_IncTick+0xc>)
 8007ff6:	6813      	ldr	r3, [r2, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6013      	str	r3, [r2, #0]
}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000870 	.word	0x20000870

08008004 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008004:	4b01      	ldr	r3, [pc, #4]	; (800800c <HAL_GetTick+0x8>)
 8008006:	6818      	ldr	r0, [r3, #0]
}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000870 	.word	0x20000870

08008010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008010:	b530      	push	{r4, r5, lr}
 8008012:	b083      	sub	sp, #12
 8008014:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8008016:	f7ff fff5 	bl	8008004 <HAL_GetTick>
 800801a:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 800801c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800801e:	f1b4 3fff 	cmp.w	r4, #4294967295
  {
     wait++;
 8008022:	bf18      	it	ne
 8008024:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008026:	f7ff ffed 	bl	8008004 <HAL_GetTick>
 800802a:	1b40      	subs	r0, r0, r5
 800802c:	42a0      	cmp	r0, r4
 800802e:	d3fa      	bcc.n	8008026 <HAL_Delay+0x16>
  {
  }
}
 8008030:	b003      	add	sp, #12
 8008032:	bd30      	pop	{r4, r5, pc}

08008034 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008034:	b430      	push	{r4, r5}
 8008036:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8008038:	2200      	movs	r2, #0
 800803a:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800803c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8008040:	2a01      	cmp	r2, #1
 8008042:	f000 8095 	beq.w	8008170 <HAL_ADC_ConfigChannel+0x13c>
 8008046:	4603      	mov	r3, r0
 8008048:	2201      	movs	r2, #1
 800804a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800804e:	684a      	ldr	r2, [r1, #4]
 8008050:	2a06      	cmp	r2, #6
 8008052:	d82d      	bhi.n	80080b0 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008054:	6804      	ldr	r4, [r0, #0]
 8008056:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008058:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800805c:	3a05      	subs	r2, #5
 800805e:	f04f 0c1f 	mov.w	ip, #31
 8008062:	fa0c fc02 	lsl.w	ip, ip, r2
 8008066:	ea20 000c 	bic.w	r0, r0, ip
 800806a:	680d      	ldr	r5, [r1, #0]
 800806c:	fa05 f202 	lsl.w	r2, r5, r2
 8008070:	4302      	orrs	r2, r0
 8008072:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008074:	680a      	ldr	r2, [r1, #0]
 8008076:	2a09      	cmp	r2, #9
 8008078:	d93a      	bls.n	80080f0 <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800807a:	681c      	ldr	r4, [r3, #0]
 800807c:	68e0      	ldr	r0, [r4, #12]
 800807e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008082:	3a1e      	subs	r2, #30
 8008084:	f04f 0c07 	mov.w	ip, #7
 8008088:	fa0c fc02 	lsl.w	ip, ip, r2
 800808c:	ea20 000c 	bic.w	r0, r0, ip
 8008090:	688d      	ldr	r5, [r1, #8]
 8008092:	fa05 f202 	lsl.w	r2, r5, r2
 8008096:	4302      	orrs	r2, r0
 8008098:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800809a:	680a      	ldr	r2, [r1, #0]
 800809c:	3a10      	subs	r2, #16
 800809e:	2a01      	cmp	r2, #1
 80080a0:	d936      	bls.n	8008110 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080a2:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80080aa:	b002      	add	sp, #8
 80080ac:	bc30      	pop	{r4, r5}
 80080ae:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80080b0:	2a0c      	cmp	r2, #12
 80080b2:	d80e      	bhi.n	80080d2 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80080b4:	6805      	ldr	r5, [r0, #0]
 80080b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80080b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080bc:	3a23      	subs	r2, #35	; 0x23
 80080be:	241f      	movs	r4, #31
 80080c0:	4094      	lsls	r4, r2
 80080c2:	ea20 0004 	bic.w	r0, r0, r4
 80080c6:	680c      	ldr	r4, [r1, #0]
 80080c8:	fa04 f202 	lsl.w	r2, r4, r2
 80080cc:	4302      	orrs	r2, r0
 80080ce:	632a      	str	r2, [r5, #48]	; 0x30
 80080d0:	e7d0      	b.n	8008074 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80080d2:	6805      	ldr	r5, [r0, #0]
 80080d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80080d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080da:	3a41      	subs	r2, #65	; 0x41
 80080dc:	241f      	movs	r4, #31
 80080de:	4094      	lsls	r4, r2
 80080e0:	ea20 0004 	bic.w	r0, r0, r4
 80080e4:	680c      	ldr	r4, [r1, #0]
 80080e6:	fa04 f202 	lsl.w	r2, r4, r2
 80080ea:	4302      	orrs	r2, r0
 80080ec:	62ea      	str	r2, [r5, #44]	; 0x2c
 80080ee:	e7c1      	b.n	8008074 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80080f0:	681c      	ldr	r4, [r3, #0]
 80080f2:	6920      	ldr	r0, [r4, #16]
 80080f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80080f8:	f04f 0c07 	mov.w	ip, #7
 80080fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8008100:	ea20 000c 	bic.w	r0, r0, ip
 8008104:	688d      	ldr	r5, [r1, #8]
 8008106:	fa05 f202 	lsl.w	r2, r5, r2
 800810a:	4302      	orrs	r2, r0
 800810c:	6122      	str	r2, [r4, #16]
 800810e:	e7c4      	b.n	800809a <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	4a18      	ldr	r2, [pc, #96]	; (8008174 <HAL_ADC_ConfigChannel+0x140>)
 8008114:	4290      	cmp	r0, r2
 8008116:	d005      	beq.n	8008124 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811a:	f042 0220 	orr.w	r2, r2, #32
 800811e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8008120:	2001      	movs	r0, #1
 8008122:	e7bf      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008124:	6892      	ldr	r2, [r2, #8]
 8008126:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800812a:	d11d      	bne.n	8008168 <HAL_ADC_ConfigChannel+0x134>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800812c:	4811      	ldr	r0, [pc, #68]	; (8008174 <HAL_ADC_ConfigChannel+0x140>)
 800812e:	6882      	ldr	r2, [r0, #8]
 8008130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008134:	6082      	str	r2, [r0, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008136:	680a      	ldr	r2, [r1, #0]
 8008138:	2a10      	cmp	r2, #16
 800813a:	d001      	beq.n	8008140 <HAL_ADC_ConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800813c:	2000      	movs	r0, #0
 800813e:	e7b1      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008140:	4a0d      	ldr	r2, [pc, #52]	; (8008178 <HAL_ADC_ConfigChannel+0x144>)
 8008142:	6812      	ldr	r2, [r2, #0]
 8008144:	490d      	ldr	r1, [pc, #52]	; (800817c <HAL_ADC_ConfigChannel+0x148>)
 8008146:	fba1 1202 	umull	r1, r2, r1, r2
 800814a:	0c92      	lsrs	r2, r2, #18
 800814c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008150:	0052      	lsls	r2, r2, #1
 8008152:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8008154:	9a01      	ldr	r2, [sp, #4]
 8008156:	b14a      	cbz	r2, 800816c <HAL_ADC_ConfigChannel+0x138>
            wait_loop_index--;
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	3a01      	subs	r2, #1
 800815c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800815e:	9a01      	ldr	r2, [sp, #4]
 8008160:	2a00      	cmp	r2, #0
 8008162:	d1f9      	bne.n	8008158 <HAL_ADC_ConfigChannel+0x124>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008164:	2000      	movs	r0, #0
 8008166:	e79d      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x70>
 8008168:	2000      	movs	r0, #0
 800816a:	e79b      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x70>
 800816c:	2000      	movs	r0, #0
 800816e:	e799      	b.n	80080a4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8008170:	2002      	movs	r0, #2
 8008172:	e79a      	b.n	80080aa <HAL_ADC_ConfigChannel+0x76>
 8008174:	40012400 	.word	0x40012400
 8008178:	20000000 	.word	0x20000000
 800817c:	431bde83 	.word	0x431bde83

08008180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008180:	b530      	push	{r4, r5, lr}
 8008182:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008188:	6803      	ldr	r3, [r0, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	f012 0f01 	tst.w	r2, #1
 8008190:	d12f      	bne.n	80081f2 <ADC_Enable+0x72>
 8008192:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	f042 0201 	orr.w	r2, r2, #1
 800819a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <ADC_Enable+0x78>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a16      	ldr	r2, [pc, #88]	; (80081fc <ADC_Enable+0x7c>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	0c9b      	lsrs	r3, r3, #18
 80081a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80081aa:	9b01      	ldr	r3, [sp, #4]
 80081ac:	b12b      	cbz	r3, 80081ba <ADC_Enable+0x3a>
    {
      wait_loop_index--;
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f9      	bne.n	80081ae <ADC_Enable+0x2e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80081ba:	f7ff ff23 	bl	8008004 <HAL_GetTick>
 80081be:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f013 0f01 	tst.w	r3, #1
 80081c8:	d111      	bne.n	80081ee <ADC_Enable+0x6e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80081ca:	f7ff ff1b 	bl	8008004 <HAL_GetTick>
 80081ce:	1b43      	subs	r3, r0, r5
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d9f5      	bls.n	80081c0 <ADC_Enable+0x40>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081d6:	f043 0310 	orr.w	r3, r3, #16
 80081da:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	62e3      	str	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80081e4:	2300      	movs	r3, #0
 80081e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      
        return HAL_ERROR;
 80081ea:	2001      	movs	r0, #1
 80081ec:	e002      	b.n	80081f4 <ADC_Enable+0x74>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80081ee:	2000      	movs	r0, #0
 80081f0:	e000      	b.n	80081f4 <ADC_Enable+0x74>
 80081f2:	2000      	movs	r0, #0
}
 80081f4:	b003      	add	sp, #12
 80081f6:	bd30      	pop	{r4, r5, pc}
 80081f8:	20000000 	.word	0x20000000
 80081fc:	431bde83 	.word	0x431bde83

08008200 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008200:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008202:	6803      	ldr	r3, [r0, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	f012 0f01 	tst.w	r2, #1
 800820a:	d101      	bne.n	8008210 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800820c:	2000      	movs	r0, #0
}
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800821a:	f7ff fef3 	bl	8008004 <HAL_GetTick>
 800821e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f013 0f01 	tst.w	r3, #1
 8008228:	d00e      	beq.n	8008248 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800822a:	f7ff feeb 	bl	8008004 <HAL_GetTick>
 800822e:	1b43      	subs	r3, r0, r5
 8008230:	2b02      	cmp	r3, #2
 8008232:	d9f5      	bls.n	8008220 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008234:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008236:	f043 0310 	orr.w	r3, r3, #16
 800823a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800823c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8008244:	2001      	movs	r0, #1
 8008246:	e7e2      	b.n	800820e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8008248:	2000      	movs	r0, #0
 800824a:	e7e0      	b.n	800820e <ADC_ConversionStop_Disable+0xe>

0800824c <HAL_ADC_Init>:
  if(hadc == NULL)
 800824c:	2800      	cmp	r0, #0
 800824e:	d07a      	beq.n	8008346 <HAL_ADC_Init+0xfa>
{
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008254:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d04f      	beq.n	80082fa <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ffd0 	bl	8008200 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008262:	f013 0310 	ands.w	r3, r3, #16
 8008266:	d168      	bne.n	800833a <HAL_ADC_Init+0xee>
 8008268:	2800      	cmp	r0, #0
 800826a:	d166      	bne.n	800833a <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 800826c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800826e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8008272:	f022 0202 	bic.w	r2, r2, #2
 8008276:	f042 0202 	orr.w	r2, r2, #2
 800827a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800827c:	68e1      	ldr	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	69e5      	ldr	r5, [r4, #28]
 8008282:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8008284:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008288:	68a5      	ldr	r5, [r4, #8]
 800828a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800828e:	d004      	beq.n	800829a <HAL_ADC_Init+0x4e>
 8008290:	2d01      	cmp	r5, #1
 8008292:	bf14      	ite	ne
 8008294:	461d      	movne	r5, r3
 8008296:	f44f 7580 	moveq.w	r5, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800829a:	6966      	ldr	r6, [r4, #20]
 800829c:	2e01      	cmp	r6, #1
 800829e:	d032      	beq.n	8008306 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80082a0:	6826      	ldr	r6, [r4, #0]
 80082a2:	6871      	ldr	r1, [r6, #4]
 80082a4:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80082a8:	4329      	orrs	r1, r5
 80082aa:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80082ac:	6825      	ldr	r5, [r4, #0]
 80082ae:	68ae      	ldr	r6, [r5, #8]
 80082b0:	4926      	ldr	r1, [pc, #152]	; (800834c <HAL_ADC_Init+0x100>)
 80082b2:	4031      	ands	r1, r6
 80082b4:	4311      	orrs	r1, r2
 80082b6:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80082b8:	68a1      	ldr	r1, [r4, #8]
 80082ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80082be:	d001      	beq.n	80082c4 <HAL_ADC_Init+0x78>
 80082c0:	2901      	cmp	r1, #1
 80082c2:	d102      	bne.n	80082ca <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80082ca:	6825      	ldr	r5, [r4, #0]
 80082cc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80082ce:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80082d2:	430b      	orrs	r3, r1
 80082d4:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	6899      	ldr	r1, [r3, #8]
 80082da:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <HAL_ADC_Init+0x104>)
 80082dc:	400b      	ands	r3, r1
 80082de:	429a      	cmp	r2, r3
 80082e0:	d022      	beq.n	8008328 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 80082e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082e4:	f023 0312 	bic.w	r3, r3, #18
 80082e8:	f043 0310 	orr.w	r3, r3, #16
 80082ec:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082f0:	f043 0301 	orr.w	r3, r3, #1
 80082f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80082f6:	2001      	movs	r0, #1
 80082f8:	e024      	b.n	8008344 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 80082fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80082fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8008300:	f003 fb00 	bl	800b904 <HAL_ADC_MspInit>
 8008304:	e7a9      	b.n	800825a <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008306:	b931      	cbnz	r1, 8008316 <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008308:	69a1      	ldr	r1, [r4, #24]
 800830a:	3901      	subs	r1, #1
 800830c:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8008310:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8008314:	e7c4      	b.n	80082a0 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008316:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008318:	f041 0120 	orr.w	r1, r1, #32
 800831c:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800831e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008320:	f041 0101 	orr.w	r1, r1, #1
 8008324:	62e1      	str	r1, [r4, #44]	; 0x2c
 8008326:	e7bb      	b.n	80082a0 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8008328:	2300      	movs	r3, #0
 800832a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800832c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	62a3      	str	r3, [r4, #40]	; 0x28
 8008338:	e004      	b.n	8008344 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800833a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800833c:	f043 0310 	orr.w	r3, r3, #16
 8008340:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8008342:	2001      	movs	r0, #1
}
 8008344:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008346:	2001      	movs	r0, #1
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	ffe1f7fd 	.word	0xffe1f7fd
 8008350:	ff1f0efe 	.word	0xff1f0efe

08008354 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800835c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008360:	2b01      	cmp	r3, #1
 8008362:	d069      	beq.n	8008438 <HAL_ADCEx_Calibration_Start+0xe4>
 8008364:	4604      	mov	r4, r0
 8008366:	2301      	movs	r3, #1
 8008368:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800836c:	f7ff ff48 	bl	8008200 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008370:	4605      	mov	r5, r0
 8008372:	b128      	cbz	r0, 8008380 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008374:	2300      	movs	r3, #0
 8008376:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800837a:	4628      	mov	r0, r5
 800837c:	b002      	add	sp, #8
 800837e:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8008380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008382:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008386:	f023 0302 	bic.w	r3, r3, #2
 800838a:	f043 0302 	orr.w	r3, r3, #2
 800838e:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <HAL_ADCEx_Calibration_Start+0xe8>)
 8008392:	681e      	ldr	r6, [r3, #0]
 8008394:	2002      	movs	r0, #2
 8008396:	f000 fe2b 	bl	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq>
 800839a:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800839e:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80083a0:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	b12b      	cbz	r3, 80083b2 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f9      	bne.n	80083a6 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff fee4 	bl	8008180 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80083b8:	6822      	ldr	r2, [r4, #0]
 80083ba:	6893      	ldr	r3, [r2, #8]
 80083bc:	f043 0308 	orr.w	r3, r3, #8
 80083c0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80083c2:	f7ff fe1f 	bl	8008004 <HAL_GetTick>
 80083c6:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	f012 0f08 	tst.w	r2, #8
 80083d0:	d00f      	beq.n	80083f2 <HAL_ADCEx_Calibration_Start+0x9e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80083d2:	f7ff fe17 	bl	8008004 <HAL_GetTick>
 80083d6:	1b80      	subs	r0, r0, r6
 80083d8:	280a      	cmp	r0, #10
 80083da:	d9f5      	bls.n	80083c8 <HAL_ADCEx_Calibration_Start+0x74>
        ADC_STATE_CLR_SET(hadc->State,
 80083dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083de:	f023 0312 	bic.w	r3, r3, #18
 80083e2:	f043 0310 	orr.w	r3, r3, #16
 80083e6:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80083e8:	2300      	movs	r3, #0
 80083ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80083ee:	2501      	movs	r5, #1
 80083f0:	e7c3      	b.n	800837a <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	f042 0204 	orr.w	r2, r2, #4
 80083f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80083fa:	f7ff fe03 	bl	8008004 <HAL_GetTick>
 80083fe:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f013 0f04 	tst.w	r3, #4
 8008408:	d00f      	beq.n	800842a <HAL_ADCEx_Calibration_Start+0xd6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800840a:	f7ff fdfb 	bl	8008004 <HAL_GetTick>
 800840e:	1b80      	subs	r0, r0, r6
 8008410:	280a      	cmp	r0, #10
 8008412:	d9f5      	bls.n	8008400 <HAL_ADCEx_Calibration_Start+0xac>
        ADC_STATE_CLR_SET(hadc->State,
 8008414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008416:	f023 0312 	bic.w	r3, r3, #18
 800841a:	f043 0310 	orr.w	r3, r3, #16
 800841e:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8008420:	2300      	movs	r3, #0
 8008422:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8008426:	2501      	movs	r5, #1
 8008428:	e7a7      	b.n	800837a <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 800842a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800842c:	f023 0303 	bic.w	r3, r3, #3
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	62a3      	str	r3, [r4, #40]	; 0x28
 8008436:	e79d      	b.n	8008374 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8008438:	2502      	movs	r5, #2
 800843a:	e79e      	b.n	800837a <HAL_ADCEx_Calibration_Start+0x26>
 800843c:	20000000 	.word	0x20000000

08008440 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008440:	4907      	ldr	r1, [pc, #28]	; (8008460 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008442:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008444:	0203      	lsls	r3, r0, #8
 8008446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800844a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800844e:	0412      	lsls	r2, r2, #16
 8008450:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800845c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800845e:	4770      	bx	lr
 8008460:	e000ed00 	.word	0xe000ed00

08008464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008464:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <HAL_NVIC_SetPriority+0x64>)
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800846e:	f1c3 0c07 	rsb	ip, r3, #7
 8008472:	f1bc 0f04 	cmp.w	ip, #4
 8008476:	bf28      	it	cs
 8008478:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800847c:	f103 0e04 	add.w	lr, r3, #4
 8008480:	f1be 0f06 	cmp.w	lr, #6
 8008484:	bf8c      	ite	hi
 8008486:	3b03      	subhi	r3, #3
 8008488:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800848a:	f04f 3eff 	mov.w	lr, #4294967295
 800848e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008492:	ea21 010c 	bic.w	r1, r1, ip
 8008496:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008498:	fa0e f303 	lsl.w	r3, lr, r3
 800849c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084a0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) < 0)
 80084a2:	2800      	cmp	r0, #0
 80084a4:	db09      	blt.n	80084ba <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a6:	0109      	lsls	r1, r1, #4
 80084a8:	b2c9      	uxtb	r1, r1
 80084aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80084ae:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80084b2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80084b6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084ba:	f000 000f 	and.w	r0, r0, #15
 80084be:	0109      	lsls	r1, r1, #4
 80084c0:	b2c9      	uxtb	r1, r1
 80084c2:	4b02      	ldr	r3, [pc, #8]	; (80084cc <HAL_NVIC_SetPriority+0x68>)
 80084c4:	5419      	strb	r1, [r3, r0]
 80084c6:	e7f6      	b.n	80084b6 <HAL_NVIC_SetPriority+0x52>
 80084c8:	e000ed00 	.word	0xe000ed00
 80084cc:	e000ed14 	.word	0xe000ed14

080084d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084d0:	3801      	subs	r0, #1
 80084d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80084d6:	d20b      	bcs.n	80084f0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084de:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <HAL_SYSTICK_Config+0x24>)
 80084e0:	21f0      	movs	r1, #240	; 0xf0
 80084e2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084e6:	2000      	movs	r0, #0
 80084e8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084ea:	2207      	movs	r2, #7
 80084ec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80084f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80084f2:	4770      	bx	lr
 80084f4:	e000ed00 	.word	0xe000ed00

080084f8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80084f8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80084fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80084fe:	6913      	ldr	r3, [r2, #16]
 8008500:	bf0c      	ite	eq
 8008502:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008506:	f023 0304 	bicne.w	r3, r3, #4
 800850a:	6113      	str	r3, [r2, #16]
  }
}
 800850c:	4770      	bx	lr

0800850e <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800850e:	4770      	bx	lr

08008510 <HAL_SYSTICK_IRQHandler>:
{
 8008510:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008512:	f7ff fffc 	bl	800850e <HAL_SYSTICK_Callback>
}
 8008516:	bd08      	pop	{r3, pc}

08008518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	b083      	sub	sp, #12
 800851e:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008520:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008522:	4e90      	ldr	r6, [pc, #576]	; (8008764 <HAL_GPIO_Init+0x24c>)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8008524:	4c90      	ldr	r4, [pc, #576]	; (8008768 <HAL_GPIO_Init+0x250>)
      switch (GPIO_Init->Mode)
 8008526:	4d91      	ldr	r5, [pc, #580]	; (800876c <HAL_GPIO_Init+0x254>)
 8008528:	f8df e244 	ldr.w	lr, [pc, #580]	; 8008770 <HAL_GPIO_Init+0x258>
 800852c:	4694      	mov	ip, r2
 800852e:	e0b7      	b.n	80086a0 <HAL_GPIO_Init+0x188>
 8008530:	f04f 0c00 	mov.w	ip, #0
 8008534:	e025      	b.n	8008582 <HAL_GPIO_Init+0x6a>
 8008536:	45a9      	cmp	r9, r5
 8008538:	d00f      	beq.n	800855a <HAL_GPIO_Init+0x42>
 800853a:	d906      	bls.n	800854a <HAL_GPIO_Init+0x32>
 800853c:	45f1      	cmp	r9, lr
 800853e:	d00c      	beq.n	800855a <HAL_GPIO_Init+0x42>
 8008540:	f8df a230 	ldr.w	sl, [pc, #560]	; 8008774 <HAL_GPIO_Init+0x25c>
 8008544:	45d1      	cmp	r9, sl
 8008546:	d008      	beq.n	800855a <HAL_GPIO_Init+0x42>
 8008548:	e01b      	b.n	8008582 <HAL_GPIO_Init+0x6a>
 800854a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8008778 <HAL_GPIO_Init+0x260>
 800854e:	45d1      	cmp	r9, sl
 8008550:	d003      	beq.n	800855a <HAL_GPIO_Init+0x42>
 8008552:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8008556:	45d1      	cmp	r9, sl
 8008558:	d10f      	bne.n	800857a <HAL_GPIO_Init+0x62>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800855a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800855e:	f1bc 0f00 	cmp.w	ip, #0
 8008562:	f000 80ef 	beq.w	8008744 <HAL_GPIO_Init+0x22c>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8008566:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 800856a:	bf0c      	ite	eq
 800856c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8008570:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008574:	f04f 0c08 	mov.w	ip, #8
 8008578:	e003      	b.n	8008582 <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 800857a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 800857e:	45d1      	cmp	r9, sl
 8008580:	d0eb      	beq.n	800855a <HAL_GPIO_Init+0x42>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008582:	2fff      	cmp	r7, #255	; 0xff
 8008584:	bf99      	ittee	ls
 8008586:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8008588:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800858a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800858e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8008592:	f8d9 8000 	ldr.w	r8, [r9]
 8008596:	f04f 0b0f 	mov.w	fp, #15
 800859a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800859e:	ea28 080b 	bic.w	r8, r8, fp
 80085a2:	fa0c fa0a 	lsl.w	sl, ip, sl
 80085a6:	ea48 080a 	orr.w	r8, r8, sl
 80085aa:	f8c9 8000 	str.w	r8, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80085ae:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80085b2:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 80085b6:	d06f      	beq.n	8008698 <HAL_GPIO_Init+0x180>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80085b8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80085bc:	f048 0801 	orr.w	r8, r8, #1
 80085c0:	f8c6 8018 	str.w	r8, [r6, #24]
 80085c4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80085c8:	f008 0801 	and.w	r8, r8, #1
 80085cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80085d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80085d4:	f023 0803 	bic.w	r8, r3, #3
 80085d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80085dc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80085e0:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80085e4:	f003 0903 	and.w	r9, r3, #3
 80085e8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80085ec:	f04f 090f 	mov.w	r9, #15
 80085f0:	fa09 f90b 	lsl.w	r9, r9, fp
 80085f4:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085f8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800877c <HAL_GPIO_Init+0x264>
 80085fc:	4548      	cmp	r0, r9
 80085fe:	f000 80a4 	beq.w	800874a <HAL_GPIO_Init+0x232>
 8008602:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8008606:	4548      	cmp	r0, r9
 8008608:	f000 80a2 	beq.w	8008750 <HAL_GPIO_Init+0x238>
 800860c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8008610:	4548      	cmp	r0, r9
 8008612:	f000 80a0 	beq.w	8008756 <HAL_GPIO_Init+0x23e>
 8008616:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800861a:	4548      	cmp	r0, r9
 800861c:	bf0c      	ite	eq
 800861e:	f04f 0903 	moveq.w	r9, #3
 8008622:	f04f 0904 	movne.w	r9, #4
 8008626:	fa09 f90b 	lsl.w	r9, r9, fp
 800862a:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2U] = temp;
 800862e:	f8c8 9008 	str.w	r9, [r8, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008632:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8008636:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 800863a:	f8d4 8000 	ldr.w	r8, [r4]
 800863e:	bf14      	ite	ne
 8008640:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8008644:	ea28 0807 	biceq.w	r8, r8, r7
 8008648:	f8c4 8000 	str.w	r8, [r4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800864c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8008650:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8008654:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008658:	bf14      	ite	ne
 800865a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800865e:	ea28 0807 	biceq.w	r8, r8, r7
 8008662:	f8c4 8004 	str.w	r8, [r4, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008666:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800866a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 800866e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008672:	bf14      	ite	ne
 8008674:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8008678:	ea28 0807 	biceq.w	r8, r8, r7
 800867c:	f8c4 8008 	str.w	r8, [r4, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008680:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8008684:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8008688:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800868c:	bf14      	ite	ne
 800868e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8008692:	ea28 0707 	biceq.w	r7, r8, r7
 8008696:	60e7      	str	r7, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008698:	3301      	adds	r3, #1
 800869a:	3204      	adds	r2, #4
 800869c:	2b10      	cmp	r3, #16
 800869e:	d05d      	beq.n	800875c <HAL_GPIO_Init+0x244>
    ioposition = (0x01U << position);
 80086a0:	f04f 0801 	mov.w	r8, #1
 80086a4:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086a8:	f8d1 9000 	ldr.w	r9, [r1]
 80086ac:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80086b0:	ea38 0909 	bics.w	r9, r8, r9
 80086b4:	d1f0      	bne.n	8008698 <HAL_GPIO_Init+0x180>
      switch (GPIO_Init->Mode)
 80086b6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80086ba:	f1b9 0f12 	cmp.w	r9, #18
 80086be:	f63f af3a 	bhi.w	8008536 <HAL_GPIO_Init+0x1e>
 80086c2:	f1b9 0f12 	cmp.w	r9, #18
 80086c6:	f63f af5c 	bhi.w	8008582 <HAL_GPIO_Init+0x6a>
 80086ca:	f20f 0a08 	addw	sl, pc, #8
 80086ce:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	0800855b 	.word	0x0800855b
 80086d8:	08008721 	.word	0x08008721
 80086dc:	08008731 	.word	0x08008731
 80086e0:	08008531 	.word	0x08008531
 80086e4:	08008583 	.word	0x08008583
 80086e8:	08008583 	.word	0x08008583
 80086ec:	08008583 	.word	0x08008583
 80086f0:	08008583 	.word	0x08008583
 80086f4:	08008583 	.word	0x08008583
 80086f8:	08008583 	.word	0x08008583
 80086fc:	08008583 	.word	0x08008583
 8008700:	08008583 	.word	0x08008583
 8008704:	08008583 	.word	0x08008583
 8008708:	08008583 	.word	0x08008583
 800870c:	08008583 	.word	0x08008583
 8008710:	08008583 	.word	0x08008583
 8008714:	08008583 	.word	0x08008583
 8008718:	08008727 	.word	0x08008727
 800871c:	0800873b 	.word	0x0800873b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008720:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8008724:	e72d      	b.n	8008582 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008726:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800872a:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800872e:	e728      	b.n	8008582 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008730:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008734:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8008738:	e723      	b.n	8008582 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800873a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800873e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8008742:	e71e      	b.n	8008582 <HAL_GPIO_Init+0x6a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008744:	f04f 0c04 	mov.w	ip, #4
 8008748:	e71b      	b.n	8008582 <HAL_GPIO_Init+0x6a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	e76a      	b.n	8008626 <HAL_GPIO_Init+0x10e>
 8008750:	f04f 0901 	mov.w	r9, #1
 8008754:	e767      	b.n	8008626 <HAL_GPIO_Init+0x10e>
 8008756:	f04f 0902 	mov.w	r9, #2
 800875a:	e764      	b.n	8008626 <HAL_GPIO_Init+0x10e>
        }
      }
    }
  }
}
 800875c:	b003      	add	sp, #12
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	bf00      	nop
 8008764:	40021000 	.word	0x40021000
 8008768:	40010400 	.word	0x40010400
 800876c:	10220000 	.word	0x10220000
 8008770:	10310000 	.word	0x10310000
 8008774:	10320000 	.word	0x10320000
 8008778:	10120000 	.word	0x10120000
 800877c:	40010800 	.word	0x40010800

08008780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008780:	6883      	ldr	r3, [r0, #8]
 8008782:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008784:	bf14      	ite	ne
 8008786:	2001      	movne	r0, #1
 8008788:	2000      	moveq	r0, #0
 800878a:	4770      	bx	lr

0800878c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800878c:	b10a      	cbz	r2, 8008792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800878e:	6101      	str	r1, [r0, #16]
 8008790:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008792:	0409      	lsls	r1, r1, #16
 8008794:	6101      	str	r1, [r0, #16]
  }
}
 8008796:	4770      	bx	lr

08008798 <HAL_I2C_Init>:
{
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8008798:	2800      	cmp	r0, #0
 800879a:	d076      	beq.n	800888a <HAL_I2C_Init+0xf2>
{
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80087a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d041      	beq.n	800882c <HAL_I2C_Init+0x94>
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087a8:	2324      	movs	r3, #36	; 0x24
 80087aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	6813      	ldr	r3, [r2, #0]
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087b8:	f000 fb6c 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087bc:	4b34      	ldr	r3, [pc, #208]	; (8008890 <HAL_I2C_Init+0xf8>)
 80087be:	fba3 2300 	umull	r2, r3, r3, r0
 80087c2:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80087c8:	6861      	ldr	r1, [r4, #4]
 80087ca:	4a32      	ldr	r2, [pc, #200]	; (8008894 <HAL_I2C_Init+0xfc>)
 80087cc:	4291      	cmp	r1, r2
 80087ce:	d832      	bhi.n	8008836 <HAL_I2C_Init+0x9e>
 80087d0:	3301      	adds	r3, #1
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	4a2e      	ldr	r2, [pc, #184]	; (8008894 <HAL_I2C_Init+0xfc>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d835      	bhi.n	800884a <HAL_I2C_Init+0xb2>
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80087e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087e8:	4218      	tst	r0, r3
 80087ea:	bf08      	it	eq
 80087ec:	2004      	moveq	r0, #4
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	61d8      	str	r0, [r3, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	69e3      	ldr	r3, [r4, #28]
 80087f6:	6a21      	ldr	r1, [r4, #32]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	68e1      	ldr	r1, [r4, #12]
 8008802:	430b      	orrs	r3, r1
 8008804:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	6963      	ldr	r3, [r4, #20]
 800880a:	69a1      	ldr	r1, [r4, #24]
 800880c:	430b      	orrs	r3, r1
 800880e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008810:	6822      	ldr	r2, [r4, #0]
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800881a:	2000      	movs	r0, #0
 800881c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800881e:	2320      	movs	r3, #32
 8008820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008824:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008826:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 800882a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800882c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008830:	f003 f8a2 	bl	800b978 <HAL_I2C_MspInit>
 8008834:	e7b8      	b.n	80087a8 <HAL_I2C_Init+0x10>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	4a16      	ldr	r2, [pc, #88]	; (8008898 <HAL_I2C_Init+0x100>)
 8008840:	fba2 2303 	umull	r2, r3, r2, r3
 8008844:	099b      	lsrs	r3, r3, #6
 8008846:	3301      	adds	r3, #1
 8008848:	e7c3      	b.n	80087d2 <HAL_I2C_Init+0x3a>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800884a:	68a2      	ldr	r2, [r4, #8]
 800884c:	b96a      	cbnz	r2, 800886a <HAL_I2C_Init+0xd2>
 800884e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008852:	fbb0 f2f2 	udiv	r2, r0, r2
 8008856:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800885a:	b192      	cbz	r2, 8008882 <HAL_I2C_Init+0xea>
 800885c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008860:	fbb0 f0f3 	udiv	r0, r0, r3
 8008864:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8008868:	e7c1      	b.n	80087ee <HAL_I2C_Init+0x56>
 800886a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800886e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008872:	fbb0 f0f3 	udiv	r0, r0, r3
 8008876:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800887a:	b123      	cbz	r3, 8008886 <HAL_I2C_Init+0xee>
 800887c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8008880:	e7b5      	b.n	80087ee <HAL_I2C_Init+0x56>
 8008882:	2001      	movs	r0, #1
 8008884:	e7b3      	b.n	80087ee <HAL_I2C_Init+0x56>
 8008886:	2001      	movs	r0, #1
 8008888:	e7b1      	b.n	80087ee <HAL_I2C_Init+0x56>
    return HAL_ERROR;
 800888a:	2001      	movs	r0, #1
}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	431bde83 	.word	0x431bde83
 8008894:	000186a0 	.word	0x000186a0
 8008898:	10624dd3 	.word	0x10624dd3

0800889c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088a4:	6803      	ldr	r3, [r0, #0]
 80088a6:	f013 0f01 	tst.w	r3, #1
 80088aa:	d02c      	beq.n	8008906 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80088ac:	4b9e      	ldr	r3, [pc, #632]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d01d      	beq.n	80088f4 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80088b8:	4b9b      	ldr	r3, [pc, #620]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f003 030c 	and.w	r3, r3, #12
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d012      	beq.n	80088ea <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ca:	d041      	beq.n	8008950 <HAL_RCC_OscConfig+0xb4>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d155      	bne.n	800897c <HAL_RCC_OscConfig+0xe0>
 80088d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	e037      	b.n	800895a <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80088ea:	4b8f      	ldr	r3, [pc, #572]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80088f2:	d0e7      	beq.n	80088c4 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088f4:	4b8c      	ldr	r3, [pc, #560]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80088fc:	d003      	beq.n	8008906 <HAL_RCC_OscConfig+0x6a>
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 81bb 	beq.w	8008c7c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f013 0f02 	tst.w	r3, #2
 800890c:	d075      	beq.n	80089fa <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800890e:	4b86      	ldr	r3, [pc, #536]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f013 0f0c 	tst.w	r3, #12
 8008916:	d05f      	beq.n	80089d8 <HAL_RCC_OscConfig+0x13c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008918:	4b83      	ldr	r3, [pc, #524]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f003 030c 	and.w	r3, r3, #12
 8008920:	2b08      	cmp	r3, #8
 8008922:	d054      	beq.n	80089ce <HAL_RCC_OscConfig+0x132>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 808a 	beq.w	8008a40 <HAL_RCC_OscConfig+0x1a4>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800892c:	4b7f      	ldr	r3, [pc, #508]	; (8008b2c <HAL_RCC_OscConfig+0x290>)
 800892e:	2201      	movs	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008932:	f7ff fb67 	bl	8008004 <HAL_GetTick>
 8008936:	4605      	mov	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008938:	4e7b      	ldr	r6, [pc, #492]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 800893a:	6833      	ldr	r3, [r6, #0]
 800893c:	f013 0f02 	tst.w	r3, #2
 8008940:	d175      	bne.n	8008a2e <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008942:	f7ff fb5f 	bl	8008004 <HAL_GetTick>
 8008946:	1b40      	subs	r0, r0, r5
 8008948:	2802      	cmp	r0, #2
 800894a:	d9f6      	bls.n	800893a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800894c:	2003      	movs	r0, #3
 800894e:	e19a      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008950:	4a75      	ldr	r2, [pc, #468]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008952:	6813      	ldr	r3, [r2, #0]
 8008954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008958:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800895a:	6863      	ldr	r3, [r4, #4]
 800895c:	b343      	cbz	r3, 80089b0 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 800895e:	f7ff fb51 	bl	8008004 <HAL_GetTick>
 8008962:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008964:	4e70      	ldr	r6, [pc, #448]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008966:	6833      	ldr	r3, [r6, #0]
 8008968:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800896c:	d1cb      	bne.n	8008906 <HAL_RCC_OscConfig+0x6a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800896e:	f7ff fb49 	bl	8008004 <HAL_GetTick>
 8008972:	1b40      	subs	r0, r0, r5
 8008974:	2864      	cmp	r0, #100	; 0x64
 8008976:	d9f6      	bls.n	8008966 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8008978:	2003      	movs	r0, #3
 800897a:	e184      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800897c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008980:	d009      	beq.n	8008996 <HAL_RCC_OscConfig+0xfa>
 8008982:	4b69      	ldr	r3, [pc, #420]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e7e1      	b.n	800895a <HAL_RCC_OscConfig+0xbe>
 8008996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800899a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e7d4      	b.n	800895a <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80089b0:	f7ff fb28 	bl	8008004 <HAL_GetTick>
 80089b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089b6:	4e5c      	ldr	r6, [pc, #368]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80089b8:	6833      	ldr	r3, [r6, #0]
 80089ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80089be:	d0a2      	beq.n	8008906 <HAL_RCC_OscConfig+0x6a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089c0:	f7ff fb20 	bl	8008004 <HAL_GetTick>
 80089c4:	1b40      	subs	r0, r0, r5
 80089c6:	2864      	cmp	r0, #100	; 0x64
 80089c8:	d9f6      	bls.n	80089b8 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80089ca:	2003      	movs	r0, #3
 80089cc:	e15b      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089ce:	4b56      	ldr	r3, [pc, #344]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80089d6:	d1a5      	bne.n	8008924 <HAL_RCC_OscConfig+0x88>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089d8:	4b53      	ldr	r3, [pc, #332]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f013 0f02 	tst.w	r3, #2
 80089e0:	d003      	beq.n	80089ea <HAL_RCC_OscConfig+0x14e>
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	f040 814b 	bne.w	8008c80 <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ea:	4a4f      	ldr	r2, [pc, #316]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 80089ec:	6813      	ldr	r3, [r2, #0]
 80089ee:	6961      	ldr	r1, [r4, #20]
 80089f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80089f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80089f8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f013 0f08 	tst.w	r3, #8
 8008a00:	d03d      	beq.n	8008a7e <HAL_RCC_OscConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a02:	69a3      	ldr	r3, [r4, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d066      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x23a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a08:	4b48      	ldr	r3, [pc, #288]	; (8008b2c <HAL_RCC_OscConfig+0x290>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a10:	f7ff faf8 	bl	8008004 <HAL_GetTick>
 8008a14:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a16:	4e44      	ldr	r6, [pc, #272]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008a18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a1a:	f013 0f02 	tst.w	r3, #2
 8008a1e:	d121      	bne.n	8008a64 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a20:	f7ff faf0 	bl	8008004 <HAL_GetTick>
 8008a24:	1b40      	subs	r0, r0, r5
 8008a26:	2802      	cmp	r0, #2
 8008a28:	d9f6      	bls.n	8008a18 <HAL_RCC_OscConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8008a2a:	2003      	movs	r0, #3
 8008a2c:	e12b      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2e:	4a3e      	ldr	r2, [pc, #248]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008a30:	6813      	ldr	r3, [r2, #0]
 8008a32:	6961      	ldr	r1, [r4, #20]
 8008a34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	e7dc      	b.n	80089fa <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8008a40:	4b3a      	ldr	r3, [pc, #232]	; (8008b2c <HAL_RCC_OscConfig+0x290>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a46:	f7ff fadd 	bl	8008004 <HAL_GetTick>
 8008a4a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a4c:	4e36      	ldr	r6, [pc, #216]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008a4e:	6833      	ldr	r3, [r6, #0]
 8008a50:	f013 0f02 	tst.w	r3, #2
 8008a54:	d0d1      	beq.n	80089fa <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a56:	f7ff fad5 	bl	8008004 <HAL_GetTick>
 8008a5a:	1b40      	subs	r0, r0, r5
 8008a5c:	2802      	cmp	r0, #2
 8008a5e:	d9f6      	bls.n	8008a4e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8008a60:	2003      	movs	r0, #3
 8008a62:	e110      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a64:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <HAL_RCC_OscConfig+0x294>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a32      	ldr	r2, [pc, #200]	; (8008b34 <HAL_RCC_OscConfig+0x298>)
 8008a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6e:	0a5b      	lsrs	r3, r3, #9
 8008a70:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008a72:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	1e5a      	subs	r2, r3, #1
 8008a78:	9201      	str	r2, [sp, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f9      	bne.n	8008a72 <HAL_RCC_OscConfig+0x1d6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f013 0f04 	tst.w	r3, #4
 8008a84:	f000 809a 	beq.w	8008bbc <HAL_RCC_OscConfig+0x320>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a88:	4b27      	ldr	r3, [pc, #156]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008a90:	d134      	bne.n	8008afc <HAL_RCC_OscConfig+0x260>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a92:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008a9a:	61da      	str	r2, [r3, #28]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8008aa6:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aa8:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <HAL_RCC_OscConfig+0x29c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ab0:	d026      	beq.n	8008b00 <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d041      	beq.n	8008b3c <HAL_RCC_OscConfig+0x2a0>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d157      	bne.n	8008b6c <HAL_RCC_OscConfig+0x2d0>
 8008abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ac0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	621a      	str	r2, [r3, #32]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	f022 0204 	bic.w	r2, r2, #4
 8008ad2:	621a      	str	r2, [r3, #32]
 8008ad4:	e037      	b.n	8008b46 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_DISABLE();
 8008ad6:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <HAL_RCC_OscConfig+0x290>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008ade:	f7ff fa91 	bl	8008004 <HAL_GetTick>
 8008ae2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ae4:	4e10      	ldr	r6, [pc, #64]	; (8008b28 <HAL_RCC_OscConfig+0x28c>)
 8008ae6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ae8:	f013 0f02 	tst.w	r3, #2
 8008aec:	d0c7      	beq.n	8008a7e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aee:	f7ff fa89 	bl	8008004 <HAL_GetTick>
 8008af2:	1b40      	subs	r0, r0, r5
 8008af4:	2802      	cmp	r0, #2
 8008af6:	d9f6      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x24a>
          return HAL_TIMEOUT;
 8008af8:	2003      	movs	r0, #3
 8008afa:	e0c4      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
    FlagStatus       pwrclkchanged = RESET;
 8008afc:	2500      	movs	r5, #0
 8008afe:	e7d3      	b.n	8008aa8 <HAL_RCC_OscConfig+0x20c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b00:	4a0d      	ldr	r2, [pc, #52]	; (8008b38 <HAL_RCC_OscConfig+0x29c>)
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b08:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008b0a:	f7ff fa7b 	bl	8008004 <HAL_GetTick>
 8008b0e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b10:	4f09      	ldr	r7, [pc, #36]	; (8008b38 <HAL_RCC_OscConfig+0x29c>)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008b18:	d1cb      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b1a:	f7ff fa73 	bl	8008004 <HAL_GetTick>
 8008b1e:	1b80      	subs	r0, r0, r6
 8008b20:	2864      	cmp	r0, #100	; 0x64
 8008b22:	d9f6      	bls.n	8008b12 <HAL_RCC_OscConfig+0x276>
          return HAL_TIMEOUT;
 8008b24:	2003      	movs	r0, #3
 8008b26:	e0ae      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	42420000 	.word	0x42420000
 8008b30:	20000000 	.word	0x20000000
 8008b34:	10624dd3 	.word	0x10624dd3
 8008b38:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b3c:	4a54      	ldr	r2, [pc, #336]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008b3e:	6a13      	ldr	r3, [r2, #32]
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	b333      	cbz	r3, 8008b98 <HAL_RCC_OscConfig+0x2fc>
      tickstart = HAL_GetTick();
 8008b4a:	f7ff fa5b 	bl	8008004 <HAL_GetTick>
 8008b4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b50:	4f4f      	ldr	r7, [pc, #316]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b52:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	f013 0f02 	tst.w	r3, #2
 8008b5c:	d12d      	bne.n	8008bba <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b5e:	f7ff fa51 	bl	8008004 <HAL_GetTick>
 8008b62:	1b80      	subs	r0, r0, r6
 8008b64:	4540      	cmp	r0, r8
 8008b66:	d9f6      	bls.n	8008b56 <HAL_RCC_OscConfig+0x2ba>
          return HAL_TIMEOUT;
 8008b68:	2003      	movs	r0, #3
 8008b6a:	e08c      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b6c:	2b05      	cmp	r3, #5
 8008b6e:	d009      	beq.n	8008b84 <HAL_RCC_OscConfig+0x2e8>
 8008b70:	4b47      	ldr	r3, [pc, #284]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008b72:	6a1a      	ldr	r2, [r3, #32]
 8008b74:	f022 0201 	bic.w	r2, r2, #1
 8008b78:	621a      	str	r2, [r3, #32]
 8008b7a:	6a1a      	ldr	r2, [r3, #32]
 8008b7c:	f022 0204 	bic.w	r2, r2, #4
 8008b80:	621a      	str	r2, [r3, #32]
 8008b82:	e7e0      	b.n	8008b46 <HAL_RCC_OscConfig+0x2aa>
 8008b84:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008b86:	6a1a      	ldr	r2, [r3, #32]
 8008b88:	f042 0204 	orr.w	r2, r2, #4
 8008b8c:	621a      	str	r2, [r3, #32]
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	621a      	str	r2, [r3, #32]
 8008b96:	e7d6      	b.n	8008b46 <HAL_RCC_OscConfig+0x2aa>
      tickstart = HAL_GetTick();
 8008b98:	f7ff fa34 	bl	8008004 <HAL_GetTick>
 8008b9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b9e:	4f3c      	ldr	r7, [pc, #240]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	f013 0f02 	tst.w	r3, #2
 8008baa:	d006      	beq.n	8008bba <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bac:	f7ff fa2a 	bl	8008004 <HAL_GetTick>
 8008bb0:	1b80      	subs	r0, r0, r6
 8008bb2:	4540      	cmp	r0, r8
 8008bb4:	d9f6      	bls.n	8008ba4 <HAL_RCC_OscConfig+0x308>
          return HAL_TIMEOUT;
 8008bb6:	2003      	movs	r0, #3
 8008bb8:	e065      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
    if(pwrclkchanged == SET)
 8008bba:	b9e5      	cbnz	r5, 8008bf6 <HAL_RCC_OscConfig+0x35a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bbc:	69e3      	ldr	r3, [r4, #28]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d060      	beq.n	8008c84 <HAL_RCC_OscConfig+0x3e8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bc2:	4a33      	ldr	r2, [pc, #204]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008bc4:	6852      	ldr	r2, [r2, #4]
 8008bc6:	f002 020c 	and.w	r2, r2, #12
 8008bca:	2a08      	cmp	r2, #8
 8008bcc:	d05e      	beq.n	8008c8c <HAL_RCC_OscConfig+0x3f0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d017      	beq.n	8008c02 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8008bd2:	4b30      	ldr	r3, [pc, #192]	; (8008c94 <HAL_RCC_OscConfig+0x3f8>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008bd8:	f7ff fa14 	bl	8008004 <HAL_GetTick>
 8008bdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bde:	4d2c      	ldr	r5, [pc, #176]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008be6:	d047      	beq.n	8008c78 <HAL_RCC_OscConfig+0x3dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be8:	f7ff fa0c 	bl	8008004 <HAL_GetTick>
 8008bec:	1b00      	subs	r0, r0, r4
 8008bee:	2802      	cmp	r0, #2
 8008bf0:	d9f6      	bls.n	8008be0 <HAL_RCC_OscConfig+0x344>
            return HAL_TIMEOUT;
 8008bf2:	2003      	movs	r0, #3
 8008bf4:	e047      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bf6:	4a26      	ldr	r2, [pc, #152]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008bf8:	69d3      	ldr	r3, [r2, #28]
 8008bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	61d3      	str	r3, [r2, #28]
 8008c00:	e7dc      	b.n	8008bbc <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <HAL_RCC_OscConfig+0x3f8>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008c08:	f7ff f9fc 	bl	8008004 <HAL_GetTick>
 8008c0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c0e:	4e20      	ldr	r6, [pc, #128]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008c16:	d006      	beq.n	8008c26 <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c18:	f7ff f9f4 	bl	8008004 <HAL_GetTick>
 8008c1c:	1b40      	subs	r0, r0, r5
 8008c1e:	2802      	cmp	r0, #2
 8008c20:	d9f6      	bls.n	8008c10 <HAL_RCC_OscConfig+0x374>
            return HAL_TIMEOUT;
 8008c22:	2003      	movs	r0, #3
 8008c24:	e02f      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008c26:	6a23      	ldr	r3, [r4, #32]
 8008c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c2c:	d01a      	beq.n	8008c64 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c2e:	4918      	ldr	r1, [pc, #96]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008c30:	684a      	ldr	r2, [r1, #4]
 8008c32:	6a23      	ldr	r3, [r4, #32]
 8008c34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c36:	4303      	orrs	r3, r0
 8008c38:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8008c40:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <HAL_RCC_OscConfig+0x3f8>)
 8008c42:	2201      	movs	r2, #1
 8008c44:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008c46:	f7ff f9dd 	bl	8008004 <HAL_GetTick>
 8008c4a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c4c:	4d10      	ldr	r5, [pc, #64]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008c54:	d10e      	bne.n	8008c74 <HAL_RCC_OscConfig+0x3d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c56:	f7ff f9d5 	bl	8008004 <HAL_GetTick>
 8008c5a:	1b00      	subs	r0, r0, r4
 8008c5c:	2802      	cmp	r0, #2
 8008c5e:	d9f6      	bls.n	8008c4e <HAL_RCC_OscConfig+0x3b2>
            return HAL_TIMEOUT;
 8008c60:	2003      	movs	r0, #3
 8008c62:	e010      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c64:	4a0a      	ldr	r2, [pc, #40]	; (8008c90 <HAL_RCC_OscConfig+0x3f4>)
 8008c66:	6853      	ldr	r3, [r2, #4]
 8008c68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c6c:	68a1      	ldr	r1, [r4, #8]
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	6053      	str	r3, [r2, #4]
 8008c72:	e7dc      	b.n	8008c2e <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8008c74:	2000      	movs	r0, #0
 8008c76:	e006      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e004      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
        return HAL_ERROR;
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e002      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
        return HAL_ERROR;
 8008c80:	2001      	movs	r0, #1
 8008c82:	e000      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8008c84:	2000      	movs	r0, #0
}
 8008c86:	b002      	add	sp, #8
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8008c8c:	2001      	movs	r0, #1
 8008c8e:	e7fa      	b.n	8008c86 <HAL_RCC_OscConfig+0x3ea>
 8008c90:	40021000 	.word	0x40021000
 8008c94:	42420000 	.word	0x42420000

08008c98 <HAL_RCC_GetSysClockFreq>:
{
 8008c98:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c9a:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x60>)
 8008c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c9e:	f10d 0c18 	add.w	ip, sp, #24
 8008ca2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ca6:	f240 2301 	movw	r3, #513	; 0x201
 8008caa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8008cae:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x64>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008cb2:	f003 020c 	and.w	r2, r3, #12
 8008cb6:	2a08      	cmp	r2, #8
 8008cb8:	d002      	beq.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8008cba:	4811      	ldr	r0, [pc, #68]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8008cbc:	b006      	add	sp, #24
 8008cbe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008cc0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008cc4:	3218      	adds	r2, #24
 8008cc6:	446a      	add	r2, sp
 8008cc8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ccc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008cd0:	d00d      	beq.n	8008cee <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x64>)
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8008cda:	3318      	adds	r3, #24
 8008cdc:	446b      	add	r3, sp
 8008cde:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x68>)
 8008ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce8:	fb03 f000 	mul.w	r0, r3, r0
 8008cec:	e7e6      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <HAL_RCC_GetSysClockFreq+0x6c>)
 8008cf0:	fb03 f000 	mul.w	r0, r3, r0
 8008cf4:	e7e2      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x24>
 8008cf6:	bf00      	nop
 8008cf8:	0800f620 	.word	0x0800f620
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	007a1200 	.word	0x007a1200
 8008d04:	003d0900 	.word	0x003d0900

08008d08 <HAL_RCC_ClockConfig>:
{
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008d10:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCC_ClockConfig+0x170>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	d20b      	bcs.n	8008d34 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d1c:	4a56      	ldr	r2, [pc, #344]	; (8008e78 <HAL_RCC_ClockConfig+0x170>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	430b      	orrs	r3, r1
 8008d26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d28:	6813      	ldr	r3, [r2, #0]
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	428b      	cmp	r3, r1
 8008d30:	f040 809b 	bne.w	8008e6a <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	f013 0f02 	tst.w	r3, #2
 8008d3a:	d006      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x42>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d3c:	4a4f      	ldr	r2, [pc, #316]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008d3e:	6853      	ldr	r3, [r2, #4]
 8008d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d44:	68a1      	ldr	r1, [r4, #8]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f013 0f01 	tst.w	r3, #1
 8008d50:	d052      	beq.n	8008df8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d52:	6862      	ldr	r2, [r4, #4]
 8008d54:	2a01      	cmp	r2, #1
 8008d56:	d023      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d58:	2a02      	cmp	r2, #2
 8008d5a:	d028      	beq.n	8008dae <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d5c:	4b47      	ldr	r3, [pc, #284]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f013 0f02 	tst.w	r3, #2
 8008d64:	f000 8083 	beq.w	8008e6e <HAL_RCC_ClockConfig+0x166>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d68:	4944      	ldr	r1, [pc, #272]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008d6a:	684b      	ldr	r3, [r1, #4]
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	4313      	orrs	r3, r2
 8008d72:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8008d74:	f7ff f946 	bl	8008004 <HAL_GetTick>
 8008d78:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d01d      	beq.n	8008dbc <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d02a      	beq.n	8008dda <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d84:	4f3d      	ldr	r7, [pc, #244]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d86:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f013 0f0c 	tst.w	r3, #12
 8008d90:	d032      	beq.n	8008df8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d92:	f7ff f937 	bl	8008004 <HAL_GetTick>
 8008d96:	1b83      	subs	r3, r0, r6
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	d9f6      	bls.n	8008d8a <HAL_RCC_ClockConfig+0x82>
          return HAL_TIMEOUT;
 8008d9c:	2003      	movs	r0, #3
 8008d9e:	e062      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008da8:	d1de      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8008daa:	2001      	movs	r0, #1
 8008dac:	e05b      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dae:	4b33      	ldr	r3, [pc, #204]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008db6:	d1d7      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8008db8:	2001      	movs	r0, #1
 8008dba:	e054      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dbc:	4f2f      	ldr	r7, [pc, #188]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dbe:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f003 030c 	and.w	r3, r3, #12
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d015      	beq.n	8008df8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dcc:	f7ff f91a 	bl	8008004 <HAL_GetTick>
 8008dd0:	1b83      	subs	r3, r0, r6
 8008dd2:	4543      	cmp	r3, r8
 8008dd4:	d9f5      	bls.n	8008dc2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8008dd6:	2003      	movs	r0, #3
 8008dd8:	e045      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dda:	4f28      	ldr	r7, [pc, #160]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ddc:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f003 030c 	and.w	r3, r3, #12
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	d006      	beq.n	8008df8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dea:	f7ff f90b 	bl	8008004 <HAL_GetTick>
 8008dee:	1b80      	subs	r0, r0, r6
 8008df0:	4540      	cmp	r0, r8
 8008df2:	d9f5      	bls.n	8008de0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8008df4:	2003      	movs	r0, #3
 8008df6:	e036      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <HAL_RCC_ClockConfig+0x170>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	d90a      	bls.n	8008e1a <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e04:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <HAL_RCC_ClockConfig+0x170>)
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	432b      	orrs	r3, r5
 8008e0e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e10:	6813      	ldr	r3, [r2, #0]
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	42ab      	cmp	r3, r5
 8008e18:	d12b      	bne.n	8008e72 <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f013 0f04 	tst.w	r3, #4
 8008e20:	d006      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e22:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008e24:	6853      	ldr	r3, [r2, #4]
 8008e26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008e2a:	68e1      	ldr	r1, [r4, #12]
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	f013 0f08 	tst.w	r3, #8
 8008e36:	d007      	beq.n	8008e48 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e38:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008e3a:	6853      	ldr	r3, [r2, #4]
 8008e3c:	6921      	ldr	r1, [r4, #16]
 8008e3e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008e42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e46:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e48:	f7ff ff26 	bl	8008c98 <HAL_RCC_GetSysClockFreq>
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_RCC_ClockConfig+0x174>)
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e54:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <HAL_RCC_ClockConfig+0x178>)
 8008e56:	5cd3      	ldrb	r3, [r2, r3]
 8008e58:	40d8      	lsrs	r0, r3
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <HAL_RCC_ClockConfig+0x17c>)
 8008e5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7ff f8a0 	bl	8007fa4 <HAL_InitTick>
  return HAL_OK;
 8008e64:	2000      	movs	r0, #0
}
 8008e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	e7fb      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
        return HAL_ERROR;
 8008e6e:	2001      	movs	r0, #1
 8008e70:	e7f9      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
      return HAL_ERROR;
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7f7      	b.n	8008e66 <HAL_RCC_ClockConfig+0x15e>
 8008e76:	bf00      	nop
 8008e78:	40022000 	.word	0x40022000
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	0800f66c 	.word	0x0800f66c
 8008e84:	20000000 	.word	0x20000000

08008e88 <HAL_RCC_GetHCLKFreq>:
}
 8008e88:	4b01      	ldr	r3, [pc, #4]	; (8008e90 <HAL_RCC_GetHCLKFreq+0x8>)
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20000000 	.word	0x20000000

08008e94 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e94:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008e9c:	4a03      	ldr	r2, [pc, #12]	; (8008eac <HAL_RCC_GetPCLK1Freq+0x18>)
 8008e9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ea0:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008ea2:	6810      	ldr	r0, [r2, #0]
}    
 8008ea4:	40d8      	lsrs	r0, r3
 8008ea6:	4770      	bx	lr
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	0800f67c 	.word	0x0800f67c
 8008eb0:	20000000 	.word	0x20000000

08008eb4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008ebc:	4a03      	ldr	r2, [pc, #12]	; (8008ecc <HAL_RCC_GetPCLK2Freq+0x18>)
 8008ebe:	5cd3      	ldrb	r3, [r2, r3]
 8008ec0:	4a03      	ldr	r2, [pc, #12]	; (8008ed0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008ec2:	6810      	ldr	r0, [r2, #0]
} 
 8008ec4:	40d8      	lsrs	r0, r3
 8008ec6:	4770      	bx	lr
 8008ec8:	40021000 	.word	0x40021000
 8008ecc:	0800f67c 	.word	0x0800f67c
 8008ed0:	20000000 	.word	0x20000000

08008ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008edc:	6803      	ldr	r3, [r0, #0]
 8008ede:	f013 0f01 	tst.w	r3, #1
 8008ee2:	d036      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee4:	4b3f      	ldr	r3, [pc, #252]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008eec:	d149      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008eee:	4b3d      	ldr	r3, [pc, #244]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008ef0:	69da      	ldr	r2, [r3, #28]
 8008ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008ef6:	61da      	str	r2, [r3, #28]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008f02:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f04:	4b38      	ldr	r3, [pc, #224]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f0c:	d03b      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f0e:	4b35      	ldr	r3, [pc, #212]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008f10:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f12:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008f16:	d013      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008f18:	6862      	ldr	r2, [r4, #4]
 8008f1a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d00e      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f22:	4a30      	ldr	r2, [pc, #192]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008f24:	6a13      	ldr	r3, [r2, #32]
 8008f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f2a:	4930      	ldr	r1, [pc, #192]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8008f2c:	2601      	movs	r6, #1
 8008f2e:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f32:	2600      	movs	r6, #0
 8008f34:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008f38:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f3a:	f013 0f01 	tst.w	r3, #1
 8008f3e:	d136      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008f40:	4a28      	ldr	r2, [pc, #160]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008f42:	6a13      	ldr	r3, [r2, #32]
 8008f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f48:	6861      	ldr	r1, [r4, #4]
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	d13e      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	f013 0f02 	tst.w	r3, #2
 8008f58:	d006      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f5a:	4a22      	ldr	r2, [pc, #136]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008f5c:	6853      	ldr	r3, [r2, #4]
 8008f5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f62:	68a1      	ldr	r1, [r4, #8]
 8008f64:	430b      	orrs	r3, r1
 8008f66:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	f013 0f10 	tst.w	r3, #16
 8008f6e:	d034      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f70:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8008f72:	6853      	ldr	r3, [r2, #4]
 8008f74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008f78:	68e1      	ldr	r1, [r4, #12]
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e02c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus       pwrclkchanged = RESET;
 8008f82:	2500      	movs	r5, #0
 8008f84:	e7be      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f86:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8008f88:	6813      	ldr	r3, [r2, #0]
 8008f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f8e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008f90:	f7ff f838 	bl	8008004 <HAL_GetTick>
 8008f94:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f96:	4f14      	ldr	r7, [pc, #80]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f9e:	d1b6      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fa0:	f7ff f830 	bl	8008004 <HAL_GetTick>
 8008fa4:	1b80      	subs	r0, r0, r6
 8008fa6:	2864      	cmp	r0, #100	; 0x64
 8008fa8:	d9f6      	bls.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8008faa:	2003      	movs	r0, #3
 8008fac:	e016      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8008fae:	f7ff f829 	bl	8008004 <HAL_GetTick>
 8008fb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fb4:	4f0b      	ldr	r7, [pc, #44]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fb6:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	f013 0f02 	tst.w	r3, #2
 8008fc0:	d1be      	bne.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc2:	f7ff f81f 	bl	8008004 <HAL_GetTick>
 8008fc6:	1b80      	subs	r0, r0, r6
 8008fc8:	4540      	cmp	r0, r8
 8008fca:	d9f6      	bls.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8008fcc:	2003      	movs	r0, #3
 8008fce:	e005      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fd0:	69d3      	ldr	r3, [r2, #28]
 8008fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	61d3      	str	r3, [r2, #28]
 8008fd8:	e7bb      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8008fda:	2000      	movs	r0, #0
}
 8008fdc:	b002      	add	sp, #8
 8008fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	40007000 	.word	0x40007000
 8008fec:	42420000 	.word	0x42420000

08008ff0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ff0:	b500      	push	{lr}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	4684      	mov	ip, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008ff6:	4b3a      	ldr	r3, [pc, #232]	; (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8008ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ffa:	f10d 0e18 	add.w	lr, sp, #24
 8008ffe:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009002:	f240 2301 	movw	r3, #513	; 0x201
 8009006:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800900a:	f1bc 0f02 	cmp.w	ip, #2
 800900e:	d058      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8009010:	f1bc 0f10 	cmp.w	ip, #16
 8009014:	d006      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8009016:	f1bc 0f01 	cmp.w	ip, #1
 800901a:	d02e      	beq.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 800901c:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800901e:	b007      	add	sp, #28
 8009020:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8009024:	4b2f      	ldr	r3, [pc, #188]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8009026:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800902e:	d0f6      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009030:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8009034:	3318      	adds	r3, #24
 8009036:	446b      	add	r3, sp
 8009038:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800903c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009040:	d017      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009042:	4b28      	ldr	r3, [pc, #160]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800904a:	3318      	adds	r3, #24
 800904c:	446b      	add	r3, sp
 800904e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009052:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8009054:	fbb3 f3f2 	udiv	r3, r3, r2
 8009058:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800905c:	4b21      	ldr	r3, [pc, #132]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009064:	d1db      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
          frequency = (pllclk * 2) / 3;
 8009066:	0040      	lsls	r0, r0, #1
 8009068:	4b20      	ldr	r3, [pc, #128]	; (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800906a:	fba3 3000 	umull	r3, r0, r3, r0
 800906e:	0840      	lsrs	r0, r0, #1
 8009070:	e7d5      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009072:	4b1f      	ldr	r3, [pc, #124]	; (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8009074:	fb03 f000 	mul.w	r0, r3, r0
 8009078:	e7f0      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      temp_reg = RCC->BDCR;
 800907a:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800907c:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800907e:	f240 3202 	movw	r2, #770	; 0x302
 8009082:	401a      	ands	r2, r3
 8009084:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8009088:	d026      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800908a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800908e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009092:	d004      	beq.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009098:	d00a      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 800909a:	2000      	movs	r0, #0
  return(frequency);
 800909c:	e7bf      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80090a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 80090a2:	f010 0002 	ands.w	r0, r0, #2
 80090a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80090aa:	bf18      	it	ne
 80090ac:	4618      	movne	r0, r3
 80090ae:	e7b6      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80090b2:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 80090b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80090b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80090bc:	bf18      	it	ne
 80090be:	4618      	movne	r0, r3
 80090c0:	e7ad      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80090c2:	f7ff fef7 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80090ce:	3301      	adds	r3, #1
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80090d6:	e7a2      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
        frequency = LSE_VALUE;
 80090d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80090dc:	e79f      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 80090de:	bf00      	nop
 80090e0:	0800f620 	.word	0x0800f620
 80090e4:	40021000 	.word	0x40021000
 80090e8:	007a1200 	.word	0x007a1200
 80090ec:	aaaaaaab 	.word	0xaaaaaaab
 80090f0:	003d0900 	.word	0x003d0900

080090f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090f6:	6a03      	ldr	r3, [r0, #32]
 80090f8:	f023 0301 	bic.w	r3, r3, #1
 80090fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009100:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009102:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009104:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009108:	680d      	ldr	r5, [r1, #0]
 800910a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800910c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009110:	688d      	ldr	r5, [r1, #8]
 8009112:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009114:	4d0b      	ldr	r5, [pc, #44]	; (8009144 <TIM_OC1_SetConfig+0x50>)
 8009116:	42a8      	cmp	r0, r5
 8009118:	d006      	beq.n	8009128 <TIM_OC1_SetConfig+0x34>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800911c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800911e:	684a      	ldr	r2, [r1, #4]
 8009120:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009122:	6203      	str	r3, [r0, #32]
}
 8009124:	bc70      	pop	{r4, r5, r6}
 8009126:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8009128:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800912c:	68cd      	ldr	r5, [r1, #12]
 800912e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009130:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009134:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8009138:	694d      	ldr	r5, [r1, #20]
 800913a:	698e      	ldr	r6, [r1, #24]
 800913c:	4335      	orrs	r5, r6
 800913e:	432c      	orrs	r4, r5
 8009140:	e7eb      	b.n	800911a <TIM_OC1_SetConfig+0x26>
 8009142:	bf00      	nop
 8009144:	40012c00 	.word	0x40012c00

08009148 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009148:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800914a:	6a03      	ldr	r3, [r0, #32]
 800914c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009150:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009152:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009154:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009156:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009158:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800915c:	680d      	ldr	r5, [r1, #0]
 800915e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009164:	688d      	ldr	r5, [r1, #8]
 8009166:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800916a:	4d0c      	ldr	r5, [pc, #48]	; (800919c <TIM_OC3_SetConfig+0x54>)
 800916c:	42a8      	cmp	r0, r5
 800916e:	d006      	beq.n	800917e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009170:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009172:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009174:	684a      	ldr	r2, [r1, #4]
 8009176:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009178:	6203      	str	r3, [r0, #32]
}
 800917a:	bc70      	pop	{r4, r5, r6}
 800917c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800917e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009182:	68cd      	ldr	r5, [r1, #12]
 8009184:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8009188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800918c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009190:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009192:	698e      	ldr	r6, [r1, #24]
 8009194:	4335      	orrs	r5, r6
 8009196:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800919a:	e7e9      	b.n	8009170 <TIM_OC3_SetConfig+0x28>
 800919c:	40012c00 	.word	0x40012c00

080091a0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091a2:	6a03      	ldr	r3, [r0, #32]
 80091a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b4:	680d      	ldr	r5, [r1, #0]
 80091b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091be:	688d      	ldr	r5, [r1, #8]
 80091c0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80091c4:	4d07      	ldr	r5, [pc, #28]	; (80091e4 <TIM_OC4_SetConfig+0x44>)
 80091c6:	42a8      	cmp	r0, r5
 80091c8:	d006      	beq.n	80091d8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091cc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091ce:	684a      	ldr	r2, [r1, #4]
 80091d0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d2:	6203      	str	r3, [r0, #32]
}
 80091d4:	bc30      	pop	{r4, r5}
 80091d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091d8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80091dc:	694d      	ldr	r5, [r1, #20]
 80091de:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80091e2:	e7f2      	b.n	80091ca <TIM_OC4_SetConfig+0x2a>
 80091e4:	40012c00 	.word	0x40012c00

080091e8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80091e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091ea:	4a25      	ldr	r2, [pc, #148]	; (8009280 <TIM_Base_SetConfig+0x98>)
 80091ec:	4290      	cmp	r0, r2
 80091ee:	d014      	beq.n	800921a <TIM_Base_SetConfig+0x32>
 80091f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80091f4:	d02b      	beq.n	800924e <TIM_Base_SetConfig+0x66>
 80091f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80091fa:	4290      	cmp	r0, r2
 80091fc:	d022      	beq.n	8009244 <TIM_Base_SetConfig+0x5c>
 80091fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009202:	4290      	cmp	r0, r2
 8009204:	d037      	beq.n	8009276 <TIM_Base_SetConfig+0x8e>
  tmpcr1 &= ~TIM_CR1_ARPE;
 8009206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800920a:	694a      	ldr	r2, [r1, #20]
 800920c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800920e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009210:	688b      	ldr	r3, [r1, #8]
 8009212:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009214:	680b      	ldr	r3, [r1, #0]
 8009216:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009218:	e02a      	b.n	8009270 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800921a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800921e:	684a      	ldr	r2, [r1, #4]
 8009220:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009226:	68ca      	ldr	r2, [r1, #12]
 8009228:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800922a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800922e:	694a      	ldr	r2, [r1, #20]
 8009230:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009232:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009234:	688b      	ldr	r3, [r1, #8]
 8009236:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009238:	680b      	ldr	r3, [r1, #0]
 800923a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800923c:	690a      	ldr	r2, [r1, #16]
 800923e:	4b10      	ldr	r3, [pc, #64]	; (8009280 <TIM_Base_SetConfig+0x98>)
 8009240:	631a      	str	r2, [r3, #48]	; 0x30
 8009242:	e015      	b.n	8009270 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009248:	684a      	ldr	r2, [r1, #4]
 800924a:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800924c:	e003      	b.n	8009256 <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009252:	684a      	ldr	r2, [r1, #4]
 8009254:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800925a:	68ca      	ldr	r2, [r1, #12]
 800925c:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800925e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009262:	694a      	ldr	r2, [r1, #20]
 8009264:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009266:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009268:	688b      	ldr	r3, [r1, #8]
 800926a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009270:	2301      	movs	r3, #1
 8009272:	6143      	str	r3, [r0, #20]
}
 8009274:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800927a:	684a      	ldr	r2, [r1, #4]
 800927c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800927e:	e7ea      	b.n	8009256 <TIM_Base_SetConfig+0x6e>
 8009280:	40012c00 	.word	0x40012c00

08009284 <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8009284:	b1b0      	cbz	r0, 80092b4 <HAL_TIM_OC_Init+0x30>
{
 8009286:	b510      	push	{r4, lr}
 8009288:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800928a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800928e:	b163      	cbz	r3, 80092aa <HAL_TIM_OC_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8009290:	2302      	movs	r3, #2
 8009292:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009296:	4621      	mov	r1, r4
 8009298:	f851 0b04 	ldr.w	r0, [r1], #4
 800929c:	f7ff ffa4 	bl	80091e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80092a0:	2301      	movs	r3, #1
 80092a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80092a6:	2000      	movs	r0, #0
}
 80092a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80092aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80092ae:	f002 fbd9 	bl	800ba64 <HAL_TIM_OC_MspInit>
 80092b2:	e7ed      	b.n	8009290 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80092b4:	2001      	movs	r0, #1
}
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80092b8:	b1b0      	cbz	r0, 80092e8 <HAL_TIM_PWM_Init+0x30>
{
 80092ba:	b510      	push	{r4, lr}
 80092bc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80092be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80092c2:	b163      	cbz	r3, 80092de <HAL_TIM_PWM_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 80092c4:	2302      	movs	r3, #2
 80092c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ca:	4621      	mov	r1, r4
 80092cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80092d0:	f7ff ff8a 	bl	80091e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80092da:	2000      	movs	r0, #0
}
 80092dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80092de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80092e2:	f002 fb6f 	bl	800b9c4 <HAL_TIM_PWM_MspInit>
 80092e6:	e7ed      	b.n	80092c4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80092e8:	2001      	movs	r0, #1
}
 80092ea:	4770      	bx	lr

080092ec <TIM_OC2_SetConfig>:
{
 80092ec:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ee:	6a03      	ldr	r3, [r0, #32]
 80092f0:	f023 0310 	bic.w	r3, r3, #16
 80092f4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80092f6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80092f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80092fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092fc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009300:	680d      	ldr	r5, [r1, #0]
 8009302:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009306:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800930a:	688d      	ldr	r5, [r1, #8]
 800930c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009310:	4d0c      	ldr	r5, [pc, #48]	; (8009344 <TIM_OC2_SetConfig+0x58>)
 8009312:	42a8      	cmp	r0, r5
 8009314:	d006      	beq.n	8009324 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8009316:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009318:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800931a:	684a      	ldr	r2, [r1, #4]
 800931c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800931e:	6203      	str	r3, [r0, #32]
}
 8009320:	bc70      	pop	{r4, r5, r6}
 8009322:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8009324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009328:	68cd      	ldr	r5, [r1, #12]
 800932a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800932e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009332:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8009336:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8009338:	698e      	ldr	r6, [r1, #24]
 800933a:	4335      	orrs	r5, r6
 800933c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8009340:	e7e9      	b.n	8009316 <TIM_OC2_SetConfig+0x2a>
 8009342:	bf00      	nop
 8009344:	40012c00 	.word	0x40012c00

08009348 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8009348:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d028      	beq.n	80093a2 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8009350:	b510      	push	{r4, lr}
 8009352:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8009354:	2301      	movs	r3, #1
 8009356:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800935a:	2302      	movs	r3, #2
 800935c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8009360:	2a0c      	cmp	r2, #12
 8009362:	d80b      	bhi.n	800937c <HAL_TIM_OC_ConfigChannel+0x34>
 8009364:	e8df f002 	tbb	[pc, r2]
 8009368:	0a0a0a07 	.word	0x0a0a0a07
 800936c:	0a0a0a11 	.word	0x0a0a0a11
 8009370:	0a0a0a15 	.word	0x0a0a0a15
 8009374:	19          	.byte	0x19
 8009375:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009376:	6800      	ldr	r0, [r0, #0]
 8009378:	f7ff febc 	bl	80090f4 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800937c:	2301      	movs	r3, #1
 800937e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009382:	2000      	movs	r0, #0
 8009384:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8009388:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800938a:	6800      	ldr	r0, [r0, #0]
 800938c:	f7ff ffae 	bl	80092ec <TIM_OC2_SetConfig>
    break;
 8009390:	e7f4      	b.n	800937c <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009392:	6800      	ldr	r0, [r0, #0]
 8009394:	f7ff fed8 	bl	8009148 <TIM_OC3_SetConfig>
    break;
 8009398:	e7f0      	b.n	800937c <HAL_TIM_OC_ConfigChannel+0x34>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	f7ff ff00 	bl	80091a0 <TIM_OC4_SetConfig>
    break;
 80093a0:	e7ec      	b.n	800937c <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 80093a2:	2002      	movs	r0, #2
}
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIM_PWM_ConfigChannel>:
{
 80093a6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80093a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d066      	beq.n	800947e <HAL_TIM_PWM_ConfigChannel+0xd8>
 80093b0:	4604      	mov	r4, r0
 80093b2:	460d      	mov	r5, r1
 80093b4:	2301      	movs	r3, #1
 80093b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80093ba:	2302      	movs	r3, #2
 80093bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80093c0:	2a0c      	cmp	r2, #12
 80093c2:	d81a      	bhi.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x54>
 80093c4:	e8df f002 	tbb	[pc, r2]
 80093c8:	19191907 	.word	0x19191907
 80093cc:	19191920 	.word	0x19191920
 80093d0:	19191934 	.word	0x19191934
 80093d4:	47          	.byte	0x47
 80093d5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093d6:	6800      	ldr	r0, [r0, #0]
 80093d8:	f7ff fe8c 	bl	80090f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	6993      	ldr	r3, [r2, #24]
 80093e0:	f043 0308 	orr.w	r3, r3, #8
 80093e4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093e6:	6822      	ldr	r2, [r4, #0]
 80093e8:	6993      	ldr	r3, [r2, #24]
 80093ea:	f023 0304 	bic.w	r3, r3, #4
 80093ee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	6993      	ldr	r3, [r2, #24]
 80093f4:	6929      	ldr	r1, [r5, #16]
 80093f6:	430b      	orrs	r3, r1
 80093f8:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009400:	2000      	movs	r0, #0
 8009402:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8009406:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009408:	6800      	ldr	r0, [r0, #0]
 800940a:	f7ff ff6f 	bl	80092ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	6993      	ldr	r3, [r2, #24]
 8009412:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009416:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009418:	6822      	ldr	r2, [r4, #0]
 800941a:	6993      	ldr	r3, [r2, #24]
 800941c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009420:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	6993      	ldr	r3, [r2, #24]
 8009426:	6929      	ldr	r1, [r5, #16]
 8009428:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800942c:	6193      	str	r3, [r2, #24]
    break;
 800942e:	e7e4      	b.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009430:	6800      	ldr	r0, [r0, #0]
 8009432:	f7ff fe89 	bl	8009148 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009436:	6822      	ldr	r2, [r4, #0]
 8009438:	69d3      	ldr	r3, [r2, #28]
 800943a:	f043 0308 	orr.w	r3, r3, #8
 800943e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	69d3      	ldr	r3, [r2, #28]
 8009444:	f023 0304 	bic.w	r3, r3, #4
 8009448:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800944a:	6822      	ldr	r2, [r4, #0]
 800944c:	69d3      	ldr	r3, [r2, #28]
 800944e:	6929      	ldr	r1, [r5, #16]
 8009450:	430b      	orrs	r3, r1
 8009452:	61d3      	str	r3, [r2, #28]
    break;
 8009454:	e7d1      	b.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009456:	6800      	ldr	r0, [r0, #0]
 8009458:	f7ff fea2 	bl	80091a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800945c:	6822      	ldr	r2, [r4, #0]
 800945e:	69d3      	ldr	r3, [r2, #28]
 8009460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009464:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	69d3      	ldr	r3, [r2, #28]
 800946a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800946e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	69d3      	ldr	r3, [r2, #28]
 8009474:	6929      	ldr	r1, [r5, #16]
 8009476:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800947a:	61d3      	str	r3, [r2, #28]
    break;
 800947c:	e7bd      	b.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800947e:	2002      	movs	r0, #2
 8009480:	e7c1      	b.n	8009406 <HAL_TIM_PWM_ConfigChannel+0x60>

08009482 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8009482:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d022      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800948a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800948c:	2201      	movs	r2, #1
 800948e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009492:	2302      	movs	r3, #2
 8009494:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009498:	6804      	ldr	r4, [r0, #0]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a0:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80094a2:	6804      	ldr	r4, [r0, #0]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	680d      	ldr	r5, [r1, #0]
 80094a8:	432b      	orrs	r3, r5
 80094aa:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80094ac:	6804      	ldr	r4, [r0, #0]
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094b4:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80094b6:	6804      	ldr	r4, [r0, #0]
 80094b8:	68a3      	ldr	r3, [r4, #8]
 80094ba:	6849      	ldr	r1, [r1, #4]
 80094bc:	430b      	orrs	r3, r1
 80094be:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 80094c0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094c4:	2300      	movs	r3, #0
 80094c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80094ca:	4618      	mov	r0, r3
}
 80094cc:	bc30      	pop	{r4, r5}
 80094ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80094d0:	2002      	movs	r0, #2
}
 80094d2:	4770      	bx	lr

080094d4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094da:	6802      	ldr	r2, [r0, #0]
 80094dc:	6913      	ldr	r3, [r2, #16]
 80094de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80094e2:	68c1      	ldr	r1, [r0, #12]
 80094e4:	430b      	orrs	r3, r1
 80094e6:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1, 
 80094e8:	6801      	ldr	r1, [r0, #0]
 80094ea:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80094ec:	6883      	ldr	r3, [r0, #8]
 80094ee:	6900      	ldr	r0, [r0, #16]
 80094f0:	4303      	orrs	r3, r0
 80094f2:	6960      	ldr	r0, [r4, #20]
 80094f4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80094f6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80094fa:	f022 020c 	bic.w	r2, r2, #12
 80094fe:	4313      	orrs	r3, r2
 8009500:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	6953      	ldr	r3, [r2, #20]
 8009506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950a:	69a1      	ldr	r1, [r4, #24]
 800950c:	430b      	orrs	r3, r1
 800950e:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	4b58      	ldr	r3, [pc, #352]	; (8009674 <UART_SetConfig+0x1a0>)
 8009514:	429a      	cmp	r2, r3
 8009516:	d056      	beq.n	80095c6 <UART_SetConfig+0xf2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009518:	f7ff fcbc 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800951c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009520:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	fbb0 f3f3 	udiv	r3, r0, r3
 800952c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8009678 <UART_SetConfig+0x1a4>
 8009530:	fba8 2303 	umull	r2, r3, r8, r3
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	011e      	lsls	r6, r3, #4
 8009538:	f7ff fcac 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800953c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009544:	6865      	ldr	r5, [r4, #4]
 8009546:	00ad      	lsls	r5, r5, #2
 8009548:	fbb0 f5f5 	udiv	r5, r0, r5
 800954c:	f7ff fca2 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 8009550:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009560:	fba8 3000 	umull	r3, r0, r8, r0
 8009564:	0940      	lsrs	r0, r0, #5
 8009566:	f04f 0964 	mov.w	r9, #100	; 0x64
 800956a:	fb09 5310 	mls	r3, r9, r0, r5
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	3332      	adds	r3, #50	; 0x32
 8009572:	fba8 2303 	umull	r2, r3, r8, r3
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800957c:	f7ff fc8a 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 8009580:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009584:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009588:	6865      	ldr	r5, [r4, #4]
 800958a:	00ad      	lsls	r5, r5, #2
 800958c:	fbb0 f5f5 	udiv	r5, r0, r5
 8009590:	f7ff fc80 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 8009594:	6822      	ldr	r2, [r4, #0]
 8009596:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800959a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800959e:	6863      	ldr	r3, [r4, #4]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a6:	fba8 1303 	umull	r1, r3, r8, r3
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	fb09 5313 	mls	r3, r9, r3, r5
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	3332      	adds	r3, #50	; 0x32
 80095b4:	fba8 1303 	umull	r1, r3, r8, r3
 80095b8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80095bc:	433b      	orrs	r3, r7
 80095be:	4433      	add	r3, r6
 80095c0:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80095c6:	f7ff fc75 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 80095ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80095ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095da:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8009678 <UART_SetConfig+0x1a4>
 80095de:	fba8 2303 	umull	r2, r3, r8, r3
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	011f      	lsls	r7, r3, #4
 80095e6:	f7ff fc65 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 80095ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80095ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80095f2:	6866      	ldr	r6, [r4, #4]
 80095f4:	00b6      	lsls	r6, r6, #2
 80095f6:	fbb0 f6f6 	udiv	r6, r0, r6
 80095fa:	f7ff fc5b 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 80095fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009602:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009606:	6863      	ldr	r3, [r4, #4]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	fbb0 f0f3 	udiv	r0, r0, r3
 800960e:	fba8 3000 	umull	r3, r0, r8, r0
 8009612:	0940      	lsrs	r0, r0, #5
 8009614:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009618:	fb09 6310 	mls	r3, r9, r0, r6
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	3332      	adds	r3, #50	; 0x32
 8009620:	fba8 2303 	umull	r2, r3, r8, r3
 8009624:	095b      	lsrs	r3, r3, #5
 8009626:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800962a:	f7ff fc43 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 800962e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009632:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009636:	6865      	ldr	r5, [r4, #4]
 8009638:	00ad      	lsls	r5, r5, #2
 800963a:	fbb0 f5f5 	udiv	r5, r0, r5
 800963e:	f7ff fc39 	bl	8008eb4 <HAL_RCC_GetPCLK2Freq>
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009648:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	fbb0 f3f3 	udiv	r3, r0, r3
 8009654:	fba8 1303 	umull	r1, r3, r8, r3
 8009658:	095b      	lsrs	r3, r3, #5
 800965a:	fb09 5313 	mls	r3, r9, r3, r5
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	3332      	adds	r3, #50	; 0x32
 8009662:	fba8 1303 	umull	r1, r3, r8, r3
 8009666:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800966a:	4333      	orrs	r3, r6
 800966c:	443b      	add	r3, r7
 800966e:	6093      	str	r3, [r2, #8]
 8009670:	e7a7      	b.n	80095c2 <UART_SetConfig+0xee>
 8009672:	bf00      	nop
 8009674:	40013800 	.word	0x40013800
 8009678:	51eb851f 	.word	0x51eb851f

0800967c <UART_WaitOnFlagUntilTimeout>:
{
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4680      	mov	r8, r0
 8009682:	460e      	mov	r6, r1
 8009684:	4615      	mov	r5, r2
 8009686:	4699      	mov	r9, r3
 8009688:	9f08      	ldr	r7, [sp, #32]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800968a:	f8d8 2000 	ldr.w	r2, [r8]
 800968e:	6814      	ldr	r4, [r2, #0]
 8009690:	ea36 0304 	bics.w	r3, r6, r4
 8009694:	bf0c      	ite	eq
 8009696:	f04f 0c01 	moveq.w	ip, #1
 800969a:	f04f 0c00 	movne.w	ip, #0
 800969e:	45ac      	cmp	ip, r5
 80096a0:	d11f      	bne.n	80096e2 <UART_WaitOnFlagUntilTimeout+0x66>
    if(Timeout != HAL_MAX_DELAY)
 80096a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80096a6:	d0f2      	beq.n	800968e <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80096a8:	b12f      	cbz	r7, 80096b6 <UART_WaitOnFlagUntilTimeout+0x3a>
 80096aa:	f7fe fcab 	bl	8008004 <HAL_GetTick>
 80096ae:	eba0 0009 	sub.w	r0, r0, r9
 80096b2:	42b8      	cmp	r0, r7
 80096b4:	d9e9      	bls.n	800968a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096b6:	f8d8 2000 	ldr.w	r2, [r8]
 80096ba:	68d3      	ldr	r3, [r2, #12]
 80096bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096c0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c2:	f8d8 2000 	ldr.w	r2, [r8]
 80096c6:	6953      	ldr	r3, [r2, #20]
 80096c8:	f023 0301 	bic.w	r3, r3, #1
 80096cc:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80096ce:	2320      	movs	r3, #32
 80096d0:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80096d4:	f888 303a 	strb.w	r3, [r8, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80096d8:	2300      	movs	r3, #0
 80096da:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
        return HAL_TIMEOUT;
 80096de:	2003      	movs	r0, #3
 80096e0:	e000      	b.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80096e2:	2000      	movs	r0, #0
}
 80096e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080096e8 <HAL_UART_Init>:
  if(huart == NULL)
 80096e8:	b358      	cbz	r0, 8009742 <HAL_UART_Init+0x5a>
{
 80096ea:	b510      	push	{r4, lr}
 80096ec:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80096ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80096f2:	b30b      	cbz	r3, 8009738 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80096f4:	2324      	movs	r3, #36	; 0x24
 80096f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	68d3      	ldr	r3, [r2, #12]
 80096fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009702:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009704:	4620      	mov	r0, r4
 8009706:	f7ff fee5 	bl	80094d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800970a:	6822      	ldr	r2, [r4, #0]
 800970c:	6913      	ldr	r3, [r2, #16]
 800970e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009712:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	6953      	ldr	r3, [r2, #20]
 8009718:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800971c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800971e:	6822      	ldr	r2, [r4, #0]
 8009720:	68d3      	ldr	r3, [r2, #12]
 8009722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009726:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009728:	2000      	movs	r0, #0
 800972a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800972c:	2320      	movs	r3, #32
 800972e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8009732:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8009736:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009738:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800973c:	f002 f9ca 	bl	800bad4 <HAL_UART_MspInit>
 8009740:	e7d8      	b.n	80096f4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009742:	2001      	movs	r0, #1
}
 8009744:	4770      	bx	lr

08009746 <HAL_UART_Transmit>:
{
 8009746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800974a:	b083      	sub	sp, #12
 800974c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800974e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b20      	cmp	r3, #32
 8009756:	d15b      	bne.n	8009810 <HAL_UART_Transmit+0xca>
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 800975e:	2900      	cmp	r1, #0
 8009760:	d05a      	beq.n	8009818 <HAL_UART_Transmit+0xd2>
 8009762:	2a00      	cmp	r2, #0
 8009764:	d05a      	beq.n	800981c <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8009766:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800976a:	2b01      	cmp	r3, #1
 800976c:	d058      	beq.n	8009820 <HAL_UART_Transmit+0xda>
 800976e:	2301      	movs	r3, #1
 8009770:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	2300      	movs	r3, #0
 8009776:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009778:	2321      	movs	r3, #33	; 0x21
 800977a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800977e:	f7fe fc41 	bl	8008004 <HAL_GetTick>
 8009782:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009784:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8009788:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800978c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800978e:	b29b      	uxth	r3, r3
 8009790:	b37b      	cbz	r3, 80097f2 <HAL_UART_Transmit+0xac>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009792:	f04f 0900 	mov.w	r9, #0
 8009796:	f04f 0880 	mov.w	r8, #128	; 0x80
 800979a:	e013      	b.n	80097c4 <HAL_UART_Transmit+0x7e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800979c:	9600      	str	r6, [sp, #0]
 800979e:	463b      	mov	r3, r7
 80097a0:	464a      	mov	r2, r9
 80097a2:	4641      	mov	r1, r8
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7ff ff69 	bl	800967c <UART_WaitOnFlagUntilTimeout>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d13a      	bne.n	8009824 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	882b      	ldrh	r3, [r5, #0]
 80097b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	b9c3      	cbnz	r3, 80097ee <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80097bc:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80097be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	b1b3      	cbz	r3, 80097f2 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 80097c4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80097c6:	3a01      	subs	r2, #1
 80097c8:	b292      	uxth	r2, r2
 80097ca:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d0e3      	beq.n	800979c <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097d4:	9600      	str	r6, [sp, #0]
 80097d6:	463b      	mov	r3, r7
 80097d8:	464a      	mov	r2, r9
 80097da:	4641      	mov	r1, r8
 80097dc:	4620      	mov	r0, r4
 80097de:	f7ff ff4d 	bl	800967c <UART_WaitOnFlagUntilTimeout>
 80097e2:	bb08      	cbnz	r0, 8009828 <HAL_UART_Transmit+0xe2>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80097ea:	605a      	str	r2, [r3, #4]
 80097ec:	e7e7      	b.n	80097be <HAL_UART_Transmit+0x78>
          pData +=1U;
 80097ee:	3501      	adds	r5, #1
 80097f0:	e7e5      	b.n	80097be <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097f2:	9600      	str	r6, [sp, #0]
 80097f4:	463b      	mov	r3, r7
 80097f6:	2200      	movs	r2, #0
 80097f8:	2140      	movs	r1, #64	; 0x40
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7ff ff3e 	bl	800967c <UART_WaitOnFlagUntilTimeout>
 8009800:	b9a0      	cbnz	r0, 800982c <HAL_UART_Transmit+0xe6>
    huart->gState = HAL_UART_STATE_READY;
 8009802:	2320      	movs	r3, #32
 8009804:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8009808:	2300      	movs	r3, #0
 800980a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800980e:	e000      	b.n	8009812 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8009810:	2002      	movs	r0, #2
}
 8009812:	b003      	add	sp, #12
 8009814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8009818:	2001      	movs	r0, #1
 800981a:	e7fa      	b.n	8009812 <HAL_UART_Transmit+0xcc>
 800981c:	2001      	movs	r0, #1
 800981e:	e7f8      	b.n	8009812 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8009820:	2002      	movs	r0, #2
 8009822:	e7f6      	b.n	8009812 <HAL_UART_Transmit+0xcc>
          return HAL_TIMEOUT;
 8009824:	2003      	movs	r0, #3
 8009826:	e7f4      	b.n	8009812 <HAL_UART_Transmit+0xcc>
          return HAL_TIMEOUT;
 8009828:	2003      	movs	r0, #3
 800982a:	e7f2      	b.n	8009812 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 800982c:	2003      	movs	r0, #3
 800982e:	e7f0      	b.n	8009812 <HAL_UART_Transmit+0xcc>

08009830 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>:
using namespace but;

std::list<ButtonWrapper*> ButtonControlBlock::myButtons;

ButtonWrapper* ButtonControlBlock::CreateButton(GPIO_TypeDef* Port, uint16_t Pin, GPIO_PinState Default)
{
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	4607      	mov	r7, r0
 8009834:	460e      	mov	r6, r1
 8009836:	4615      	mov	r5, r2
	ButtonWrapper* newButton = new ButtonWrapper(Port, Pin, Default);
 8009838:	2028      	movs	r0, #40	; 0x28
 800983a:	f002 fe81 	bl	800c540 <_Znwj>
 800983e:	4604      	mov	r4, r0
	uint32_t TimeBounce_{};
	uint32_t SetTime_{};
	ButtonState ButtonState_ = ButtonState::NEVERMIND;

	/////////////////////////////////////
	ButtonWrapper(GPIO_TypeDef* Port_, uint16_t Pin_, GPIO_PinState Default_) : ButtonDef{Port_, Pin_, Default_} {}
 8009840:	6007      	str	r7, [r0, #0]
 8009842:	8086      	strh	r6, [r0, #4]
 8009844:	7185      	strb	r5, [r0, #6]
struct ButtonCounters
 8009846:	2300      	movs	r3, #0
 8009848:	6083      	str	r3, [r0, #8]
 800984a:	60c3      	str	r3, [r0, #12]
 800984c:	6103      	str	r3, [r0, #16]
	ButtonWrapper(GPIO_TypeDef* Port_, uint16_t Pin_, GPIO_PinState Default_) : ButtonDef{Port_, Pin_, Default_} {}
 800984e:	6143      	str	r3, [r0, #20]
 8009850:	6183      	str	r3, [r0, #24]
 8009852:	61c3      	str	r3, [r0, #28]
 8009854:	6203      	str	r3, [r0, #32]
 8009856:	6243      	str	r3, [r0, #36]	; 0x24
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009858:	200c      	movs	r0, #12
 800985a:	f002 fe71 	bl	800c540 <_Znwj>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800985e:	6084      	str	r4, [r0, #8]
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8009860:	4d04      	ldr	r5, [pc, #16]	; (8009874 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState+0x44>)
 8009862:	4629      	mov	r1, r5
 8009864:	f002 fe8a 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009868:	68ab      	ldr	r3, [r5, #8]
 800986a:	3301      	adds	r3, #1
 800986c:	60ab      	str	r3, [r5, #8]
	myButtons.push_back(newButton);
	return newButton;
}
 800986e:	4620      	mov	r0, r4
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009872:	bf00      	nop
 8009874:	20000874 	.word	0x20000874

08009878 <_ZN3but18ButtonControlBlock13ButtonHandlerEv>:

////////////////////////////////////////////////////////
void ButtonControlBlock::ButtonHandler()
{
 8009878:	b570      	push	{r4, r5, r6, lr}
      { return iterator(this->_M_impl._M_node._M_next); }
 800987a:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x5c>)
 800987c:	681c      	ldr	r4, [r3, #0]
	for(auto it : myButtons)
 800987e:	429c      	cmp	r4, r3
 8009880:	d026      	beq.n	80098d0 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x58>
 8009882:	461e      	mov	r6, r3
 8009884:	e005      	b.n	8009892 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x1a>
	{
		bool PinState = it->ReadPin();
		switch(it->ButtonState_)
		{
		case ButtonState::NEVERMIND:
			it->NevermindHandle(PinState);
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f847 	bl	800991a <_ZN3but13ButtonWrapper15NevermindHandleEb>
	_M_node = _M_node->_M_next;
 800988c:	6824      	ldr	r4, [r4, #0]
	for(auto it : myButtons)
 800988e:	42b4      	cmp	r4, r6
 8009890:	d01e      	beq.n	80098d0 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x58>
 8009892:	68a5      	ldr	r5, [r4, #8]
		bool PinState = it->ReadPin();
 8009894:	4628      	mov	r0, r5
 8009896:	f000 f8ae 	bl	80099f6 <_ZNK3but13ButtonWrapper7ReadPinEv>
 800989a:	4601      	mov	r1, r0
		switch(it->ButtonState_)
 800989c:	69eb      	ldr	r3, [r5, #28]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d8f4      	bhi.n	800988c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x14>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x30>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	08009887 	.word	0x08009887
 80098ac:	080098b9 	.word	0x080098b9
 80098b0:	080098c1 	.word	0x080098c1
 80098b4:	080098c9 	.word	0x080098c9
			break;

		case ButtonState::PRESS_BOUNCE:
			it->PressBounceHandle(PinState);
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f849 	bl	8009950 <_ZN3but13ButtonWrapper17PressBounceHandleEb>
			break;
 80098be:	e7e5      	b.n	800988c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x14>

		case ButtonState::SLICE_WAIT:
			it->SliceWaitHandle(PinState);
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 f866 	bl	8009992 <_ZN3but13ButtonWrapper15SliceWaitHandleEb>
			break;
 80098c6:	e7e1      	b.n	800988c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x14>

		case ButtonState::RELEASE_BOUNCE:
			it->ReleaseBounceHandle(PinState);
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 f884 	bl	80099d6 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb>
			break;
 80098ce:	e7dd      	b.n	800988c <_ZN3but18ButtonControlBlock13ButtonHandlerEv+0x14>
		}
	}
}
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	bf00      	nop
 80098d4:	20000874 	.word	0x20000874

080098d8 <_GLOBAL__sub_I__ZN3but18ButtonControlBlock9myButtonsB5cxx11E>:
	this->_M_next = this->_M_prev = this;
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <_GLOBAL__sub_I__ZN3but18ButtonControlBlock9myButtonsB5cxx11E+0xc>)
 80098da:	605b      	str	r3, [r3, #4]
 80098dc:	601b      	str	r3, [r3, #0]
	this->_M_size = 0;
 80098de:	2200      	movs	r2, #0
 80098e0:	609a      	str	r2, [r3, #8]
 80098e2:	4770      	bx	lr
 80098e4:	20000874 	.word	0x20000874

080098e8 <_GLOBAL__sub_D__ZN3but18ButtonControlBlock9myButtonsB5cxx11E>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80098ea:	4b07      	ldr	r3, [pc, #28]	; (8009908 <_GLOBAL__sub_D__ZN3but18ButtonControlBlock9myButtonsB5cxx11E+0x20>)
 80098ec:	681c      	ldr	r4, [r3, #0]
      while (__cur != &_M_impl._M_node)
 80098ee:	429c      	cmp	r4, r3
 80098f0:	d008      	beq.n	8009904 <_GLOBAL__sub_D__ZN3but18ButtonControlBlock9myButtonsB5cxx11E+0x1c>
	::operator delete(__p
 80098f2:	260c      	movs	r6, #12
 80098f4:	461d      	mov	r5, r3
 80098f6:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 80098f8:	6824      	ldr	r4, [r4, #0]
 80098fa:	4631      	mov	r1, r6
 80098fc:	f002 fe1e 	bl	800c53c <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8009900:	42ac      	cmp	r4, r5
 8009902:	d1f8      	bne.n	80098f6 <_GLOBAL__sub_D__ZN3but18ButtonControlBlock9myButtonsB5cxx11E+0xe>
 8009904:	bd70      	pop	{r4, r5, r6, pc}
 8009906:	bf00      	nop
 8009908:	20000874 	.word	0x20000874

0800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>:
		ButtonState_ 	= ButtonState::NEVERMIND;
	}
}

uint32_t ButtonWrapper::DurationTime() const
{
 800990c:	b510      	push	{r4, lr}
 800990e:	4604      	mov	r4, r0
	return HAL_GetTick() - SetTime_;
 8009910:	f7fe fb78 	bl	8008004 <HAL_GetTick>
 8009914:	69a3      	ldr	r3, [r4, #24]
}
 8009916:	1ac0      	subs	r0, r0, r3
 8009918:	bd10      	pop	{r4, pc}

0800991a <_ZN3but13ButtonWrapper15NevermindHandleEb>:
{
 800991a:	b510      	push	{r4, lr}
 800991c:	4604      	mov	r4, r0
	if(PinState)
 800991e:	b989      	cbnz	r1, 8009944 <_ZN3but13ButtonWrapper15NevermindHandleEb+0x2a>
	if(DurationTime() >= DELAY_BETWEEN_DOUBLE_CLICK)
 8009920:	4620      	mov	r0, r4
 8009922:	f7ff fff3 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8009926:	28c7      	cmp	r0, #199	; 0xc7
 8009928:	d909      	bls.n	800993e <_ZN3but13ButtonWrapper15NevermindHandleEb+0x24>
		CurrentСlick_ 		= ShortClickCount_ + (HoldClickCount_ * 10);
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009930:	68a2      	ldr	r2, [r4, #8]
 8009932:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009936:	6223      	str	r3, [r4, #32]
		ShortClickCount_ 	= 0;
 8009938:	2300      	movs	r3, #0
 800993a:	60a3      	str	r3, [r4, #8]
		HoldClickCount_  	= 0;
 800993c:	60e3      	str	r3, [r4, #12]
	LogicState_  		= LogicState::NONE;
 800993e:	2300      	movs	r3, #0
 8009940:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009942:	bd10      	pop	{r4, pc}
		SetTime_ 		= HAL_GetTick();
 8009944:	f7fe fb5e 	bl	8008004 <HAL_GetTick>
 8009948:	61a0      	str	r0, [r4, #24]
		ButtonState_  	= ButtonState::PRESS_BOUNCE;
 800994a:	2301      	movs	r3, #1
 800994c:	61e3      	str	r3, [r4, #28]
 800994e:	e7e7      	b.n	8009920 <_ZN3but13ButtonWrapper15NevermindHandleEb+0x6>

08009950 <_ZN3but13ButtonWrapper17PressBounceHandleEb>:
{
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4604      	mov	r4, r0
	PinState ? PinStateCount_++ : PinStateCount_ = 0;
 8009954:	b1a1      	cbz	r1, 8009980 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x30>
 8009956:	6903      	ldr	r3, [r0, #16]
 8009958:	3301      	adds	r3, #1
 800995a:	6103      	str	r3, [r0, #16]
	if(PinStateCount_ == TIME_AFTER_BOUNCE)
 800995c:	2b0a      	cmp	r3, #10
 800995e:	d111      	bne.n	8009984 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x34>
		TimeBounce_ 		= DurationTime();
 8009960:	f7ff ffd4 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 8009964:	6160      	str	r0, [r4, #20]
		SetTime_ 			= HAL_GetTick();
 8009966:	f7fe fb4d 	bl	8008004 <HAL_GetTick>
 800996a:	61a0      	str	r0, [r4, #24]
		ButtonState_ 		= ButtonState::SLICE_WAIT;
 800996c:	2302      	movs	r3, #2
 800996e:	61e3      	str	r3, [r4, #28]
		LogicState_ 		= LogicState::WAS_PRESSED;
 8009970:	2301      	movs	r3, #1
 8009972:	6263      	str	r3, [r4, #36]	; 0x24
		PinStateCount_   	= 0;
 8009974:	2300      	movs	r3, #0
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	e00a      	b.n	8009990 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x40>
		ButtonState_ 	= ButtonState::NEVERMIND;
 800997a:	2300      	movs	r3, #0
 800997c:	61e3      	str	r3, [r4, #28]
}
 800997e:	e007      	b.n	8009990 <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x40>
 8009980:	2300      	movs	r3, #0
 8009982:	6103      	str	r3, [r0, #16]
	else if(TimeBounce_ == DurationTime())
 8009984:	6965      	ldr	r5, [r4, #20]
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff ffc0 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 800998c:	4285      	cmp	r5, r0
 800998e:	d0f4      	beq.n	800997a <_ZN3but13ButtonWrapper17PressBounceHandleEb+0x2a>
}
 8009990:	bd38      	pop	{r3, r4, r5, pc}

08009992 <_ZN3but13ButtonWrapper15SliceWaitHandleEb>:
	if(!PinState)
 8009992:	b101      	cbz	r1, 8009996 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x4>
 8009994:	4770      	bx	lr
{
 8009996:	b510      	push	{r4, lr}
 8009998:	4604      	mov	r4, r0
		if(SHORT_CLICK < DurationTime())
 800999a:	f7ff ffb7 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 800999e:	2832      	cmp	r0, #50	; 0x32
 80099a0:	d802      	bhi.n	80099a8 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x16>
		else ButtonState_ 		= ButtonState::NEVERMIND;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61e3      	str	r3, [r4, #28]
}
 80099a6:	bd10      	pop	{r4, pc}
			if(HOLD_CLICK < DurationTime())
 80099a8:	4620      	mov	r0, r4
 80099aa:	f7ff ffaf 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 80099ae:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
 80099b2:	d90a      	bls.n	80099ca <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x38>
				LogicState_	= LogicState::WAS_HOLDED;
 80099b4:	2302      	movs	r3, #2
 80099b6:	6263      	str	r3, [r4, #36]	; 0x24
				HoldClickCount_++;
 80099b8:	68e3      	ldr	r3, [r4, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60e3      	str	r3, [r4, #12]
			SetTime_ 			= HAL_GetTick();
 80099be:	f7fe fb21 	bl	8008004 <HAL_GetTick>
 80099c2:	61a0      	str	r0, [r4, #24]
			ButtonState_ 		= ButtonState::RELEASE_BOUNCE;
 80099c4:	2303      	movs	r3, #3
 80099c6:	61e3      	str	r3, [r4, #28]
 80099c8:	e7ed      	b.n	80099a6 <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x14>
				LogicState_ 	= LogicState::WAS_SHORT_PRESSED;
 80099ca:	2303      	movs	r3, #3
 80099cc:	6263      	str	r3, [r4, #36]	; 0x24
				ShortClickCount_++;
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	e7f3      	b.n	80099be <_ZN3but13ButtonWrapper15SliceWaitHandleEb+0x2c>

080099d6 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb>:
{
 80099d6:	b538      	push	{r3, r4, r5, lr}
 80099d8:	4604      	mov	r4, r0
	if(TimeBounce_ == DurationTime())
 80099da:	6945      	ldr	r5, [r0, #20]
 80099dc:	f7ff ff96 	bl	800990c <_ZNK3but13ButtonWrapper12DurationTimeEv>
 80099e0:	4285      	cmp	r5, r0
 80099e2:	d000      	beq.n	80099e6 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb+0x10>
}
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
		SetTime_ 		= HAL_GetTick();
 80099e6:	f7fe fb0d 	bl	8008004 <HAL_GetTick>
 80099ea:	61a0      	str	r0, [r4, #24]
		LogicState_		= LogicState::WAS_RELEASED;
 80099ec:	2304      	movs	r3, #4
 80099ee:	6263      	str	r3, [r4, #36]	; 0x24
		ButtonState_ 	= ButtonState::NEVERMIND;
 80099f0:	2300      	movs	r3, #0
 80099f2:	61e3      	str	r3, [r4, #28]
}
 80099f4:	e7f6      	b.n	80099e4 <_ZN3but13ButtonWrapper19ReleaseBounceHandleEb+0xe>

080099f6 <_ZNK3but13ButtonWrapper7ReadPinEv>:

bool ButtonWrapper::ReadPin() const
{
 80099f6:	b510      	push	{r4, lr}
 80099f8:	4604      	mov	r4, r0
	return HAL_GPIO_ReadPin(Port_, Pin_) ^ ReleaseState_;
 80099fa:	8881      	ldrh	r1, [r0, #4]
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f7fe febf 	bl	8008780 <HAL_GPIO_ReadPin>
 8009a02:	79a3      	ldrb	r3, [r4, #6]
}
 8009a04:	1a18      	subs	r0, r3, r0
 8009a06:	bf18      	it	ne
 8009a08:	2001      	movne	r0, #1
 8009a0a:	bd10      	pop	{r4, pc}

08009a0c <_Z19computeTimeDurationm>:
#include <Inc/General.hpp>


uint32_t computeTimeDuration(uint32_t time)
{
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	4604      	mov	r4, r0
	return HAL_GetTick() - time;
 8009a10:	f7fe faf8 	bl	8008004 <HAL_GetTick>
}
 8009a14:	1b00      	subs	r0, r0, r4
 8009a16:	bd10      	pop	{r4, pc}

08009a18 <_Z8MainInitv>:
but::ButtonWrapper *but2 = but::ButtonControlBlock::CreateButton(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_SET);
but::ButtonWrapper *but3 = but::ButtonControlBlock::CreateButton(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_SET);
but::ButtonWrapper *but4 = but::ButtonControlBlock::CreateButton(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_SET);

void MainInit()
{
 8009a18:	b508      	push	{r3, lr}
	tft_begin();
 8009a1a:	f001 fc05 	bl	800b228 <_Z9tft_beginv>
	tft_setRotation(true);
 8009a1e:	2001      	movs	r0, #1
 8009a20:	f001 fd0a 	bl	800b438 <_Z15tft_setRotationh>
}
 8009a24:	bd08      	pop	{r3, pc}

08009a26 <_Z10MainThreadv>:

void MainThread()
{
 8009a26:	b508      	push	{r3, lr}
	MainInit();
 8009a28:	f7ff fff6 	bl	8009a18 <_Z8MainInitv>
	while(true)
	{
		SnakeTask();
 8009a2c:	f000 fa5c 	bl	8009ee8 <_Z9SnakeTaskv>
		TetrisTask();
 8009a30:	f001 fb8a 	bl	800b148 <_Z10TetrisTaskv>
	while(true)
 8009a34:	e7fa      	b.n	8009a2c <_Z10MainThreadv+0x6>

08009a36 <_Z13SysTickThreadv>:
	}
}

void SysTickThread()
{
 8009a36:	b508      	push	{r3, lr}
	but::ButtonControlBlock::ButtonHandler();
 8009a38:	f7ff ff1e 	bl	8009878 <_ZN3but18ButtonControlBlock13ButtonHandlerEv>
}
 8009a3c:	bd08      	pop	{r3, pc}
	...

08009a40 <_GLOBAL__sub_I_but1>:
 8009a40:	b510      	push	{r4, lr}
but::ButtonWrapper *but1 = but::ButtonControlBlock::CreateButton(DB4_GPIO_Port, DB4_Pin, GPIO_PIN_SET);
 8009a42:	4c0f      	ldr	r4, [pc, #60]	; (8009a80 <_GLOBAL__sub_I_but1+0x40>)
 8009a44:	2201      	movs	r2, #1
 8009a46:	2110      	movs	r1, #16
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f7ff fef1 	bl	8009830 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <_GLOBAL__sub_I_but1+0x44>)
 8009a50:	6018      	str	r0, [r3, #0]
but::ButtonWrapper *but2 = but::ButtonControlBlock::CreateButton(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_SET);
 8009a52:	2201      	movs	r2, #1
 8009a54:	2120      	movs	r1, #32
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff feea 	bl	8009830 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	; (8009a88 <_GLOBAL__sub_I_but1+0x48>)
 8009a5e:	6018      	str	r0, [r3, #0]
but::ButtonWrapper *but3 = but::ButtonControlBlock::CreateButton(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_SET);
 8009a60:	2201      	movs	r2, #1
 8009a62:	2140      	movs	r1, #64	; 0x40
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fee3 	bl	8009830 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8009a6a:	4b08      	ldr	r3, [pc, #32]	; (8009a8c <_GLOBAL__sub_I_but1+0x4c>)
 8009a6c:	6018      	str	r0, [r3, #0]
but::ButtonWrapper *but4 = but::ButtonControlBlock::CreateButton(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_SET);
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff fedc 	bl	8009830 <_ZN3but18ButtonControlBlock12CreateButtonEP12GPIO_TypeDeft13GPIO_PinState>
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <_GLOBAL__sub_I_but1+0x50>)
 8009a7a:	6018      	str	r0, [r3, #0]
}
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	bf00      	nop
 8009a80:	40010c00 	.word	0x40010c00
 8009a84:	20000880 	.word	0x20000880
 8009a88:	20000884 	.word	0x20000884
 8009a8c:	20000888 	.word	0x20000888
 8009a90:	2000088c 	.word	0x2000088c

08009a94 <_ZN5snake12ClassicSnake7PromoteER10Coordinate>:
#include <Inc/SnakeLogic.hpp>
using namespace snake;

Coordinate& ClassicSnake::Promote(Coordinate& coord)
{
	switch (currentDir)
 8009a94:	69c3      	ldr	r3, [r0, #28]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d806      	bhi.n	8009aa8 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x14>
 8009a9a:	e8df f003 	tbb	[pc, r3]
 8009a9e:	0702      	.short	0x0702
 8009aa0:	0f0b      	.short	0x0f0b
	{
	case directions::UP:	coord.Y -= 1; break;
 8009aa2:	684b      	ldr	r3, [r1, #4]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	604b      	str	r3, [r1, #4]
	case directions::DOWN:	coord.Y += 1; break;
	case directions::LEFT:	coord.X -= 1; break;
	case directions::RIGHT:	coord.X += 1; break;
	}
	return coord;
}
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4770      	bx	lr
	case directions::DOWN:	coord.Y += 1; break;
 8009aac:	684b      	ldr	r3, [r1, #4]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	604b      	str	r3, [r1, #4]
 8009ab2:	e7f9      	b.n	8009aa8 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x14>
	case directions::LEFT:	coord.X -= 1; break;
 8009ab4:	680b      	ldr	r3, [r1, #0]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	600b      	str	r3, [r1, #0]
 8009aba:	e7f5      	b.n	8009aa8 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x14>
	case directions::RIGHT:	coord.X += 1; break;
 8009abc:	680b      	ldr	r3, [r1, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	e7f1      	b.n	8009aa8 <_ZN5snake12ClassicSnake7PromoteER10Coordinate+0x14>

08009ac4 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate>:
Coordinate& ClassicSnake::CheckBoundaries(Coordinate& coord)
{
 8009ac4:	b410      	push	{r4}
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4608      	mov	r0, r1
	if (coord.X == (upLeftField.X - 1)) coord.X = lowRightField.X;		//left
 8009aca:	680a      	ldr	r2, [r1, #0]
 8009acc:	681c      	ldr	r4, [r3, #0]
 8009ace:	1e61      	subs	r1, r4, #1
 8009ad0:	428a      	cmp	r2, r1
 8009ad2:	d00e      	beq.n	8009af2 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x2e>
	else if (coord.X == (lowRightField.X + 1)) coord.X = upLeftField.X;	//right
 8009ad4:	6899      	ldr	r1, [r3, #8]
 8009ad6:	3101      	adds	r1, #1
 8009ad8:	428a      	cmp	r2, r1
 8009ada:	d00e      	beq.n	8009afa <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x36>
	else if (coord.Y == (upLeftField.Y - 1)) coord.Y = lowRightField.Y;	//up
 8009adc:	6842      	ldr	r2, [r0, #4]
 8009ade:	6859      	ldr	r1, [r3, #4]
 8009ae0:	1e4c      	subs	r4, r1, #1
 8009ae2:	42a2      	cmp	r2, r4
 8009ae4:	d00b      	beq.n	8009afe <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x3a>
	else if (coord.Y == (lowRightField.Y + 1)) coord.Y = upLeftField.Y;	//down
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	429a      	cmp	r2, r3
 8009aec:	bf08      	it	eq
 8009aee:	6041      	streq	r1, [r0, #4]
 8009af0:	e001      	b.n	8009af6 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x32>
	if (coord.X == (upLeftField.X - 1)) coord.X = lowRightField.X;		//left
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	6003      	str	r3, [r0, #0]
	return coord;
}
 8009af6:	bc10      	pop	{r4}
 8009af8:	4770      	bx	lr
	else if (coord.X == (lowRightField.X + 1)) coord.X = upLeftField.X;	//right
 8009afa:	6004      	str	r4, [r0, #0]
 8009afc:	e7fb      	b.n	8009af6 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x32>
	else if (coord.Y == (upLeftField.Y - 1)) coord.Y = lowRightField.Y;	//up
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	6043      	str	r3, [r0, #4]
 8009b02:	e7f8      	b.n	8009af6 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate+0x32>

08009b04 <_ZN5snake12ClassicSnake4MoveEv>:
	//////////////////////////////////////
	this->GenerateNewFruit().color = ColorFruit_;
}

ClassicSnake& ClassicSnake::Move()
{
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	4604      	mov	r4, r0
	_M_node = _M_node->_M_next;
 8009b08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b0a:	681d      	ldr	r5, [r3, #0]
	auto tail = (*++mySnake.begin()).Coord;
 8009b0c:	68af      	ldr	r7, [r5, #8]
 8009b0e:	68ee      	ldr	r6, [r5, #12]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8009b10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b12:	3b01      	subs	r3, #1
 8009b14:	6343      	str	r3, [r0, #52]	; 0x34
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8009b16:	4628      	mov	r0, r5
 8009b18:	f002 fd38 	bl	800c58c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8009b1c:	2114      	movs	r1, #20
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f002 fd0c 	bl	800c53c <_ZdlPvj>
      { return iterator(this->_M_impl._M_node._M_next); }
 8009b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	mySnake.erase(++mySnake.begin());
	mySnake.front().Coord = tail;
 8009b26:	609f      	str	r7, [r3, #8]
 8009b28:	60de      	str	r6, [r3, #12]
	_M_node = _M_node->_M_prev;
 8009b2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	//////////////////////////////////
	tail = mySnake.back().Coord;
 8009b2c:	688f      	ldr	r7, [r1, #8]
 8009b2e:	68ce      	ldr	r6, [r1, #12]
	Promote(mySnake.back().Coord);
 8009b30:	3108      	adds	r1, #8
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff ffae 	bl	8009a94 <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
 8009b38:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009b3a:	2014      	movs	r0, #20
 8009b3c:	f002 fd00 	bl	800c540 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009b40:	8a62      	ldrh	r2, [r4, #18]

struct SnakeNode
{
	Coordinate Coord{-1, -1};
	color_t color;
	SnakeNode(Coordinate Coord_, color_t color_) : Coord{ Coord_ }, color(color_) {}
 8009b42:	6087      	str	r7, [r0, #8]
 8009b44:	60c6      	str	r6, [r0, #12]
 8009b46:	8202      	strh	r2, [r0, #16]
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
	_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	__tmp->_M_hook(__position._M_const_cast()._M_node);
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f002 fd17 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b50:	3301      	adds	r3, #1
 8009b52:	6363      	str	r3, [r4, #52]	; 0x34
	mySnake.emplace(--mySnake.end(), tail, colorBody);
	//////////////////////////////////
	CheckBoundaries(mySnake.back().Coord);
 8009b54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b56:	3108      	adds	r1, #8
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f7ff ffb3 	bl	8009ac4 <_ZN5snake12ClassicSnake15CheckBoundariesER10Coordinate>
	return *this;
}
 8009b5e:	4620      	mov	r0, r4
 8009b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b62 <_ZN5snake12ClassicSnake12AddNodeToEndEv>:

ClassicSnake& ClassicSnake::AddNodeToEnd()
{
 8009b62:	b538      	push	{r3, r4, r5, lr}
 8009b64:	4604      	mov	r4, r0
	_M_node = _M_node->_M_next;
 8009b66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b68:	681d      	ldr	r5, [r3, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009b6a:	2014      	movs	r0, #20
 8009b6c:	f002 fce8 	bl	800c540 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009b70:	8a61      	ldrh	r1, [r4, #18]
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295
 8009b76:	6082      	str	r2, [r0, #8]
 8009b78:	60c2      	str	r2, [r0, #12]
 8009b7a:	8201      	strh	r1, [r0, #16]
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	f002 fcfd 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b84:	3301      	adds	r3, #1
 8009b86:	6363      	str	r3, [r4, #52]	; 0x34
	mySnake.emplace(++mySnake.begin(), Coordinate{ -1, -1 }, colorBody);
	return *this;
}
 8009b88:	4620      	mov	r0, r4
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}

08009b8c <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>:

ClassicSnake& ClassicSnake::NewDirection(directions newDir)
{
	currentDir = newDir;
 8009b8c:	61c1      	str	r1, [r0, #28]
	return *this;
}
 8009b8e:	4770      	bx	lr

08009b90 <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>:

bool ClassicSnake::CheckSnakeCollision(const SnakeNode& myNode) const
{
 8009b90:	b430      	push	{r4, r5}
	_M_node = _M_node->_M_next;
 8009b92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b94:	681b      	ldr	r3, [r3, #0]
	_M_node = _M_node->_M_prev;
 8009b96:	6b04      	ldr	r4, [r0, #48]	; 0x30
    _GLIBCXX20_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 8009b98:	429c      	cmp	r4, r3
 8009b9a:	d00f      	beq.n	8009bbc <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE+0x2c>
	return std::count_if(++mySnake.begin(), --mySnake.end(), [&myNode](auto& rhs)
			{return (rhs.Coord.X == myNode.Coord.X) && (rhs.Coord.Y == myNode.Coord.Y); });
 8009b9c:	680d      	ldr	r5, [r1, #0]
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e008      	b.n	8009bb4 <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE+0x24>
 8009ba2:	684a      	ldr	r2, [r1, #4]
 8009ba4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009ba8:	4594      	cmp	ip, r2
	if (__pred(__first))
	  ++__n;
 8009baa:	bf08      	it	eq
 8009bac:	3001      	addeq	r0, #1
	_M_node = _M_node->_M_next;
 8009bae:	681b      	ldr	r3, [r3, #0]
      for (; __first != __last; ++__first)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	d004      	beq.n	8009bbe <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE+0x2e>
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	42aa      	cmp	r2, r5
 8009bb8:	d1f9      	bne.n	8009bae <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE+0x1e>
 8009bba:	e7f2      	b.n	8009ba2 <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE+0x12>
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 8009bbc:	2000      	movs	r0, #0
}
 8009bbe:	3800      	subs	r0, #0
 8009bc0:	bf18      	it	ne
 8009bc2:	2001      	movne	r0, #1
 8009bc4:	bc30      	pop	{r4, r5}
 8009bc6:	4770      	bx	lr

08009bc8 <_ZN5snake12ClassicSnake10CheckFruitEv>:
	_M_node = _M_node->_M_prev;
 8009bc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	return this->fruitCoordinate;
}
bool ClassicSnake::CheckFruit()
{
	const SnakeNode& head = *mySnake.rbegin();
	if ((head.Coord.X == fruitCoordinate.Coord.X) && (head.Coord.Y == fruitCoordinate.Coord.Y))
 8009bca:	6899      	ldr	r1, [r3, #8]
 8009bcc:	6a02      	ldr	r2, [r0, #32]
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	d106      	bne.n	8009be0 <_ZN5snake12ClassicSnake10CheckFruitEv+0x18>
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009bd6:	4283      	cmp	r3, r0
 8009bd8:	bf14      	ite	ne
 8009bda:	2000      	movne	r0, #0
 8009bdc:	2001      	moveq	r0, #1
 8009bde:	4770      	bx	lr
		return true;
	else return false;
 8009be0:	2000      	movs	r0, #0
}
 8009be2:	4770      	bx	lr

08009be4 <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj>:
	else
	  {
	    static const _Tp __q = __m / __a;
	    static const _Tp __r = __m % __a;

	    _Tp __t1 = __a * (__x % __q);
 8009be4:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj+0x34>)
 8009be6:	fba3 2300 	umull	r2, r3, r3, r0
 8009bea:	1ac2      	subs	r2, r0, r3
 8009bec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj+0x38>)
 8009bf4:	fb02 0013 	mls	r0, r2, r3, r0
 8009bf8:	f244 12a7 	movw	r2, #16807	; 0x41a7
 8009bfc:	fb00 f202 	mul.w	r2, r0, r2
	    _Tp __t2 = __r * (__x / __q);
 8009c00:	f640 3014 	movw	r0, #2836	; 0xb14
 8009c04:	fb03 f000 	mul.w	r0, r3, r0
	    if (__t1 >= __t2)
 8009c08:	4282      	cmp	r2, r0
	      __x = __t1 - __t2;
	    else
	      __x = __m - __t2 + __t1;
 8009c0a:	bf3c      	itt	cc
 8009c0c:	f102 4200 	addcc.w	r2, r2, #2147483648	; 0x80000000
 8009c10:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009c14:	1a10      	subs	r0, r2, r0
	      __x += __c;
	    else
	      __x = __c - __d;
	  }
	return __x;
      }
 8009c16:	4770      	bx	lr
 8009c18:	069c16bd 	.word	0x069c16bd
 8009c1c:	0001f31d 	.word	0x0001f31d

08009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>:
    };

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	460c      	mov	r4, r1
 8009c28:	4617      	mov	r7, r2
	  __uctype;

	const __uctype __urngmin = __urng.min();
	const __uctype __urngmax = __urng.max();
	const __uctype __urngrange = __urngmax - __urngmin;
	const __uctype __urange
 8009c2a:	6856      	ldr	r6, [r2, #4]
 8009c2c:	6813      	ldr	r3, [r2, #0]
 8009c2e:	1af6      	subs	r6, r6, r3
	  = __uctype(__param.b()) - __uctype(__param.a());

	__uctype __ret;

	if (__urngrange > __urange)
 8009c30:	4b20      	ldr	r3, [pc, #128]	; (8009cb4 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x94>)
 8009c32:	429e      	cmp	r6, r3
 8009c34:	d813      	bhi.n	8009c5e <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x3e>
	  {
	    // downscaling
	    const __uctype __uerange = __urange + 1; // __urange can be zero
 8009c36:	3601      	adds	r6, #1
	    const __uctype __scaling = __urngrange / __uerange;
 8009c38:	4d1f      	ldr	r5, [pc, #124]	; (8009cb8 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x98>)
 8009c3a:	fbb5 f5f6 	udiv	r5, r5, r6
	    const __uctype __past = __uerange * __scaling;
 8009c3e:	fb05 f606 	mul.w	r6, r5, r6
	  return __c;
	else
	  {
	    // _Mod must not be instantiated with a == 0
	    constexpr _Tp __a1 = __a ? __a : 1;
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	f7ff ffce 	bl	8009be4 <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj>
       * @brief Gets the next random number in the sequence.
       */
      result_type
      operator()()
      {
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 8009c48:	6020      	str	r0, [r4, #0]
	    do
	      __ret = __uctype(__urng()) - __urngmin;
 8009c4a:	3801      	subs	r0, #1
	    while (__ret >= __past);
 8009c4c:	4286      	cmp	r6, r0
 8009c4e:	d9f8      	bls.n	8009c42 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x22>
	    __ret /= __scaling;
 8009c50:	fbb0 f3f5 	udiv	r3, r0, r5
	    while (__ret > __urange || __ret < __tmp);
	  }
	else
	  __ret = __uctype(__urng()) - __urngmin;

	return __ret + __param.a();
 8009c54:	6838      	ldr	r0, [r7, #0]
      }
 8009c56:	4418      	add	r0, r3
 8009c58:	b002      	add	sp, #8
 8009c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5e:	4680      	mov	r8, r0
	else if (__urngrange < __urange)
 8009c60:	4b15      	ldr	r3, [pc, #84]	; (8009cb8 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x98>)
 8009c62:	429e      	cmp	r6, r3
 8009c64:	d91f      	bls.n	8009ca6 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x86>
			 (__urng, param_type(0, __urange / __uerngrange)));
 8009c66:	ea4f 0956 	mov.w	r9, r6, lsr #1
 8009c6a:	3306      	adds	r3, #6
 8009c6c:	fba3 3909 	umull	r3, r9, r3, r9
 8009c70:	ea4f 7959 	mov.w	r9, r9, lsr #29
	: _M_a(__a), _M_b(__b)
 8009c74:	f04f 0a00 	mov.w	sl, #0
 8009c78:	f8cd a000 	str.w	sl, [sp]
 8009c7c:	f8cd 9004 	str.w	r9, [sp, #4]
			 (__urng, param_type(0, __urange / __uerngrange)));
 8009c80:	466a      	mov	r2, sp
 8009c82:	4621      	mov	r1, r4
 8009c84:	4640      	mov	r0, r8
 8009c86:	f7ff ffcb 	bl	8009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>
		__tmp = (__uerngrange * operator()
 8009c8a:	ebc0 7080 	rsb	r0, r0, r0, lsl #30
 8009c8e:	0045      	lsls	r5, r0, #1
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	f7ff ffa7 	bl	8009be4 <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj>
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 8009c96:	6020      	str	r0, [r4, #0]
		__ret = __tmp + (__uctype(__urng()) - __urngmin);
 8009c98:	3801      	subs	r0, #1
 8009c9a:	1943      	adds	r3, r0, r5
	    while (__ret > __urange || __ret < __tmp);
 8009c9c:	429e      	cmp	r6, r3
 8009c9e:	d3eb      	bcc.n	8009c78 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x58>
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	d8e9      	bhi.n	8009c78 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x58>
 8009ca4:	e7d6      	b.n	8009c54 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x34>
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
 8009ca6:	6808      	ldr	r0, [r1, #0]
 8009ca8:	f7ff ff9c 	bl	8009be4 <_ZNSt8__detail4_ModIjLj2147483647ELj16807ELj0ELb0ELb1EE6__calcEj>
	_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 8009cac:	6020      	str	r0, [r4, #0]
	  __ret = __uctype(__urng()) - __urngmin;
 8009cae:	1e43      	subs	r3, r0, #1
 8009cb0:	e7d0      	b.n	8009c54 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE+0x34>
 8009cb2:	bf00      	nop
 8009cb4:	7ffffffc 	.word	0x7ffffffc
 8009cb8:	7ffffffd 	.word	0x7ffffffd

08009cbc <_ZN5snake12ClassicSnake16GenerateNewFruitEv>:
{
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	4604      	mov	r4, r0
	fruitCoordinate.Coord.X = fruitGenerator.generate(upLeftField.X, lowRightField.X);
 8009cc2:	6802      	ldr	r2, [r0, #0]
 8009cc4:	6883      	ldr	r3, [r0, #8]
	: _M_a(__a), _M_b(__b)
 8009cc6:	9200      	str	r2, [sp, #0]
 8009cc8:	9301      	str	r3, [sp, #4]
struct random_generator
{
	int32_t generate(int32_t max, int32_t min)
	{
		std::uniform_int_distribution<int32_t> distance{ max , min };
		return distance(generator);
 8009cca:	f100 0518 	add.w	r5, r0, #24
        { return this->operator()(__urng, _M_param); }
 8009cce:	466a      	mov	r2, sp
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4668      	mov	r0, sp
 8009cd4:	f7ff ffa4 	bl	8009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>
 8009cd8:	6220      	str	r0, [r4, #32]
	fruitCoordinate.Coord.Y = fruitGenerator.generate(upLeftField.Y, lowRightField.Y);
 8009cda:	6862      	ldr	r2, [r4, #4]
 8009cdc:	68e3      	ldr	r3, [r4, #12]
	: _M_a(__a), _M_b(__b)
 8009cde:	9200      	str	r2, [sp, #0]
 8009ce0:	9301      	str	r3, [sp, #4]
        { return this->operator()(__urng, _M_param); }
 8009ce2:	466a      	mov	r2, sp
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4668      	mov	r0, sp
 8009ce8:	f7ff ff9a 	bl	8009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>
 8009cec:	6260      	str	r0, [r4, #36]	; 0x24
}
 8009cee:	f104 0020 	add.w	r0, r4, #32
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bd30      	pop	{r4, r5, pc}

08009cf6 <_ZN5snake12ClassicSnakeC1E10CoordinateS1_tttt>:
ClassicSnake::ClassicSnake(Coordinate UpLeft_, Coordinate DownRight_, color_t ColorHead_, color_t ColorBody_,
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4668      	mov	r0, sp
 8009d02:	e880 0006 	stmia.w	r0, {r1, r2}
 8009d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d08:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 8009d0c:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8009d10:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
 8009d14:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8009d18:	460e      	mov	r6, r1
  colorFruit(ColorFruit_), colorBackGround(ColorBackGround_), currentDir(defDirections)
 8009d1a:	6021      	str	r1, [r4, #0]
 8009d1c:	6062      	str	r2, [r4, #4]
 8009d1e:	f104 0508 	add.w	r5, r4, #8
 8009d22:	a90f      	add	r1, sp, #60	; 0x3c
 8009d24:	c903      	ldmia	r1, {r0, r1}
 8009d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8009d2a:	f8a4 b010 	strh.w	fp, [r4, #16]
 8009d2e:	f8a4 a012 	strh.w	sl, [r4, #18]
 8009d32:	f8a4 8014 	strh.w	r8, [r4, #20]
 8009d36:	f8a4 9016 	strh.w	r9, [r4, #22]
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
	  && (__detail::__mod<_UIntType, __m>(__s) == 0))
	_M_x = 1;
      else
	_M_x = __detail::__mod<_UIntType, __m>(__s);
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	61a1      	str	r1, [r4, #24]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	61e1      	str	r1, [r4, #28]
	Coordinate(int32_t X_, int32_t Y_) : X(X_), Y(Y_) {}
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	6220      	str	r0, [r4, #32]
 8009d48:	6260      	str	r0, [r4, #36]	; 0x24
 8009d4a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
	this->_M_next = this->_M_prev = this;
 8009d4e:	6327      	str	r7, [r4, #48]	; 0x30
 8009d50:	62e7      	str	r7, [r4, #44]	; 0x2c
	this->_M_size = 0;
 8009d52:	6361      	str	r1, [r4, #52]	; 0x34
	Coordinate tmpCoord = { ((DownRight_.X - UpLeft_.X) / 2) + UpLeft_.X,((DownRight_.Y - UpLeft_.Y) / 2) + UpLeft_.Y };//center field
 8009d54:	1b9b      	subs	r3, r3, r6
 8009d56:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009d5a:	eb06 0663 	add.w	r6, r6, r3, asr #1
 8009d5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d60:	1aad      	subs	r5, r5, r2
 8009d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d66:	eb02 0565 	add.w	r5, r2, r5, asr #1
 8009d6a:	9602      	str	r6, [sp, #8]
 8009d6c:	9503      	str	r5, [sp, #12]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009d6e:	2014      	movs	r0, #20
 8009d70:	f002 fbe6 	bl	800c540 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d74:	6086      	str	r6, [r0, #8]
 8009d76:	60c5      	str	r5, [r0, #12]
 8009d78:	f8a0 b010 	strh.w	fp, [r0, #16]
	 __tmp->_M_hook(__position._M_node);
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	f002 fbfd 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d84:	3301      	adds	r3, #1
 8009d86:	6363      	str	r3, [r4, #52]	; 0x34
	Promote(tmpCoord);
 8009d88:	a902      	add	r1, sp, #8
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7ff fe82 	bl	8009a94 <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
	mySnake.push_front({ tmpCoord,  ColorBody_ });
 8009d90:	9f02      	ldr	r7, [sp, #8]
 8009d92:	9e03      	ldr	r6, [sp, #12]
      { return iterator(this->_M_impl._M_node._M_next); }
 8009d94:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009d96:	2014      	movs	r0, #20
 8009d98:	f002 fbd2 	bl	800c540 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d9c:	6087      	str	r7, [r0, #8]
 8009d9e:	60c6      	str	r6, [r0, #12]
 8009da0:	f8a0 a010 	strh.w	sl, [r0, #16]
	 __tmp->_M_hook(__position._M_node);
 8009da4:	4629      	mov	r1, r5
 8009da6:	f002 fbe9 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dac:	3301      	adds	r3, #1
 8009dae:	6363      	str	r3, [r4, #52]	; 0x34
	Promote(tmpCoord);
 8009db0:	a902      	add	r1, sp, #8
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff fe6e 	bl	8009a94 <_ZN5snake12ClassicSnake7PromoteER10Coordinate>
	mySnake.push_front({ tmpCoord, ColorBackGround_ });
 8009db8:	9f02      	ldr	r7, [sp, #8]
 8009dba:	9e03      	ldr	r6, [sp, #12]
      { return iterator(this->_M_impl._M_node._M_next); }
 8009dbc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009dbe:	2014      	movs	r0, #20
 8009dc0:	f002 fbbe 	bl	800c540 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009dc4:	6087      	str	r7, [r0, #8]
 8009dc6:	60c6      	str	r6, [r0, #12]
 8009dc8:	f8a0 9010 	strh.w	r9, [r0, #16]
	 __tmp->_M_hook(__position._M_node);
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f002 fbd5 	bl	800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	6363      	str	r3, [r4, #52]	; 0x34
	this->GenerateNewFruit().color = ColorFruit_;
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f7ff ff6f 	bl	8009cbc <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
 8009dde:	f8a0 8008 	strh.w	r8, [r0, #8]
}
 8009de2:	4620      	mov	r0, r4
 8009de4:	b005      	add	sp, #20
 8009de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	b002      	add	sp, #8
 8009dec:	4770      	bx	lr

08009dee <_Z16printSnakeSquareRN5snake9SnakeNodeE>:
		but4->LogicState_ = LogicState::NONE;
	}
}

void printSnakeSquare(SnakeNode& sn)
{
 8009dee:	b500      	push	{lr}
 8009df0:	b083      	sub	sp, #12
	tft_fillRoundRect(sn.Coord.X * SIZE_SIDE_SQUARE, sn.Coord.Y *
 8009df2:	6841      	ldr	r1, [r0, #4]
 8009df4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8009df8:	6803      	ldr	r3, [r0, #0]
 8009dfa:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
 8009dfe:	8903      	ldrh	r3, [r0, #8]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	2302      	movs	r3, #2
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	230f      	movs	r3, #15
 8009e08:	461a      	mov	r2, r3
 8009e0a:	b209      	sxth	r1, r1
 8009e0c:	fa0f f08c 	sxth.w	r0, ip
 8009e10:	f001 fad2 	bl	800b3b8 <_Z17tft_fillRoundRectssssst>
			SIZE_SIDE_SQUARE, SIZE_SIDE_SQUARE, SIZE_SIDE_SQUARE, RADIUS_ROUNDING, sn.color);
}
 8009e14:	b003      	add	sp, #12
 8009e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009e1c <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE>:
{
 8009e1c:	b508      	push	{r3, lr}
	if((but1->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::RIGHT)){
 8009e1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ed8 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xbc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d00f      	beq.n	8009e48 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2c>
	else if((but2->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::DOWN)){
 8009e28:	4b2c      	ldr	r3, [pc, #176]	; (8009edc <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d027      	beq.n	8009e82 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x66>
	else if((but3->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::UP)){
 8009e32:	4b2b      	ldr	r3, [pc, #172]	; (8009ee0 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc4>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d038      	beq.n	8009eae <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x92>
	else if((but4->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::LEFT)){
 8009e3c:	4b29      	ldr	r3, [pc, #164]	; (8009ee4 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d043      	beq.n	8009ece <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xb2>
}
 8009e46:	bd08      	pop	{r3, pc}
	if((but1->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::RIGHT)){
 8009e48:	69c3      	ldr	r3, [r0, #28]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d111      	bne.n	8009e72 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x56>
	else if((but2->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::DOWN)){
 8009e4e:	4b23      	ldr	r3, [pc, #140]	; (8009edc <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d022      	beq.n	8009e9e <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x82>
	else if((but3->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::UP)){
 8009e58:	4b21      	ldr	r3, [pc, #132]	; (8009ee0 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d1ec      	bne.n	8009e3c <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x20>
		cd.NewDirection(directions::DOWN);
 8009e62:	2101      	movs	r1, #1
 8009e64:	f7ff fe92 	bl	8009b8c <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but3->LogicState_ = LogicState::NONE;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e70:	e7e9      	b.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
		cd.NewDirection(directions::LEFT);
 8009e72:	2102      	movs	r1, #2
 8009e74:	f7ff fe8a 	bl	8009b8c <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but1->LogicState_ = LogicState::NONE;
 8009e78:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xbc>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e80:	e7e1      	b.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
	else if((but2->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::DOWN)){
 8009e82:	69c3      	ldr	r3, [r0, #28]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d10a      	bne.n	8009e9e <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x82>
	else if((but3->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::UP)){
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d0e7      	beq.n	8009e62 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x46>
	else if((but4->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::LEFT)){
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d1d4      	bne.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
 8009e9c:	e00f      	b.n	8009ebe <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xa2>
		cd.NewDirection(directions::UP);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	f7ff fe74 	bl	8009b8c <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but2->LogicState_ = LogicState::NONE;
 8009ea4:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc0>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8009eac:	e7cb      	b.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
	else if((but3->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::UP)){
 8009eae:	69c3      	ldr	r3, [r0, #28]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1d6      	bne.n	8009e62 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x46>
	else if((but4->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::LEFT)){
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d1c3      	bne.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
		cd.NewDirection(directions::RIGHT);
 8009ebe:	2103      	movs	r1, #3
 8009ec0:	f7ff fe64 	bl	8009b8c <_ZN5snake12ClassicSnake12NewDirectionENS_10directionsE>
		but4->LogicState_ = LogicState::NONE;
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xc8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ecc:	e7bb      	b.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
	else if((but4->LogicState_ == LogicState::WAS_PRESSED) && (cd.currentDir != directions::LEFT)){
 8009ece:	69c3      	ldr	r3, [r0, #28]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d0b8      	beq.n	8009e46 <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0x2a>
 8009ed4:	e7f3      	b.n	8009ebe <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE+0xa2>
 8009ed6:	bf00      	nop
 8009ed8:	20000880 	.word	0x20000880
 8009edc:	20000884 	.word	0x20000884
 8009ee0:	20000888 	.word	0x20000888
 8009ee4:	2000088c 	.word	0x2000088c

08009ee8 <_Z9SnakeTaskv>:

void SnakeTask()
{
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	b098      	sub	sp, #96	; 0x60
 8009eee:	2200      	movs	r2, #0
 8009ef0:	9214      	str	r2, [sp, #80]	; 0x50
 8009ef2:	9215      	str	r2, [sp, #84]	; 0x54
 8009ef4:	2314      	movs	r3, #20
 8009ef6:	9316      	str	r3, [sp, #88]	; 0x58
 8009ef8:	210f      	movs	r1, #15
 8009efa:	9117      	str	r1, [sp, #92]	; 0x5c
	ClassicSnake SnakeObj(Coordinate{0, 0}, Coordinate{20, 15},
			ILI9341_BLACK, ILI9341_GREEN, ILI9341_DARKRED, ILI9341_BLUE);
 8009efc:	241f      	movs	r4, #31
 8009efe:	9404      	str	r4, [sp, #16]
 8009f00:	f44f 4008 	mov.w	r0, #34816	; 0x8800
 8009f04:	9003      	str	r0, [sp, #12]
 8009f06:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8009f0a:	9002      	str	r0, [sp, #8]
 8009f0c:	9201      	str	r2, [sp, #4]
 8009f0e:	9100      	str	r1, [sp, #0]
 8009f10:	aa14      	add	r2, sp, #80	; 0x50
 8009f12:	ca06      	ldmia	r2, {r1, r2}
 8009f14:	a806      	add	r0, sp, #24
 8009f16:	f7ff feee 	bl	8009cf6 <_ZN5snake12ClassicSnakeC1E10CoordinateS1_tttt>
	uint32_t time = HAL_GetTick();
 8009f1a:	f7fe f873 	bl	8008004 <HAL_GetTick>
 8009f1e:	4605      	mov	r5, r0
	directions tmpDir;
	uint32_t currentDelay = INIT_SPEED_GAME;

	//SnakeInterface();
	tft_fillScreen(ILI9341_BLUE);
 8009f20:	4620      	mov	r0, r4
 8009f22:	f001 f9bb 	bl	800b29c <_Z14tft_fillScreent>

	printSnakeSquare(SnakeObj.fruitCoordinate);
 8009f26:	a80e      	add	r0, sp, #56	; 0x38
 8009f28:	f7ff ff61 	bl	8009dee <_Z16printSnakeSquareRN5snake9SnakeNodeE>
	uint32_t currentDelay = INIT_SPEED_GAME;
 8009f2c:	26c8      	movs	r6, #200	; 0xc8
			SnakeObj.GenerateNewFruit();
			SnakeObj.AddNodeToEnd();
			while(SnakeObj.CheckSnakeCollision(SnakeObj.fruitCoordinate))
				SnakeObj.GenerateNewFruit();
			printSnakeSquare(SnakeObj.fruitCoordinate);
			if(!((SnakeObj.mySnake.size() - 1) % 3) && (currentDelay != FINAL_SPEED_GAME))
 8009f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a004 <_Z9SnakeTaskv+0x11c>
 8009f32:	e023      	b.n	8009f7c <_Z9SnakeTaskv+0x94>
			SnakeObj.GenerateNewFruit();
 8009f34:	a806      	add	r0, sp, #24
 8009f36:	f7ff fec1 	bl	8009cbc <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
			SnakeObj.AddNodeToEnd();
 8009f3a:	a806      	add	r0, sp, #24
 8009f3c:	f7ff fe11 	bl	8009b62 <_ZN5snake12ClassicSnake12AddNodeToEndEv>
 8009f40:	e002      	b.n	8009f48 <_Z9SnakeTaskv+0x60>
				SnakeObj.GenerateNewFruit();
 8009f42:	a806      	add	r0, sp, #24
 8009f44:	f7ff feba 	bl	8009cbc <_ZN5snake12ClassicSnake16GenerateNewFruitEv>
			while(SnakeObj.CheckSnakeCollision(SnakeObj.fruitCoordinate))
 8009f48:	a90e      	add	r1, sp, #56	; 0x38
 8009f4a:	a806      	add	r0, sp, #24
 8009f4c:	f7ff fe20 	bl	8009b90 <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d1f6      	bne.n	8009f42 <_Z9SnakeTaskv+0x5a>
			printSnakeSquare(SnakeObj.fruitCoordinate);
 8009f54:	a80e      	add	r0, sp, #56	; 0x38
 8009f56:	f7ff ff4a 	bl	8009dee <_Z16printSnakeSquareRN5snake9SnakeNodeE>
			if(!((SnakeObj.mySnake.size() - 1) % 3) && (currentDelay != FINAL_SPEED_GAME))
 8009f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	fba8 2103 	umull	r2, r1, r8, r3
 8009f62:	f021 0201 	bic.w	r2, r1, #1
 8009f66:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d114      	bne.n	8009f98 <_Z9SnakeTaskv+0xb0>
 8009f6e:	2e64      	cmp	r6, #100	; 0x64
				currentDelay -= 25;
 8009f70:	bf18      	it	ne
 8009f72:	3e19      	subne	r6, #25
 8009f74:	e010      	b.n	8009f98 <_Z9SnakeTaskv+0xb0>
		while(computeTimeDuration(time) < currentDelay)
		{
			if(tmpDir == SnakeObj.currentDir)
				SnakeButtonHandler(SnakeObj);
		}
		time = HAL_GetTick();
 8009f76:	f7fe f845 	bl	8008004 <HAL_GetTick>
 8009f7a:	4605      	mov	r5, r0
	while(!SnakeObj.CheckSnakeCollision(*SnakeObj.mySnake.rbegin()))
 8009f7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f7e:	3108      	adds	r1, #8
 8009f80:	a806      	add	r0, sp, #24
 8009f82:	f7ff fe05 	bl	8009b90 <_ZNK5snake12ClassicSnake19CheckSnakeCollisionERKNS_9SnakeNodeE>
 8009f86:	bb00      	cbnz	r0, 8009fca <_Z9SnakeTaskv+0xe2>
		SnakeObj.Move();
 8009f88:	a806      	add	r0, sp, #24
 8009f8a:	f7ff fdbb 	bl	8009b04 <_ZN5snake12ClassicSnake4MoveEv>
		if(SnakeObj.CheckFruit())
 8009f8e:	a806      	add	r0, sp, #24
 8009f90:	f7ff fe1a 	bl	8009bc8 <_ZN5snake12ClassicSnake10CheckFruitEv>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d1cd      	bne.n	8009f34 <_Z9SnakeTaskv+0x4c>
      { return iterator(this->_M_impl._M_node._M_next); }
 8009f98:	9c11      	ldr	r4, [sp, #68]	; 0x44
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 8009f9a:	ab11      	add	r3, sp, #68	; 0x44
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	d007      	beq.n	8009fb0 <_Z9SnakeTaskv+0xc8>
 8009fa0:	461f      	mov	r7, r3
	__f(*__first);
 8009fa2:	f104 0008 	add.w	r0, r4, #8
 8009fa6:	f7ff ff22 	bl	8009dee <_Z16printSnakeSquareRN5snake9SnakeNodeE>
	_M_node = _M_node->_M_next;
 8009faa:	6824      	ldr	r4, [r4, #0]
      for (; __first != __last; ++__first)
 8009fac:	42bc      	cmp	r4, r7
 8009fae:	d1f8      	bne.n	8009fa2 <_Z9SnakeTaskv+0xba>
		tmpDir = SnakeObj.currentDir;
 8009fb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
		while(computeTimeDuration(time) < currentDelay)
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7ff fd2a 	bl	8009a0c <_Z19computeTimeDurationm>
 8009fb8:	42b0      	cmp	r0, r6
 8009fba:	d2dc      	bcs.n	8009f76 <_Z9SnakeTaskv+0x8e>
			if(tmpDir == SnakeObj.currentDir)
 8009fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	d1f7      	bne.n	8009fb2 <_Z9SnakeTaskv+0xca>
				SnakeButtonHandler(SnakeObj);
 8009fc2:	a806      	add	r0, sp, #24
 8009fc4:	f7ff ff2a 	bl	8009e1c <_Z18SnakeButtonHandlerRN5snake12ClassicSnakeE>
 8009fc8:	e7f3      	b.n	8009fb2 <_Z9SnakeTaskv+0xca>
	}
	while(but1->LogicState_ != LogicState::WAS_HOLDED)computeTimeDuration(time);
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <_Z9SnakeTaskv+0x120>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d007      	beq.n	8009fe4 <_Z9SnakeTaskv+0xfc>
 8009fd4:	4c0c      	ldr	r4, [pc, #48]	; (800a008 <_Z9SnakeTaskv+0x120>)
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7ff fd18 	bl	8009a0c <_Z19computeTimeDurationm>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d1f8      	bne.n	8009fd6 <_Z9SnakeTaskv+0xee>
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8009fe4:	9c11      	ldr	r4, [sp, #68]	; 0x44
      while (__cur != &_M_impl._M_node)
 8009fe6:	ab11      	add	r3, sp, #68	; 0x44
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	d008      	beq.n	8009ffe <_Z9SnakeTaskv+0x116>
	::operator delete(__p
 8009fec:	2614      	movs	r6, #20
 8009fee:	461d      	mov	r5, r3
 8009ff0:	4620      	mov	r0, r4
	  __cur = __tmp->_M_next;
 8009ff2:	6824      	ldr	r4, [r4, #0]
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	f002 faa1 	bl	800c53c <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8009ffa:	42ac      	cmp	r4, r5
 8009ffc:	d1f8      	bne.n	8009ff0 <_Z9SnakeTaskv+0x108>
}
 8009ffe:	b018      	add	sp, #96	; 0x60
 800a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a004:	aaaaaaab 	.word	0xaaaaaaab
 800a008:	20000880 	.word	0x20000880

0800a00c <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager>:
			itEnd = itBeg + COL_OF_FIELD;
		}
	}
}

TetrisFigure::TetrisFigure(block_t&& figure_, Coordinate coordFigure_, size_t sideFigure_, color_t colorFigure, TetrisManager& manager_)
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00e:	b083      	sub	sp, #12
 800a010:	4604      	mov	r4, r0
 800a012:	a802      	add	r0, sp, #8
 800a014:	e900 000c 	stmdb	r0, {r2, r3}
 800a018:	9d09      	ldr	r5, [sp, #36]	; 0x24
	{ }

#if __cplusplus >= 201103L
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
	  _M_end_of_storage(__x._M_end_of_storage)
 800a01a:	680f      	ldr	r7, [r1, #0]
 800a01c:	6027      	str	r7, [r4, #0]
 800a01e:	684a      	ldr	r2, [r1, #4]
 800a020:	6062      	str	r2, [r4, #4]
 800a022:	688b      	ldr	r3, [r1, #8]
 800a024:	60a3      	str	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800a026:	2300      	movs	r3, #0
 800a028:	608b      	str	r3, [r1, #8]
 800a02a:	604b      	str	r3, [r1, #4]
 800a02c:	600b      	str	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a02e:	60e3      	str	r3, [r4, #12]
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	6163      	str	r3, [r4, #20]
 800a034:	61a3      	str	r3, [r4, #24]
 800a036:	61e3      	str	r3, [r4, #28]
 800a038:	6223      	str	r3, [r4, #32]

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a03a:	1bd7      	subs	r7, r2, r7
 800a03c:	d02f      	beq.n	800a09e <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x92>
	if (__n > this->_M_max_size())
 800a03e:	4b28      	ldr	r3, [pc, #160]	; (800a0e0 <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0xd4>)
 800a040:	429f      	cmp	r7, r3
 800a042:	d82a      	bhi.n	800a09a <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x8e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a044:	4638      	mov	r0, r7
 800a046:	f002 fa7b 	bl	800c540 <_Znwj>
 800a04a:	4606      	mov	r6, r0

    protected:
      void
      _M_create_storage(size_t __n)
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
 800a04c:	61a6      	str	r6, [r4, #24]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800a04e:	61e6      	str	r6, [r4, #28]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a050:	4437      	add	r7, r6
 800a052:	6227      	str	r7, [r4, #32]
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	6867      	ldr	r7, [r4, #4]
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
 800a058:	42bb      	cmp	r3, r7
 800a05a:	d02e      	beq.n	800a0ba <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0xae>
 800a05c:	eba7 0e03 	sub.w	lr, r7, r3
 800a060:	2200      	movs	r2, #0
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800a062:	eb06 0c02 	add.w	ip, r6, r2
 800a066:	1899      	adds	r1, r3, r2
 800a068:	c903      	ldmia	r1, {r0, r1}
 800a06a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a06e:	3208      	adds	r2, #8
 800a070:	4572      	cmp	r2, lr
 800a072:	d1f6      	bne.n	800a062 <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x56>
 800a074:	4476      	add	r6, lr
       */
      vector(const vector& __x)
      : _Base(__x.size(),
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
	this->_M_impl._M_finish =
 800a076:	61e6      	str	r6, [r4, #28]
	: figure(std::move(figure_)), initFigure(figure), coord(coordFigure_), initCoord(coordFigure_), manager(manager_), side(sideFigure_)
 800a078:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800a07c:	466e      	mov	r6, sp
 800a07e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a082:	e882 0003 	stmia.w	r2, {r0, r1}
 800a086:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800a08a:	e882 0003 	stmia.w	r2, {r0, r1}
 800a08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a090:	6362      	str	r2, [r4, #52]	; 0x34
 800a092:	9a08      	ldr	r2, [sp, #32]
 800a094:	63a2      	str	r2, [r4, #56]	; 0x38
 800a096:	3308      	adds	r3, #8
 800a098:	e008      	b.n	800a0ac <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0xa0>
	  std::__throw_bad_alloc();
 800a09a:	f002 fa7d 	bl	800c598 <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a09e:	2600      	movs	r6, #0
 800a0a0:	e7d4      	b.n	800a04c <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x40>
 800a0a2:	f103 0208 	add.w	r2, r3, #8
 800a0a6:	42bb      	cmp	r3, r7
 800a0a8:	d017      	beq.n	800a0da <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0xce>
 800a0aa:	4613      	mov	r3, r2
{
	std::for_each(figure.begin(), figure.end(), [&](auto& part)
		{if (part.isFeeled) part.color = colorFigure; });
 800a0ac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d0f6      	beq.n	800a0a2 <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x96>
 800a0b4:	f843 5c04 	str.w	r5, [r3, #-4]
 800a0b8:	e7f3      	b.n	800a0a2 <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager+0x96>
	this->_M_impl._M_finish =
 800a0ba:	61e6      	str	r6, [r4, #28]
	: figure(std::move(figure_)), initFigure(figure), coord(coordFigure_), initCoord(coordFigure_), manager(manager_), side(sideFigure_)
 800a0bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800a0c0:	466a      	mov	r2, sp
 800a0c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0c6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a0ca:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800a0ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0d6:	9b08      	ldr	r3, [sp, #32]
 800a0d8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a0da:	4620      	mov	r0, r4
 800a0dc:	b003      	add	sp, #12
 800a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e0:	7ffffff8 	.word	0x7ffffff8

0800a0e4 <_ZN12TetrisFigure23isContainsUnitInColumneEj>:
	}
	return returnStatus;
}

bool TetrisFigure::isContainsUnitInColumne(size_t icol)
{
 800a0e4:	b470      	push	{r4, r5, r6}
 800a0e6:	6804      	ldr	r4, [r0, #0]
 800a0e8:	6846      	ldr	r6, [r0, #4]
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800a0ea:	eba6 0c04 	sub.w	ip, r6, r4
	__trip_count = (__last - __first) >> 2;
 800a0ee:	ea4f 1c6c 	mov.w	ip, ip, asr #5
      for (; __trip_count > 0; --__trip_count)
 800a0f2:	f1bc 0f00 	cmp.w	ip, #0
 800a0f6:	dd33      	ble.n	800a160 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x7c>
	size_t irow = 0;
	auto lambd1 = [&](auto& block)
	{
		if (irow == side) irow = 0;
 800a0f8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800a0fa:	eb04 1c4c 	add.w	ip, r4, ip, lsl #5
	size_t irow = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e011      	b.n	800a126 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x42>
	  if (__pred(__first))
 800a102:	7823      	ldrb	r3, [r4, #0]
 800a104:	b1ab      	cbz	r3, 800a132 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x4e>
		if (irow++ == icol) return !block.isFeeled;
		else return true;
	};
	return !std::all_of(figure.begin(), figure.end(), lambd1);
}
 800a106:	1b30      	subs	r0, r6, r4
 800a108:	bf18      	it	ne
 800a10a:	2001      	movne	r0, #1
 800a10c:	bc70      	pop	{r4, r5, r6}
 800a10e:	4770      	bx	lr
	  if (__pred(__first))
 800a110:	7a22      	ldrb	r2, [r4, #8]
 800a112:	b1a2      	cbz	r2, 800a13e <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x5a>
	++_M_current;
 800a114:	3408      	adds	r4, #8
	    return __first;
 800a116:	e7f6      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
	  if (__pred(__first))
 800a118:	7c23      	ldrb	r3, [r4, #16]
 800a11a:	b1b3      	cbz	r3, 800a14a <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x66>
 800a11c:	3410      	adds	r4, #16
	    return __first;
 800a11e:	e7f2      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
      operator++() _GLIBCXX_NOEXCEPT
 800a120:	3420      	adds	r4, #32
      for (; __trip_count > 0; --__trip_count)
 800a122:	4564      	cmp	r4, ip
 800a124:	d01d      	beq.n	800a162 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x7e>
		if (irow == side) irow = 0;
 800a126:	42ab      	cmp	r3, r5
 800a128:	bf08      	it	eq
 800a12a:	2300      	moveq	r3, #0
		if (irow++ == icol) return !block.isFeeled;
 800a12c:	1c5a      	adds	r2, r3, #1
 800a12e:	428b      	cmp	r3, r1
 800a130:	d0e7      	beq.n	800a102 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x1e>
		if (irow == side) irow = 0;
 800a132:	4295      	cmp	r5, r2
 800a134:	bf08      	it	eq
 800a136:	2200      	moveq	r2, #0
		if (irow++ == icol) return !block.isFeeled;
 800a138:	1c53      	adds	r3, r2, #1
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d0e8      	beq.n	800a110 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x2c>
		if (irow == side) irow = 0;
 800a13e:	429d      	cmp	r5, r3
 800a140:	bf08      	it	eq
 800a142:	2300      	moveq	r3, #0
		if (irow++ == icol) return !block.isFeeled;
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	4299      	cmp	r1, r3
 800a148:	d0e6      	beq.n	800a118 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x34>
		if (irow == side) irow = 0;
 800a14a:	4295      	cmp	r5, r2
 800a14c:	bf08      	it	eq
 800a14e:	2200      	moveq	r2, #0
		if (irow++ == icol) return !block.isFeeled;
 800a150:	1c53      	adds	r3, r2, #1
 800a152:	428a      	cmp	r2, r1
 800a154:	d1e4      	bne.n	800a120 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x3c>
	  if (__pred(__first))
 800a156:	7e22      	ldrb	r2, [r4, #24]
 800a158:	2a00      	cmp	r2, #0
 800a15a:	d0e1      	beq.n	800a120 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x3c>
	++_M_current;
 800a15c:	3418      	adds	r4, #24
	    return __first;
 800a15e:	e7d2      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
	size_t irow = 0;
 800a160:	2300      	movs	r3, #0
    { return __lhs.base() - __rhs.base(); }
 800a162:	1b32      	subs	r2, r6, r4
      switch (__last - __first)
 800a164:	2a10      	cmp	r2, #16
 800a166:	d00d      	beq.n	800a184 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xa0>
 800a168:	2a18      	cmp	r2, #24
 800a16a:	d003      	beq.n	800a174 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x90>
 800a16c:	2a08      	cmp	r2, #8
 800a16e:	d011      	beq.n	800a194 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xb0>
 800a170:	4634      	mov	r4, r6
 800a172:	e7c8      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
		if (irow == side) irow = 0;
 800a174:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a176:	429a      	cmp	r2, r3
 800a178:	bf08      	it	eq
 800a17a:	2300      	moveq	r3, #0
		if (irow++ == icol) return !block.isFeeled;
 800a17c:	4299      	cmp	r1, r3
 800a17e:	d011      	beq.n	800a1a4 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xc0>
 800a180:	3301      	adds	r3, #1
	++_M_current;
 800a182:	3408      	adds	r4, #8
		if (irow == side) irow = 0;
 800a184:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a186:	429a      	cmp	r2, r3
 800a188:	bf08      	it	eq
 800a18a:	2300      	moveq	r3, #0
		if (irow++ == icol) return !block.isFeeled;
 800a18c:	428b      	cmp	r3, r1
 800a18e:	d00d      	beq.n	800a1ac <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xc8>
 800a190:	3301      	adds	r3, #1
 800a192:	3408      	adds	r4, #8
		if (irow == side) irow = 0;
 800a194:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a196:	4293      	cmp	r3, r2
 800a198:	bf08      	it	eq
 800a19a:	2300      	moveq	r3, #0
		if (irow++ == icol) return !block.isFeeled;
 800a19c:	428b      	cmp	r3, r1
 800a19e:	d009      	beq.n	800a1b4 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xd0>
	  return __last;
 800a1a0:	4634      	mov	r4, r6
 800a1a2:	e7b0      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
	  if (__pred(__first))
 800a1a4:	7822      	ldrb	r2, [r4, #0]
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	d1ad      	bne.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
 800a1aa:	e7e9      	b.n	800a180 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x9c>
	  if (__pred(__first))
 800a1ac:	7822      	ldrb	r2, [r4, #0]
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d1a9      	bne.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>
 800a1b2:	e7ed      	b.n	800a190 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0xac>
	  if (__pred(__first))
 800a1b4:	7823      	ldrb	r3, [r4, #0]
	  return __last;
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bf08      	it	eq
 800a1ba:	4634      	moveq	r4, r6
 800a1bc:	e7a3      	b.n	800a106 <_ZN12TetrisFigure23isContainsUnitInColumneEj+0x22>

0800a1be <_ZN12TetrisFigure19isContainsUnitInRowEj>:
bool TetrisFigure::isContainsUnitInRow(size_t irow)
{
 800a1be:	b5f0      	push	{r4, r5, r6, r7, lr}
      : _M_current(__i) { }
 800a1c0:	6804      	ldr	r4, [r0, #0]
 800a1c2:	6846      	ldr	r6, [r0, #4]
    { return __lhs.base() - __rhs.base(); }
 800a1c4:	1b35      	subs	r5, r6, r4
	__trip_count = (__last - __first) >> 2;
 800a1c6:	116d      	asrs	r5, r5, #5
      for (; __trip_count > 0; --__trip_count)
 800a1c8:	2d00      	cmp	r5, #0
 800a1ca:	dd30      	ble.n	800a22e <_ZN12TetrisFigure19isContainsUnitInRowEj+0x70>
	size_t counter = 0;
	auto lambd2 = [&](auto& block)
	{
		if (irow == size_t(counter++ / side)) return !block.isFeeled;
 800a1cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a1ce:	00ad      	lsls	r5, r5, #2
	size_t counter = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e010      	b.n	800a1f6 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x38>
	  if (__pred(__first))
 800a1d4:	7827      	ldrb	r7, [r4, #0]
 800a1d6:	b1a7      	cbz	r7, 800a202 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x44>
		else return true;
	};
	return !std::all_of(figure.begin(), figure.end(), lambd2);
}
 800a1d8:	1b30      	subs	r0, r6, r4
 800a1da:	bf18      	it	ne
 800a1dc:	2001      	movne	r0, #1
 800a1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if (__pred(__first))
 800a1e0:	7a27      	ldrb	r7, [r4, #8]
 800a1e2:	b1a7      	cbz	r7, 800a20e <_ZN12TetrisFigure19isContainsUnitInRowEj+0x50>
	++_M_current;
 800a1e4:	3408      	adds	r4, #8
	    return __first;
 800a1e6:	e7f7      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
	  if (__pred(__first))
 800a1e8:	7c27      	ldrb	r7, [r4, #16]
 800a1ea:	b1b7      	cbz	r7, 800a21a <_ZN12TetrisFigure19isContainsUnitInRowEj+0x5c>
 800a1ec:	3410      	adds	r4, #16
	    return __first;
 800a1ee:	e7f3      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
      operator++() _GLIBCXX_NOEXCEPT
 800a1f0:	3420      	adds	r4, #32
      for (; __trip_count > 0; --__trip_count)
 800a1f2:	42ab      	cmp	r3, r5
 800a1f4:	d01c      	beq.n	800a230 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x72>
		if (irow == size_t(counter++ / side)) return !block.isFeeled;
 800a1f6:	f103 0c01 	add.w	ip, r3, #1
 800a1fa:	fbb3 fef2 	udiv	lr, r3, r2
 800a1fe:	458e      	cmp	lr, r1
 800a200:	d0e8      	beq.n	800a1d4 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x16>
 800a202:	f103 0e02 	add.w	lr, r3, #2
 800a206:	fbbc fcf2 	udiv	ip, ip, r2
 800a20a:	458c      	cmp	ip, r1
 800a20c:	d0e8      	beq.n	800a1e0 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x22>
 800a20e:	f103 0c03 	add.w	ip, r3, #3
 800a212:	fbbe fef2 	udiv	lr, lr, r2
 800a216:	458e      	cmp	lr, r1
 800a218:	d0e6      	beq.n	800a1e8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x2a>
 800a21a:	3304      	adds	r3, #4
 800a21c:	fbbc fcf2 	udiv	ip, ip, r2
 800a220:	458c      	cmp	ip, r1
 800a222:	d1e5      	bne.n	800a1f0 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x32>
	  if (__pred(__first))
 800a224:	7e27      	ldrb	r7, [r4, #24]
 800a226:	2f00      	cmp	r7, #0
 800a228:	d0e2      	beq.n	800a1f0 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x32>
	++_M_current;
 800a22a:	3418      	adds	r4, #24
	    return __first;
 800a22c:	e7d4      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
	size_t counter = 0;
 800a22e:	2500      	movs	r5, #0
    { return __lhs.base() - __rhs.base(); }
 800a230:	1b33      	subs	r3, r6, r4
      switch (__last - __first)
 800a232:	2b10      	cmp	r3, #16
 800a234:	d00c      	beq.n	800a250 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x92>
 800a236:	2b18      	cmp	r3, #24
 800a238:	d003      	beq.n	800a242 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x84>
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d00f      	beq.n	800a25e <_ZN12TetrisFigure19isContainsUnitInRowEj+0xa0>
 800a23e:	4634      	mov	r4, r6
 800a240:	e7ca      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
		if (irow == size_t(counter++ / side)) return !block.isFeeled;
 800a242:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a244:	fbb5 f3f3 	udiv	r3, r5, r3
 800a248:	428b      	cmp	r3, r1
 800a24a:	d00f      	beq.n	800a26c <_ZN12TetrisFigure19isContainsUnitInRowEj+0xae>
 800a24c:	3501      	adds	r5, #1
	++_M_current;
 800a24e:	3408      	adds	r4, #8
 800a250:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a252:	fbb5 f3f3 	udiv	r3, r5, r3
 800a256:	428b      	cmp	r3, r1
 800a258:	d00c      	beq.n	800a274 <_ZN12TetrisFigure19isContainsUnitInRowEj+0xb6>
 800a25a:	3501      	adds	r5, #1
 800a25c:	3408      	adds	r4, #8
 800a25e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a260:	fbb5 f5f3 	udiv	r5, r5, r3
 800a264:	428d      	cmp	r5, r1
 800a266:	d009      	beq.n	800a27c <_ZN12TetrisFigure19isContainsUnitInRowEj+0xbe>
	  return __last;
 800a268:	4634      	mov	r4, r6
 800a26a:	e7b5      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
	  if (__pred(__first))
 800a26c:	7823      	ldrb	r3, [r4, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1b2      	bne.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
 800a272:	e7eb      	b.n	800a24c <_ZN12TetrisFigure19isContainsUnitInRowEj+0x8e>
	  if (__pred(__first))
 800a274:	7823      	ldrb	r3, [r4, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1ae      	bne.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>
 800a27a:	e7ee      	b.n	800a25a <_ZN12TetrisFigure19isContainsUnitInRowEj+0x9c>
	  if (__pred(__first))
 800a27c:	7823      	ldrb	r3, [r4, #0]
	  return __last;
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bf08      	it	eq
 800a282:	4634      	moveq	r4, r6
 800a284:	e7a8      	b.n	800a1d8 <_ZN12TetrisFigure19isContainsUnitInRowEj+0x1a>

0800a286 <_ZN12TetrisFigure15CheckBoundariesEv>:
{
 800a286:	b538      	push	{r3, r4, r5, lr}
 800a288:	4604      	mov	r4, r0
	if ((coord.Y + side - 1) >= ROW_OF_FIELD)
 800a28a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a28c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a28e:	3b01      	subs	r3, #1
 800a290:	18ea      	adds	r2, r5, r3
 800a292:	2a18      	cmp	r2, #24
 800a294:	d807      	bhi.n	800a2a6 <_ZN12TetrisFigure15CheckBoundariesEv+0x20>
	else if (coord.X < 0)
 800a296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a298:	2d00      	cmp	r5, #0
 800a29a:	db0d      	blt.n	800a2b8 <_ZN12TetrisFigure15CheckBoundariesEv+0x32>
	else if ((coord.X + side - 1) >= COL_OF_FIELD)
 800a29c:	442b      	add	r3, r5
 800a29e:	2b0f      	cmp	r3, #15
 800a2a0:	d816      	bhi.n	800a2d0 <_ZN12TetrisFigure15CheckBoundariesEv+0x4a>
	bool returnStatus = false;
 800a2a2:	2000      	movs	r0, #0
}
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
		if (isContainsUnitInRow((ROW_OF_FIELD - (coord.Y + (side - 1)) + (side - 1))))
 800a2a6:	f1c5 0119 	rsb	r1, r5, #25
 800a2aa:	f7ff ff88 	bl	800a1be <_ZN12TetrisFigure19isContainsUnitInRowEj>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0f8      	beq.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>
			coord.Y -= 1; returnStatus = true;
 800a2b2:	3d01      	subs	r5, #1
 800a2b4:	62a5      	str	r5, [r4, #40]	; 0x28
 800a2b6:	e7f5      	b.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>
		if (isContainsUnitInColumne(abs(coord.X) - 1))
 800a2b8:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 800a2bc:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 800a2c0:	3901      	subs	r1, #1
 800a2c2:	f7ff ff0f 	bl	800a0e4 <_ZN12TetrisFigure23isContainsUnitInColumneEj>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0ec      	beq.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>
			coord.X += 1; returnStatus = true;
 800a2ca:	3501      	adds	r5, #1
 800a2cc:	6265      	str	r5, [r4, #36]	; 0x24
 800a2ce:	e7e9      	b.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>
		if (isContainsUnitInColumne((COL_OF_FIELD - (coord.X + (side - 1)) + (side - 1))))
 800a2d0:	f1c5 0110 	rsb	r1, r5, #16
 800a2d4:	f7ff ff06 	bl	800a0e4 <_ZN12TetrisFigure23isContainsUnitInColumneEj>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0e3      	beq.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>
			coord.X -= 1; returnStatus = true;
 800a2dc:	3d01      	subs	r5, #1
 800a2de:	6265      	str	r5, [r4, #36]	; 0x24
 800a2e0:	e7e0      	b.n	800a2a4 <_ZN12TetrisFigure15CheckBoundariesEv+0x1e>

0800a2e2 <_ZN12TetrisFigure20isIntersectionBlocksEv>:
bool TetrisFigure::isIntersectionBlocks()
{
 800a2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
      : _M_current(__i) { }
 800a2e4:	6803      	ldr	r3, [r0, #0]
 800a2e6:	6844      	ldr	r4, [r0, #4]
    { return __lhs.base() - __rhs.base(); }
 800a2e8:	eba4 0c03 	sub.w	ip, r4, r3
	__trip_count = (__last - __first) >> 2;
 800a2ec:	ea4f 1c6c 	mov.w	ip, ip, asr #5
      for (; __trip_count > 0; --__trip_count)
 800a2f0:	f1bc 0f00 	cmp.w	ip, #0
 800a2f4:	dd17      	ble.n	800a326 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x44>
		flag = false;
		if (block.isFeeled) {
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
				flag = true;
		}
		if (++col == side) { ++row, col = 0; }
 800a2f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a2f8:	eb03 1c4c 	add.w	ip, r3, ip, lsl #5
	size_t row = 0, col = 0;
 800a2fc:	2500      	movs	r5, #0
 800a2fe:	462a      	mov	r2, r5
		if (++col == side) { ++row, col = 0; }
 800a300:	46ae      	mov	lr, r5
 800a302:	e06e      	b.n	800a3e2 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x100>
 800a304:	4676      	mov	r6, lr
 800a306:	e0d2      	b.n	800a4ae <_ZN12TetrisFigure20isIntersectionBlocksEv+0x1cc>
 800a308:	4676      	mov	r6, lr
 800a30a:	e0c6      	b.n	800a49a <_ZN12TetrisFigure20isIntersectionBlocksEv+0x1b8>
	++_M_current;
 800a30c:	3308      	adds	r3, #8
		return flag;
	};
	return std::any_of(figure.begin(), figure.end(), lambd3);
 800a30e:	1ae0      	subs	r0, r4, r3
 800a310:	bf18      	it	ne
 800a312:	2001      	movne	r0, #1
}
 800a314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (++col == side) { ++row, col = 0; }
 800a316:	4676      	mov	r6, lr
 800a318:	e0b5      	b.n	800a486 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x1a4>
 800a31a:	3310      	adds	r3, #16
	    return __first;
 800a31c:	e7f7      	b.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a31e:	4676      	mov	r6, lr
 800a320:	e0a7      	b.n	800a472 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x190>
 800a322:	3318      	adds	r3, #24
	    return __first;
 800a324:	e7f3      	b.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
	size_t row = 0, col = 0;
 800a326:	2500      	movs	r5, #0
 800a328:	462a      	mov	r2, r5
    { return __lhs.base() - __rhs.base(); }
 800a32a:	1ae1      	subs	r1, r4, r3
      switch (__last - __first)
 800a32c:	2910      	cmp	r1, #16
 800a32e:	d018      	beq.n	800a362 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x80>
 800a330:	2918      	cmp	r1, #24
 800a332:	d003      	beq.n	800a33c <_ZN12TetrisFigure20isIntersectionBlocksEv+0x5a>
 800a334:	2908      	cmp	r1, #8
 800a336:	d026      	beq.n	800a386 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xa4>
 800a338:	4623      	mov	r3, r4
 800a33a:	e7e8      	b.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
		if (block.isFeeled) {
 800a33c:	7819      	ldrb	r1, [r3, #0]
 800a33e:	b159      	cbz	r1, 800a358 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x76>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800a340:	6b46      	ldr	r6, [r0, #52]	; 0x34
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a342:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a344:	1857      	adds	r7, r2, r1
 800a346:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a348:	4429      	add	r1, r5
 800a34a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a34e:	6836      	ldr	r6, [r6, #0]
 800a350:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
 800a354:	2900      	cmp	r1, #0
 800a356:	d139      	bne.n	800a3cc <_ZN12TetrisFigure20isIntersectionBlocksEv+0xea>
		if (++col == side) { ++row, col = 0; }
 800a358:	3501      	adds	r5, #1
 800a35a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a35c:	42a9      	cmp	r1, r5
 800a35e:	d022      	beq.n	800a3a6 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xc4>
	++_M_current;
 800a360:	3308      	adds	r3, #8
		if (block.isFeeled) {
 800a362:	7819      	ldrb	r1, [r3, #0]
 800a364:	b151      	cbz	r1, 800a37c <_ZN12TetrisFigure20isIntersectionBlocksEv+0x9a>
 800a366:	6b46      	ldr	r6, [r0, #52]	; 0x34
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a368:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a36a:	1857      	adds	r7, r2, r1
 800a36c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a36e:	4429      	add	r1, r5
 800a370:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a374:	6836      	ldr	r6, [r6, #0]
 800a376:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
 800a37a:	bb11      	cbnz	r1, 800a3c2 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xe0>
		if (++col == side) { ++row, col = 0; }
 800a37c:	3501      	adds	r5, #1
 800a37e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a380:	42a9      	cmp	r1, r5
 800a382:	d016      	beq.n	800a3b2 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xd0>
 800a384:	3308      	adds	r3, #8
		if (block.isFeeled) {
 800a386:	7819      	ldrb	r1, [r3, #0]
 800a388:	b1c9      	cbz	r1, 800a3be <_ZN12TetrisFigure20isIntersectionBlocksEv+0xdc>
 800a38a:	6b46      	ldr	r6, [r0, #52]	; 0x34
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a38c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a38e:	4411      	add	r1, r2
 800a390:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a392:	442a      	add	r2, r5
 800a394:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a398:	6831      	ldr	r1, [r6, #0]
 800a39a:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
	  return __last;
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	bf08      	it	eq
 800a3a2:	4623      	moveq	r3, r4
 800a3a4:	e7b3      	b.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
		if (++col == side) { ++row, col = 0; }
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	d1af      	bne.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	e7d6      	b.n	800a360 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x7e>
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d1a9      	bne.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	e7e2      	b.n	800a384 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xa2>
	  return __last;
 800a3be:	4623      	mov	r3, r4
 800a3c0:	e7a5      	b.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a3c2:	3501      	adds	r5, #1
 800a3c4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800a3c6:	42b5      	cmp	r5, r6
 800a3c8:	d1a1      	bne.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a3ca:	e7f3      	b.n	800a3b4 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xd2>
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800a3d0:	42b5      	cmp	r5, r6
 800a3d2:	d19c      	bne.n	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a3d4:	e7e8      	b.n	800a3a8 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xc6>
 800a3d6:	3501      	adds	r5, #1
 800a3d8:	42a9      	cmp	r1, r5
 800a3da:	d0a0      	beq.n	800a31e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x3c>
      operator++() _GLIBCXX_NOEXCEPT
 800a3dc:	3320      	adds	r3, #32
      for (; __trip_count > 0; --__trip_count)
 800a3de:	4563      	cmp	r3, ip
 800a3e0:	d0a3      	beq.n	800a32a <_ZN12TetrisFigure20isIntersectionBlocksEv+0x48>
		if (block.isFeeled) {
 800a3e2:	781e      	ldrb	r6, [r3, #0]
 800a3e4:	b15e      	cbz	r6, 800a3fe <_ZN12TetrisFigure20isIntersectionBlocksEv+0x11c>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a3e6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a3e8:	4417      	add	r7, r2
 800a3ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3ec:	442e      	add	r6, r5
 800a3ee:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800a3f2:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800a3f4:	683f      	ldr	r7, [r7, #0]
 800a3f6:	f817 6036 	ldrb.w	r6, [r7, r6, lsl #3]
 800a3fa:	2e00      	cmp	r6, #0
 800a3fc:	d153      	bne.n	800a4a6 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x1c4>
		if (++col == side) { ++row, col = 0; }
 800a3fe:	3501      	adds	r5, #1
 800a400:	42a9      	cmp	r1, r5
 800a402:	f43f af7f 	beq.w	800a304 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x22>
		if (block.isFeeled) {
 800a406:	7a1e      	ldrb	r6, [r3, #8]
 800a408:	b15e      	cbz	r6, 800a422 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x140>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a40a:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a40c:	4417      	add	r7, r2
 800a40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a410:	442e      	add	r6, r5
 800a412:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800a416:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800a418:	683f      	ldr	r7, [r7, #0]
 800a41a:	f817 6036 	ldrb.w	r6, [r7, r6, lsl #3]
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d137      	bne.n	800a492 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x1b0>
		if (++col == side) { ++row, col = 0; }
 800a422:	3501      	adds	r5, #1
 800a424:	42a9      	cmp	r1, r5
 800a426:	f43f af6f 	beq.w	800a308 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x26>
		if (block.isFeeled) {
 800a42a:	7c1e      	ldrb	r6, [r3, #16]
 800a42c:	b156      	cbz	r6, 800a444 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x162>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a42e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a430:	4417      	add	r7, r2
 800a432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a434:	442e      	add	r6, r5
 800a436:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800a43a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800a43c:	683f      	ldr	r7, [r7, #0]
 800a43e:	f817 6036 	ldrb.w	r6, [r7, r6, lsl #3]
 800a442:	b9e6      	cbnz	r6, 800a47e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x19c>
		if (++col == side) { ++row, col = 0; }
 800a444:	3501      	adds	r5, #1
 800a446:	42a9      	cmp	r1, r5
 800a448:	f43f af65 	beq.w	800a316 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x34>
		if (block.isFeeled) {
 800a44c:	7e1e      	ldrb	r6, [r3, #24]
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d0c1      	beq.n	800a3d6 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xf4>
			if (manager.field[((coord.Y + row) * COL_OF_FIELD) + coord.X + col].isFeeled)
 800a452:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a454:	4417      	add	r7, r2
 800a456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a458:	442e      	add	r6, r5
 800a45a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800a45e:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800a460:	683f      	ldr	r7, [r7, #0]
 800a462:	f817 6036 	ldrb.w	r6, [r7, r6, lsl #3]
 800a466:	2e00      	cmp	r6, #0
 800a468:	d0b5      	beq.n	800a3d6 <_ZN12TetrisFigure20isIntersectionBlocksEv+0xf4>
		if (++col == side) { ++row, col = 0; }
 800a46a:	3501      	adds	r5, #1
 800a46c:	42a9      	cmp	r1, r5
 800a46e:	f47f af58 	bne.w	800a322 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x40>
 800a472:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a474:	2e00      	cmp	r6, #0
 800a476:	f47f af54 	bne.w	800a322 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x40>
 800a47a:	2500      	movs	r5, #0
 800a47c:	e7ae      	b.n	800a3dc <_ZN12TetrisFigure20isIntersectionBlocksEv+0xfa>
 800a47e:	3501      	adds	r5, #1
 800a480:	42a9      	cmp	r1, r5
 800a482:	f47f af4a 	bne.w	800a31a <_ZN12TetrisFigure20isIntersectionBlocksEv+0x38>
 800a486:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a488:	2e00      	cmp	r6, #0
 800a48a:	f47f af46 	bne.w	800a31a <_ZN12TetrisFigure20isIntersectionBlocksEv+0x38>
 800a48e:	4675      	mov	r5, lr
 800a490:	e7dc      	b.n	800a44c <_ZN12TetrisFigure20isIntersectionBlocksEv+0x16a>
 800a492:	3501      	adds	r5, #1
 800a494:	42a9      	cmp	r1, r5
 800a496:	f47f af39 	bne.w	800a30c <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2a>
 800a49a:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	f47f af35 	bne.w	800a30c <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2a>
 800a4a2:	4675      	mov	r5, lr
 800a4a4:	e7c1      	b.n	800a42a <_ZN12TetrisFigure20isIntersectionBlocksEv+0x148>
 800a4a6:	3501      	adds	r5, #1
 800a4a8:	42a9      	cmp	r1, r5
 800a4aa:	f47f af30 	bne.w	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a4ae:	3201      	adds	r2, #1
	  if (__pred(__first))
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	f47f af2c 	bne.w	800a30e <_ZN12TetrisFigure20isIntersectionBlocksEv+0x2c>
 800a4b6:	4675      	mov	r5, lr
 800a4b8:	e7a5      	b.n	800a406 <_ZN12TetrisFigure20isIntersectionBlocksEv+0x124>

0800a4ba <_ZN12TetrisFigure16MoveHorizontallyE10Directions>:
{
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	4604      	mov	r4, r0
	auto tmpCoord = coord;
 800a4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4c0:	6a86      	ldr	r6, [r0, #40]	; 0x28
	switch (direction)
 800a4c2:	b111      	cbz	r1, 800a4ca <_ZN12TetrisFigure16MoveHorizontallyE10Directions+0x10>
 800a4c4:	2901      	cmp	r1, #1
 800a4c6:	d00d      	beq.n	800a4e4 <_ZN12TetrisFigure16MoveHorizontallyE10Directions+0x2a>
}
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
	case Directions::LEFT: --coord.X; break;
 800a4ca:	1e6b      	subs	r3, r5, #1
 800a4cc:	6243      	str	r3, [r0, #36]	; 0x24
	CheckBoundaries();
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7ff fed9 	bl	800a286 <_ZN12TetrisFigure15CheckBoundariesEv>
	if (isIntersectionBlocks()) coord = tmpCoord;
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f7ff ff04 	bl	800a2e2 <_ZN12TetrisFigure20isIntersectionBlocksEv>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0f4      	beq.n	800a4c8 <_ZN12TetrisFigure16MoveHorizontallyE10Directions+0xe>
 800a4de:	6265      	str	r5, [r4, #36]	; 0x24
 800a4e0:	62a6      	str	r6, [r4, #40]	; 0x28
 800a4e2:	e7f1      	b.n	800a4c8 <_ZN12TetrisFigure16MoveHorizontallyE10Directions+0xe>
	case Directions::RIGHT: ++coord.X; break;
 800a4e4:	1c6b      	adds	r3, r5, #1
 800a4e6:	6243      	str	r3, [r0, #36]	; 0x24
 800a4e8:	e7f1      	b.n	800a4ce <_ZN12TetrisFigure16MoveHorizontallyE10Directions+0x14>

0800a4ea <_ZN12TetrisFigure15FillFieldFigureEv>:

void TetrisFigure::FillFieldFigure()
{
 800a4ea:	b530      	push	{r4, r5, lr}
      : _M_current(__i) { }
 800a4ec:	6803      	ldr	r3, [r0, #0]
 800a4ee:	6845      	ldr	r5, [r0, #4]
 800a4f0:	429d      	cmp	r5, r3
 800a4f2:	d028      	beq.n	800a546 <_ZN12TetrisFigure15FillFieldFigureEv+0x5c>
 800a4f4:	3308      	adds	r3, #8
	size_t row = 0, col = 0;
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4694      	mov	ip, r2
	auto lambd4 = [&](auto& block)
	{
		if (block.isFeeled)
		{
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
			manager.field[index].isFeeled = true;
 800a4fa:	f04f 0e01 	mov.w	lr, #1
 800a4fe:	e00b      	b.n	800a518 <_ZN12TetrisFigure15FillFieldFigureEv+0x2e>
			manager.field[index].color = block.color;
		}
		if (++col == side) { ++row, col = 0; }
 800a500:	3201      	adds	r2, #1
 800a502:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a504:	428a      	cmp	r2, r1
 800a506:	bf04      	itt	eq
 800a508:	f10c 0c01 	addeq.w	ip, ip, #1
 800a50c:	2200      	moveq	r2, #0
 800a50e:	f103 0108 	add.w	r1, r3, #8
 800a512:	42ab      	cmp	r3, r5
 800a514:	d017      	beq.n	800a546 <_ZN12TetrisFigure15FillFieldFigureEv+0x5c>
 800a516:	460b      	mov	r3, r1
		if (block.isFeeled)
 800a518:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d0ef      	beq.n	800a500 <_ZN12TetrisFigure15FillFieldFigureEv+0x16>
			auto index = ((coord.Y + row) * COL_OF_FIELD) + coord.X + col;
 800a520:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a522:	eb0c 0401 	add.w	r4, ip, r1
 800a526:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a528:	4411      	add	r1, r2
 800a52a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800a52e:	6b44      	ldr	r4, [r0, #52]	; 0x34
			manager.field[index].isFeeled = true;
 800a530:	6824      	ldr	r4, [r4, #0]
 800a532:	f804 e031 	strb.w	lr, [r4, r1, lsl #3]
 800a536:	6b44      	ldr	r4, [r0, #52]	; 0x34
			manager.field[index].color = block.color;
 800a538:	6824      	ldr	r4, [r4, #0]
 800a53a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a53e:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800a542:	604c      	str	r4, [r1, #4]
 800a544:	e7dc      	b.n	800a500 <_ZN12TetrisFigure15FillFieldFigureEv+0x16>
	};
	std::for_each(figure.begin(), figure.end(), lambd4);
}
 800a546:	bd30      	pop	{r4, r5, pc}

0800a548 <_ZN12TetrisFigure12CheckEndGameEv>:
bool TetrisFigure::CheckEndGame()
{
	if((coord.Y < HIDDEN_ROW_OF_FIELD) && ((coord.Y + (side - 1) >= HIDDEN_ROW_OF_FIELD)))
 800a548:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a54a:	2903      	cmp	r1, #3
 800a54c:	dc12      	bgt.n	800a574 <_ZN12TetrisFigure12CheckEndGameEv+0x2c>
{
 800a54e:	b510      	push	{r4, lr}
 800a550:	4604      	mov	r4, r0
	if((coord.Y < HIDDEN_ROW_OF_FIELD) && ((coord.Y + (side - 1) >= HIDDEN_ROW_OF_FIELD)))
 800a552:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a554:	3b01      	subs	r3, #1
 800a556:	440b      	add	r3, r1
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d801      	bhi.n	800a560 <_ZN12TetrisFigure12CheckEndGameEv+0x18>
		{
			manager.END_OF_GAME = false;
			return true;
		}
	}
	return false;
 800a55c:	2000      	movs	r0, #0
}
 800a55e:	bd10      	pop	{r4, pc}
		if(isContainsUnitInRow((HIDDEN_ROW_OF_FIELD - 1) - coord.Y))
 800a560:	f1c1 0103 	rsb	r1, r1, #3
 800a564:	f7ff fe2b 	bl	800a1be <_ZN12TetrisFigure19isContainsUnitInRowEj>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0f8      	beq.n	800a55e <_ZN12TetrisFigure12CheckEndGameEv+0x16>
			manager.END_OF_GAME = false;
 800a56c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a56e:	2200      	movs	r2, #0
 800a570:	771a      	strb	r2, [r3, #28]
			return true;
 800a572:	e7f4      	b.n	800a55e <_ZN12TetrisFigure12CheckEndGameEv+0x16>
	return false;
 800a574:	2000      	movs	r0, #0
}
 800a576:	4770      	bx	lr

0800a578 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57c:	4604      	mov	r4, r0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800a57e:	4281      	cmp	r1, r0
 800a580:	d036      	beq.n	800a5f0 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x78>
 800a582:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a584:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a588:	680f      	ldr	r7, [r1, #0]
 800a58a:	eba8 0607 	sub.w	r6, r8, r7
			 - this->_M_impl._M_start); }
 800a58e:	6800      	ldr	r0, [r0, #0]
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
 800a594:	42b3      	cmp	r3, r6
 800a596:	d30a      	bcc.n	800a5ae <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x36>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	1a12      	subs	r2, r2, r0
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
 800a59c:	42b2      	cmp	r2, r6
 800a59e:	d32e      	bcc.n	800a5fe <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x86>
	  if (_Num)
 800a5a0:	45b8      	cmp	r8, r7
 800a5a2:	d022      	beq.n	800a5ea <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x72>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f003 fca8 	bl	800defc <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a5ac:	e01d      	b.n	800a5ea <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x72>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a5ae:	b326      	cbz	r6, 800a5fa <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x82>
	if (__n > this->_M_max_size())
 800a5b0:	4b20      	ldr	r3, [pc, #128]	; (800a634 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0xbc>)
 800a5b2:	429e      	cmp	r6, r3
 800a5b4:	d81f      	bhi.n	800a5f6 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f001 ffc2 	bl	800c540 <_Znwj>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	45b8      	cmp	r8, r7
 800a5c0:	d00a      	beq.n	800a5d8 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x60>
 800a5c2:	eba8 0807 	sub.w	r8, r8, r7
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	18ea      	adds	r2, r5, r3
 800a5ca:	18f9      	adds	r1, r7, r3
 800a5cc:	c903      	ldmia	r1, {r0, r1}
 800a5ce:	e882 0003 	stmia.w	r2, {r0, r1}
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	d1f7      	bne.n	800a5c8 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x50>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a5d8:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800a5da:	b118      	cbz	r0, 800a5e4 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x6c>
			    - this->_M_impl._M_start);
 800a5dc:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
 800a5de:	1a09      	subs	r1, r1, r0
 800a5e0:	f001 ffac 	bl	800c53c <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 800a5e4:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800a5e6:	4435      	add	r5, r6
 800a5e8:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	4433      	add	r3, r6
 800a5ee:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  std::__throw_bad_alloc();
 800a5f6:	f001 ffcf 	bl	800c598 <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	e7df      	b.n	800a5be <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x46>
	  if (_Num)
 800a5fe:	b112      	cbz	r2, 800a606 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800a600:	4639      	mov	r1, r7
 800a602:	f003 fc7b 	bl	800defc <memmove>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a606:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800a60a:	6827      	ldr	r7, [r4, #0]
 800a60c:	ebac 0307 	sub.w	r3, ip, r7
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800a610:	682f      	ldr	r7, [r5, #0]
 800a612:	441f      	add	r7, r3
					  __x._M_impl._M_finish,
 800a614:	686d      	ldr	r5, [r5, #4]
 800a616:	42af      	cmp	r7, r5
 800a618:	d0e7      	beq.n	800a5ea <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x72>
 800a61a:	1bed      	subs	r5, r5, r7
 800a61c:	2300      	movs	r3, #0
 800a61e:	eb0c 0203 	add.w	r2, ip, r3
 800a622:	18f9      	adds	r1, r7, r3
 800a624:	c903      	ldmia	r1, {r0, r1}
 800a626:	e882 0003 	stmia.w	r2, {r0, r1}
 800a62a:	3308      	adds	r3, #8
 800a62c:	42ab      	cmp	r3, r5
 800a62e:	d1f6      	bne.n	800a61e <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0xa6>
 800a630:	e7db      	b.n	800a5ea <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_+0x72>
 800a632:	bf00      	nop
 800a634:	7ffffff8 	.word	0x7ffffff8

0800a638 <_ZN12TetrisFigure6RotateEv>:
{
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b087      	sub	sp, #28
 800a63e:	4682      	mov	sl, r0
	prevFigure = figure;
 800a640:	f100 030c 	add.w	r3, r0, #12
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	4601      	mov	r1, r0
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff ff95 	bl	800a578 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_>
	auto tmpCoord = coord;
 800a64e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800a658:	9304      	str	r3, [sp, #16]
	size_t row = side - counter;
 800a65a:	f8da 5038 	ldr.w	r5, [sl, #56]	; 0x38
      : _M_current(__i) { }
 800a65e:	f8da 4000 	ldr.w	r4, [sl]
 800a662:	f8da 9004 	ldr.w	r9, [sl, #4]
 800a666:	45a1      	cmp	r9, r4
 800a668:	d031      	beq.n	800a6ce <_ZN12TetrisFigure6RotateEv+0x96>
 800a66a:	3d01      	subs	r5, #1
 800a66c:	3408      	adds	r4, #8
	auto counter = 1;
 800a66e:	f04f 0801 	mov.w	r8, #1
 800a672:	e004      	b.n	800a67e <_ZN12TetrisFigure6RotateEv+0x46>
 800a674:	f104 0308 	add.w	r3, r4, #8
 800a678:	454c      	cmp	r4, r9
 800a67a:	d028      	beq.n	800a6ce <_ZN12TetrisFigure6RotateEv+0x96>
 800a67c:	461c      	mov	r4, r3
		{block = prevFigure[row]; row += side; if (row > pow(side, 2)) row = side - ++counter; });
 800a67e:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a682:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a686:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a68a:	e904 0003 	stmdb	r4, {r0, r1}
 800a68e:	f8da b038 	ldr.w	fp, [sl, #56]	; 0x38
 800a692:	445d      	add	r5, fp
 800a694:	4658      	mov	r0, fp
 800a696:	f7fb fe99 	bl	80063cc <__aeabi_ui2d>
 800a69a:	4606      	mov	r6, r0
 800a69c:	460f      	mov	r7, r1
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7fb fe94 	bl	80063cc <__aeabi_ui2d>
 800a6a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7fb ff06 	bl	80064c0 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6bc:	f7fc f990 	bl	80069e0 <__aeabi_dcmpgt>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d0d7      	beq.n	800a674 <_ZN12TetrisFigure6RotateEv+0x3c>
 800a6c4:	f108 0801 	add.w	r8, r8, #1
 800a6c8:	ebab 0508 	sub.w	r5, fp, r8
 800a6cc:	e7d2      	b.n	800a674 <_ZN12TetrisFigure6RotateEv+0x3c>
	while (CheckBoundaries());
 800a6ce:	4650      	mov	r0, sl
 800a6d0:	f7ff fdd9 	bl	800a286 <_ZN12TetrisFigure15CheckBoundariesEv>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1fa      	bne.n	800a6ce <_ZN12TetrisFigure6RotateEv+0x96>
	if (isIntersectionBlocks())
 800a6d8:	4650      	mov	r0, sl
 800a6da:	f7ff fe02 	bl	800a2e2 <_ZN12TetrisFigure20isIntersectionBlocksEv>
 800a6de:	b910      	cbnz	r0, 800a6e6 <_ZN12TetrisFigure6RotateEv+0xae>
}
 800a6e0:	b007      	add	sp, #28
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		figure = prevFigure;
 800a6e6:	9903      	ldr	r1, [sp, #12]
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	f7ff ff45 	bl	800a578 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_>
		coord = tmpCoord;
 800a6ee:	9b05      	ldr	r3, [sp, #20]
 800a6f0:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
}
 800a6fa:	e7f1      	b.n	800a6e0 <_ZN12TetrisFigure6RotateEv+0xa8>

0800a6fc <_ZN12TetrisFigure8MoveDownEv>:
{
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4604      	mov	r4, r0
	++coord.Y;
 800a700:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a702:	3301      	adds	r3, #1
 800a704:	6283      	str	r3, [r0, #40]	; 0x28
	if (CheckBoundaries() || isIntersectionBlocks())
 800a706:	f7ff fdbe 	bl	800a286 <_ZN12TetrisFigure15CheckBoundariesEv>
 800a70a:	b918      	cbnz	r0, 800a714 <_ZN12TetrisFigure8MoveDownEv+0x18>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff fde8 	bl	800a2e2 <_ZN12TetrisFigure20isIntersectionBlocksEv>
 800a712:	b1b0      	cbz	r0, 800a742 <_ZN12TetrisFigure8MoveDownEv+0x46>
		if(CheckEndGame()) return true;
 800a714:	4620      	mov	r0, r4
 800a716:	f7ff ff17 	bl	800a548 <_ZN12TetrisFigure12CheckEndGameEv>
 800a71a:	4605      	mov	r5, r0
 800a71c:	b108      	cbz	r0, 800a722 <_ZN12TetrisFigure8MoveDownEv+0x26>
}
 800a71e:	4628      	mov	r0, r5
 800a720:	bd38      	pop	{r3, r4, r5, pc}
		FillFieldFigure();
 800a722:	4620      	mov	r0, r4
 800a724:	f7ff fee1 	bl	800a4ea <_ZN12TetrisFigure15FillFieldFigureEv>
		figure = initFigure;
 800a728:	f104 0118 	add.w	r1, r4, #24
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff ff23 	bl	800a578 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EEaSERKS2_>
		coord = initCoord;
 800a732:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800a736:	342c      	adds	r4, #44	; 0x2c
 800a738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a73c:	e883 0003 	stmia.w	r3, {r0, r1}
		return false;
 800a740:	e7ed      	b.n	800a71e <_ZN12TetrisFigure8MoveDownEv+0x22>
	else return true;
 800a742:	2501      	movs	r5, #1
 800a744:	e7eb      	b.n	800a71e <_ZN12TetrisFigure8MoveDownEv+0x22>
	...

0800a748 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj>:
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800a748:	2900      	cmp	r1, #0
 800a74a:	d05f      	beq.n	800a80c <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0xc4>
    vector<_Tp, _Alloc>::
 800a74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a750:	4605      	mov	r5, r0
 800a752:	460e      	mov	r6, r1
 800a754:	6840      	ldr	r0, [r0, #4]
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	1ac4      	subs	r4, r0, r3
 800a75a:	10e7      	asrs	r7, r4, #3
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
 800a75c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a760:	eba3 02e4 	sub.w	r2, r3, r4, asr #3
					 - this->_M_impl._M_finish);
 800a764:	68ab      	ldr	r3, [r5, #8]
 800a766:	1a1b      	subs	r3, r3, r0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800a768:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
 800a76c:	d80c      	bhi.n	800a788 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x40>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
 800a76e:	4603      	mov	r3, r0
 800a770:	460a      	mov	r2, r1

struct PartTetrisBlock
{
	bool isFeeled;
	color_t color;
	PartTetrisBlock(bool isFeeled_ = false, color_t color_ = BACKGROUND) : isFeeled(isFeeled_), color(color_) {}
 800a772:	2100      	movs	r1, #0
 800a774:	7019      	strb	r1, [r3, #0]
 800a776:	6059      	str	r1, [r3, #4]
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
 800a778:	3308      	adds	r3, #8
 800a77a:	3a01      	subs	r2, #1
 800a77c:	d1fa      	bne.n	800a774 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x2c>
 800a77e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
 800a782:	6068      	str	r0, [r5, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800a788:	428a      	cmp	r2, r1
 800a78a:	d30e      	bcc.n	800a7aa <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x62>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
 800a78c:	428f      	cmp	r7, r1
 800a78e:	bf2c      	ite	cs
 800a790:	19fb      	addcs	r3, r7, r7
 800a792:	187b      	addcc	r3, r7, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a794:	429f      	cmp	r7, r3
 800a796:	d80b      	bhi.n	800a7b0 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x68>
 800a798:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 800a79c:	4599      	cmp	r9, r3
 800a79e:	bf28      	it	cs
 800a7a0:	4699      	movcs	r9, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a7a2:	b93b      	cbnz	r3, 800a7b4 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x6c>
 800a7a4:	f04f 0800 	mov.w	r8, #0
 800a7a8:	e009      	b.n	800a7be <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x76>
	  __throw_length_error(__N(__s));
 800a7aa:	4819      	ldr	r0, [pc, #100]	; (800a810 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0xc8>)
 800a7ac:	f001 ff1c 	bl	800c5e8 <_ZSt20__throw_length_errorPKc>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a7b0:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a7b4:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 800a7b8:	f001 fec2 	bl	800c540 <_Znwj>
 800a7bc:	4680      	mov	r8, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800a7be:	eb08 0304 	add.w	r3, r8, r4
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	7019      	strb	r1, [r3, #0]
 800a7c8:	6059      	str	r1, [r3, #4]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	3a01      	subs	r2, #1
 800a7ce:	d1fa      	bne.n	800a7c6 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x7e>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	686c      	ldr	r4, [r5, #4]
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d009      	beq.n	800a7ec <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0xa4>
 800a7d8:	f108 0208 	add.w	r2, r8, #8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a7dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7e0:	e902 0003 	stmdb	r2, {r0, r1}
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	3208      	adds	r2, #8
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	d1f7      	bne.n	800a7dc <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x94>
	      _M_deallocate(this->_M_impl._M_start,
 800a7ec:	6828      	ldr	r0, [r5, #0]
	if (__p)
 800a7ee:	b118      	cbz	r0, 800a7f8 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0xb0>
			    - this->_M_impl._M_start);
 800a7f0:	68a9      	ldr	r1, [r5, #8]
	::operator delete(__p
 800a7f2:	1a09      	subs	r1, r1, r0
 800a7f4:	f001 fea2 	bl	800c53c <_ZdlPvj>
	      this->_M_impl._M_start = __new_start;
 800a7f8:	f8c5 8000 	str.w	r8, [r5]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800a7fc:	443e      	add	r6, r7
 800a7fe:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
 800a802:	606e      	str	r6, [r5, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a804:	eb08 00c9 	add.w	r0, r8, r9, lsl #3
 800a808:	60a8      	str	r0, [r5, #8]
    }
 800a80a:	e7bb      	b.n	800a784 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj+0x3c>
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	0800f634 	.word	0x0800f634

0800a814 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	b08b      	sub	sp, #44	; 0x2c
 800a81a:	9007      	str	r0, [sp, #28]
 800a81c:	4614      	mov	r4, r2
 800a81e:	461e      	mov	r6, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a820:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a824:	f8d0 b000 	ldr.w	fp, [r0]
 800a828:	ebaa 030b 	sub.w	r3, sl, fp
 800a82c:	109b      	asrs	r3, r3, #2
 800a82e:	4a7d      	ldr	r2, [pc, #500]	; (800aa24 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x210>)
 800a830:	fb02 f303 	mul.w	r3, r2, r3
	if (max_size() - size() < __n)
 800a834:	4a7c      	ldr	r2, [pc, #496]	; (800aa28 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x214>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d014      	beq.n	800a864 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
 800a83a:	4688      	mov	r8, r1
	const size_type __len = size() + (std::max)(size(), __n);
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	bf2c      	ite	cs
 800a840:	18da      	addcs	r2, r3, r3
 800a842:	1c5a      	addcc	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a844:	4293      	cmp	r3, r2
 800a846:	f200 80c7 	bhi.w	800a9d8 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1c4>
 800a84a:	4b77      	ldr	r3, [pc, #476]	; (800aa28 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x214>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	bf28      	it	cs
 800a850:	4613      	movcs	r3, r2
 800a852:	9306      	str	r3, [sp, #24]
    { return __lhs.base() - __rhs.base(); }
 800a854:	eba1 050b 	sub.w	r5, r1, fp
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a858:	2a00      	cmp	r2, #0
 800a85a:	f040 80c1 	bne.w	800a9e0 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1cc>
 800a85e:	2300      	movs	r3, #0
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	e0c4      	b.n	800a9ee <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1da>
	  __throw_length_error(__N(__s));
 800a864:	4871      	ldr	r0, [pc, #452]	; (800aa2c <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x218>)
 800a866:	f001 febf 	bl	800c5e8 <_ZSt20__throw_length_errorPKc>
 800a86a:	f109 093c 	add.w	r9, r9, #60	; 0x3c
 800a86e:	353c      	adds	r5, #60	; 0x3c
 800a870:	343c      	adds	r4, #60	; 0x3c
 800a872:	45c8      	cmp	r8, r9
 800a874:	d05e      	beq.n	800a934 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800a876:	4627      	mov	r7, r4
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a878:	f854 3c3c 	ldr.w	r3, [r4, #-60]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a87c:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a87e:	f854 3c38 	ldr.w	r3, [r4, #-56]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a882:	606b      	str	r3, [r5, #4]
 800a884:	f854 3c34 	ldr.w	r3, [r4, #-52]
 800a888:	60ab      	str	r3, [r5, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800a88a:	f844 6c34 	str.w	r6, [r4, #-52]
 800a88e:	f844 6c38 	str.w	r6, [r4, #-56]
 800a892:	f844 6c3c 	str.w	r6, [r4, #-60]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a896:	f854 3c30 	ldr.w	r3, [r4, #-48]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a89a:	60eb      	str	r3, [r5, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a89c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a8a0:	612b      	str	r3, [r5, #16]
 800a8a2:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800a8a6:	616b      	str	r3, [r5, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800a8a8:	f844 6c28 	str.w	r6, [r4, #-40]
 800a8ac:	f844 6c2c 	str.w	r6, [r4, #-44]
 800a8b0:	f844 6c30 	str.w	r6, [r4, #-48]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a8b4:	f854 3c24 	ldr.w	r3, [r4, #-36]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a8b8:	61ab      	str	r3, [r5, #24]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800a8ba:	f854 3c20 	ldr.w	r3, [r4, #-32]
	  _M_end_of_storage(__x._M_end_of_storage)
 800a8be:	61eb      	str	r3, [r5, #28]
 800a8c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800a8c4:	622b      	str	r3, [r5, #32]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800a8c6:	f844 6c1c 	str.w	r6, [r4, #-28]
 800a8ca:	f844 6c20 	str.w	r6, [r4, #-32]
 800a8ce:	f844 6c24 	str.w	r6, [r4, #-36]

	TetrisManager();
	void EraseFilledRow();
};

struct TetrisFigure
 800a8d2:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800a8d6:	f1a4 0218 	sub.w	r2, r4, #24
 800a8da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8de:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8e2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 800a8e6:	f1a4 0210 	sub.w	r2, r4, #16
 800a8ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a8f6:	636b      	str	r3, [r5, #52]	; 0x34
 800a8f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a8fc:	63ab      	str	r3, [r5, #56]	; 0x38
	_M_deallocate(_M_impl._M_start,
 800a8fe:	f854 0c24 	ldr.w	r0, [r4, #-36]
	if (__p)
 800a902:	b120      	cbz	r0, 800a90e <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfa>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a904:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 800a908:	1a09      	subs	r1, r1, r0
 800a90a:	f001 fe17 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800a90e:	f857 0c30 	ldr.w	r0, [r7, #-48]
	if (__p)
 800a912:	b120      	cbz	r0, 800a91e <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a914:	f857 1c28 	ldr.w	r1, [r7, #-40]
 800a918:	1a09      	subs	r1, r1, r0
 800a91a:	f001 fe0f 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800a91e:	f857 0c3c 	ldr.w	r0, [r7, #-60]
	if (__p)
 800a922:	2800      	cmp	r0, #0
 800a924:	d0a1      	beq.n	800a86a <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a926:	f857 1c34 	ldr.w	r1, [r7, #-52]
 800a92a:	1a09      	subs	r1, r1, r0
 800a92c:	f001 fe06 	bl	800c53c <_ZdlPvj>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
 800a930:	e79b      	b.n	800a86a <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
      _ForwardIterator __cur = __result;
 800a932:	9d05      	ldr	r5, [sp, #20]
	      ++__new_finish;
 800a934:	353c      	adds	r5, #60	; 0x3c
      for (; __first != __last; ++__first, (void)++__cur)
 800a936:	45d0      	cmp	r8, sl
 800a938:	d037      	beq.n	800a9aa <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x196>
      _ForwardIterator __cur = __result;
 800a93a:	462a      	mov	r2, r5
      for (; __first != __last; ++__first, (void)++__cur)
 800a93c:	4643      	mov	r3, r8
	  _M_end_of_storage(__x._M_end_of_storage)
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	6859      	ldr	r1, [r3, #4]
 800a944:	6051      	str	r1, [r2, #4]
 800a946:	6899      	ldr	r1, [r3, #8]
 800a948:	6091      	str	r1, [r2, #8]
 800a94a:	68d9      	ldr	r1, [r3, #12]
 800a94c:	60d1      	str	r1, [r2, #12]
 800a94e:	6919      	ldr	r1, [r3, #16]
 800a950:	6111      	str	r1, [r2, #16]
 800a952:	6959      	ldr	r1, [r3, #20]
 800a954:	6151      	str	r1, [r2, #20]
 800a956:	6999      	ldr	r1, [r3, #24]
 800a958:	6191      	str	r1, [r2, #24]
 800a95a:	69d9      	ldr	r1, [r3, #28]
 800a95c:	61d1      	str	r1, [r2, #28]
 800a95e:	6a19      	ldr	r1, [r3, #32]
 800a960:	6211      	str	r1, [r2, #32]
 800a962:	f102 0424 	add.w	r4, r2, #36	; 0x24
 800a966:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a96a:	c903      	ldmia	r1, {r0, r1}
 800a96c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a970:	f102 042c 	add.w	r4, r2, #44	; 0x2c
 800a974:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800a978:	c903      	ldmia	r1, {r0, r1}
 800a97a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a97e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a980:	6351      	str	r1, [r2, #52]	; 0x34
 800a982:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a984:	6391      	str	r1, [r2, #56]	; 0x38
 800a986:	333c      	adds	r3, #60	; 0x3c
 800a988:	323c      	adds	r2, #60	; 0x3c
 800a98a:	459a      	cmp	sl, r3
 800a98c:	d1d7      	bne.n	800a93e <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12a>
 800a98e:	ebaa 0308 	sub.w	r3, sl, r8
 800a992:	3b3c      	subs	r3, #60	; 0x3c
 800a994:	089b      	lsrs	r3, r3, #2
 800a996:	4a26      	ldr	r2, [pc, #152]	; (800aa30 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x21c>)
 800a998:	fb02 f303 	mul.w	r3, r2, r3
 800a99c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800a9a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	if (__p)
 800a9aa:	f1bb 0f00 	cmp.w	fp, #0
 800a9ae:	d006      	beq.n	800a9be <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1aa>
		    this->_M_impl._M_end_of_storage - __old_start);
 800a9b0:	9b07      	ldr	r3, [sp, #28]
 800a9b2:	6899      	ldr	r1, [r3, #8]
 800a9b4:	eba1 010b 	sub.w	r1, r1, fp
 800a9b8:	4658      	mov	r0, fp
 800a9ba:	f001 fdbf 	bl	800c53c <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800a9be:	9b07      	ldr	r3, [sp, #28]
 800a9c0:	9a05      	ldr	r2, [sp, #20]
 800a9c2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a9c4:	605d      	str	r5, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a9c6:	9906      	ldr	r1, [sp, #24]
 800a9c8:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
 800a9cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800a9d0:	6098      	str	r0, [r3, #8]
    }
 800a9d2:	b00b      	add	sp, #44	; 0x2c
 800a9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d8:	eba1 050b 	sub.w	r5, r1, fp
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a9dc:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x214>)
 800a9de:	9306      	str	r3, [sp, #24]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a9e0:	9b06      	ldr	r3, [sp, #24]
 800a9e2:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
 800a9e6:	0080      	lsls	r0, r0, #2
 800a9e8:	f001 fdaa 	bl	800c540 <_Znwj>
 800a9ec:	9005      	str	r0, [sp, #20]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a9ee:	ab08      	add	r3, sp, #32
 800a9f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a9f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9fa:	9202      	str	r2, [sp, #8]
 800a9fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9fe:	8812      	ldrh	r2, [r2, #0]
 800aa00:	9201      	str	r2, [sp, #4]
 800aa02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	9200      	str	r2, [sp, #0]
 800aa08:	cb0c      	ldmia	r3, {r2, r3}
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	9e05      	ldr	r6, [sp, #20]
 800aa0e:	1970      	adds	r0, r6, r5
 800aa10:	f7ff fafc 	bl	800a00c <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager>
 800aa14:	45d8      	cmp	r8, fp
 800aa16:	d08c      	beq.n	800a932 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11e>
 800aa18:	f10b 043c 	add.w	r4, fp, #60	; 0x3c
      _ForwardIterator __cur = __result;
 800aa1c:	4635      	mov	r5, r6
      for (; __first != __last; ++__first, (void)++__cur)
 800aa1e:	46d9      	mov	r9, fp
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800aa20:	2600      	movs	r6, #0
 800aa22:	e728      	b.n	800a876 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x62>
 800aa24:	eeeeeeef 	.word	0xeeeeeeef
 800aa28:	02222222 	.word	0x02222222
 800aa2c:	0800f650 	.word	0x0800f650
 800aa30:	2eeeeeef 	.word	0x2eeeeeef

0800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800aa34:	b530      	push	{r4, r5, lr}
 800aa36:	b087      	sub	sp, #28
 800aa38:	4604      	mov	r4, r0
 800aa3a:	468c      	mov	ip, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800aa3c:	6845      	ldr	r5, [r0, #4]
 800aa3e:	6881      	ldr	r1, [r0, #8]
 800aa40:	428d      	cmp	r5, r1
 800aa42:	d017      	beq.n	800aa74 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_+0x40>
 800aa44:	f10d 0e10 	add.w	lr, sp, #16
 800aa48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa4c:	e88e 0003 	stmia.w	lr, {r0, r1}
 800aa50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa52:	9202      	str	r2, [sp, #8]
 800aa54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa56:	8812      	ldrh	r2, [r2, #0]
 800aa58:	9201      	str	r2, [sp, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	e89e 000c 	ldmia.w	lr, {r2, r3}
 800aa62:	4661      	mov	r1, ip
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff fad1 	bl	800a00c <_ZN12TetrisFigureC1EOSt6vectorI15PartTetrisBlockSaIS1_EE10CoordinatejmR13TetrisManager>
	    ++this->_M_impl._M_finish;
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	333c      	adds	r3, #60	; 0x3c
 800aa6e:	6063      	str	r3, [r4, #4]
      }
 800aa70:	b007      	add	sp, #28
 800aa72:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800aa74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa76:	9102      	str	r1, [sp, #8]
 800aa78:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa7a:	9101      	str	r1, [sp, #4]
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	4662      	mov	r2, ip
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7ff fec6 	bl	800a814 <_ZNSt6vectorI12TetrisFigureSaIS0_EE17_M_realloc_insertIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800aa88:	e7f2      	b.n	800aa70 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_+0x3c>

0800aa8a <_Z12CreateFigureR13TetrisManager>:
std::vector<TetrisFigure>&& CreateFigure(TetrisManager& man)
{
 800aa8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8e:	b0d7      	sub	sp, #348	; 0x15c
 800aa90:	4606      	mov	r6, r0
	PartTetrisBlock(bool isFeeled_ = false, color_t color_ = BACKGROUND) : isFeeled(isFeeled_), color(color_) {}
 800aa92:	2300      	movs	r3, #0
 800aa94:	f88d 3008 	strb.w	r3, [sp, #8]
 800aa98:	9303      	str	r3, [sp, #12]
 800aa9a:	f88d 3010 	strb.w	r3, [sp, #16]
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f88d 2018 	strb.w	r2, [sp, #24]
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	f88d 3020 	strb.w	r3, [sp, #32]
 800aaac:	9309      	str	r3, [sp, #36]	; 0x24
 800aaae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800aab2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800aab8:	930d      	str	r3, [sp, #52]	; 0x34
 800aaba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800aabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aac0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800aac4:	9311      	str	r3, [sp, #68]	; 0x44
 800aac6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800aaca:	9313      	str	r3, [sp, #76]	; 0x4c
 800aacc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800aad0:	9315      	str	r3, [sp, #84]	; 0x54
 800aad2:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
 800aad6:	9317      	str	r3, [sp, #92]	; 0x5c
 800aad8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800aadc:	9319      	str	r3, [sp, #100]	; 0x64
 800aade:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800aae2:	931b      	str	r3, [sp, #108]	; 0x6c
 800aae4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800aae8:	931d      	str	r3, [sp, #116]	; 0x74
 800aaea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800aaee:	931f      	str	r3, [sp, #124]	; 0x7c
 800aaf0:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800aaf4:	9321      	str	r3, [sp, #132]	; 0x84
	: _M_start(), _M_finish(), _M_end_of_storage()
 800aaf6:	9337      	str	r3, [sp, #220]	; 0xdc
 800aaf8:	9338      	str	r3, [sp, #224]	; 0xe0
 800aafa:	9339      	str	r3, [sp, #228]	; 0xe4
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800aafc:	2080      	movs	r0, #128	; 0x80
 800aafe:	f001 fd1f 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800ab02:	9037      	str	r0, [sp, #220]	; 0xdc
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ab04:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800ab08:	9539      	str	r5, [sp, #228]	; 0xe4
	      for (; __first != __last; ++__first, (void)++__cur)
 800ab0a:	ab04      	add	r3, sp, #16
 800ab0c:	f100 0208 	add.w	r2, r0, #8
 800ab10:	ac24      	add	r4, sp, #144	; 0x90
 800ab12:	e913 0003 	ldmdb	r3, {r0, r1}
 800ab16:	e902 0003 	stmdb	r2, {r0, r1}
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	3208      	adds	r2, #8
 800ab1e:	42a3      	cmp	r3, r4
 800ab20:	d1f7      	bne.n	800ab12 <_Z12CreateFigureR13TetrisManager+0x88>
	  this->_M_impl._M_finish =
 800ab22:	9538      	str	r5, [sp, #224]	; 0xe0
 800ab24:	2201      	movs	r2, #1
 800ab26:	f88d 2008 	strb.w	r2, [sp, #8]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	f88d 2010 	strb.w	r2, [sp, #16]
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	f88d 3018 	strb.w	r3, [sp, #24]
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	f88d 3020 	strb.w	r3, [sp, #32]
 800ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab40:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800ab44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab46:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800ab4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab4c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800ab50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab52:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800ab56:	9311      	str	r3, [sp, #68]	; 0x44
 800ab58:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800ab5c:	9313      	str	r3, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ab5e:	9334      	str	r3, [sp, #208]	; 0xd0
 800ab60:	9335      	str	r3, [sp, #212]	; 0xd4
 800ab62:	9336      	str	r3, [sp, #216]	; 0xd8
 800ab64:	2048      	movs	r0, #72	; 0x48
 800ab66:	f001 fceb 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800ab6a:	9034      	str	r0, [sp, #208]	; 0xd0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ab6c:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800ab70:	9536      	str	r5, [sp, #216]	; 0xd8
 800ab72:	aa04      	add	r2, sp, #16
 800ab74:	f100 0308 	add.w	r3, r0, #8
 800ab78:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800ab7c:	e912 0003 	ldmdb	r2, {r0, r1}
 800ab80:	e903 0003 	stmdb	r3, {r0, r1}
 800ab84:	3208      	adds	r2, #8
 800ab86:	3308      	adds	r3, #8
 800ab88:	429c      	cmp	r4, r3
 800ab8a:	d1f7      	bne.n	800ab7c <_Z12CreateFigureR13TetrisManager+0xf2>
	  this->_M_impl._M_finish =
 800ab8c:	9535      	str	r5, [sp, #212]	; 0xd4
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f88d 3008 	strb.w	r3, [sp, #8]
 800ab94:	9303      	str	r3, [sp, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f88d 2010 	strb.w	r2, [sp, #16]
 800ab9c:	9305      	str	r3, [sp, #20]
 800ab9e:	f88d 3018 	strb.w	r3, [sp, #24]
 800aba2:	9307      	str	r3, [sp, #28]
 800aba4:	f88d 3020 	strb.w	r3, [sp, #32]
 800aba8:	9309      	str	r3, [sp, #36]	; 0x24
 800abaa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800abae:	930b      	str	r3, [sp, #44]	; 0x2c
 800abb0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800abb4:	930d      	str	r3, [sp, #52]	; 0x34
 800abb6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800abba:	930f      	str	r3, [sp, #60]	; 0x3c
 800abbc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800abc0:	9311      	str	r3, [sp, #68]	; 0x44
 800abc2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 800abc6:	9313      	str	r3, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800abc8:	9331      	str	r3, [sp, #196]	; 0xc4
 800abca:	9332      	str	r3, [sp, #200]	; 0xc8
 800abcc:	9333      	str	r3, [sp, #204]	; 0xcc
 800abce:	2048      	movs	r0, #72	; 0x48
 800abd0:	f001 fcb6 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800abd4:	9031      	str	r0, [sp, #196]	; 0xc4
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800abd6:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800abda:	9533      	str	r5, [sp, #204]	; 0xcc
 800abdc:	aa04      	add	r2, sp, #16
 800abde:	f100 0308 	add.w	r3, r0, #8
 800abe2:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800abe6:	e912 0003 	ldmdb	r2, {r0, r1}
 800abea:	e903 0003 	stmdb	r3, {r0, r1}
 800abee:	3208      	adds	r2, #8
 800abf0:	3308      	adds	r3, #8
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d1f7      	bne.n	800abe6 <_Z12CreateFigureR13TetrisManager+0x15c>
	  this->_M_impl._M_finish =
 800abf6:	9532      	str	r5, [sp, #200]	; 0xc8
 800abf8:	2300      	movs	r3, #0
 800abfa:	f88d 3008 	strb.w	r3, [sp, #8]
 800abfe:	9303      	str	r3, [sp, #12]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f88d 2010 	strb.w	r2, [sp, #16]
 800ac06:	9305      	str	r3, [sp, #20]
 800ac08:	f88d 3018 	strb.w	r3, [sp, #24]
 800ac0c:	9307      	str	r3, [sp, #28]
 800ac0e:	f88d 3020 	strb.w	r3, [sp, #32]
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800ac18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800ac1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac20:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800ac24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800ac2a:	9311      	str	r3, [sp, #68]	; 0x44
 800ac2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 800ac30:	9313      	str	r3, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ac32:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac34:	932f      	str	r3, [sp, #188]	; 0xbc
 800ac36:	9330      	str	r3, [sp, #192]	; 0xc0
 800ac38:	2048      	movs	r0, #72	; 0x48
 800ac3a:	f001 fc81 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800ac3e:	902e      	str	r0, [sp, #184]	; 0xb8
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ac40:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800ac44:	9530      	str	r5, [sp, #192]	; 0xc0
 800ac46:	aa04      	add	r2, sp, #16
 800ac48:	f100 0308 	add.w	r3, r0, #8
 800ac4c:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800ac50:	e912 0003 	ldmdb	r2, {r0, r1}
 800ac54:	e903 0003 	stmdb	r3, {r0, r1}
 800ac58:	3208      	adds	r2, #8
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	d1f7      	bne.n	800ac50 <_Z12CreateFigureR13TetrisManager+0x1c6>
	  this->_M_impl._M_finish =
 800ac60:	952f      	str	r5, [sp, #188]	; 0xbc
 800ac62:	2300      	movs	r3, #0
 800ac64:	f88d 3008 	strb.w	r3, [sp, #8]
 800ac68:	9303      	str	r3, [sp, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f88d 2010 	strb.w	r2, [sp, #16]
 800ac70:	9305      	str	r3, [sp, #20]
 800ac72:	f88d 3018 	strb.w	r3, [sp, #24]
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	f88d 2020 	strb.w	r2, [sp, #32]
 800ac7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800ac82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac84:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800ac88:	930d      	str	r3, [sp, #52]	; 0x34
 800ac8a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800ac8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac90:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800ac94:	9311      	str	r3, [sp, #68]	; 0x44
 800ac96:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800ac9a:	9313      	str	r3, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ac9c:	932b      	str	r3, [sp, #172]	; 0xac
 800ac9e:	932c      	str	r3, [sp, #176]	; 0xb0
 800aca0:	932d      	str	r3, [sp, #180]	; 0xb4
 800aca2:	2048      	movs	r0, #72	; 0x48
 800aca4:	f001 fc4c 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800aca8:	902b      	str	r0, [sp, #172]	; 0xac
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800acaa:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800acae:	952d      	str	r5, [sp, #180]	; 0xb4
 800acb0:	aa04      	add	r2, sp, #16
 800acb2:	f100 0308 	add.w	r3, r0, #8
 800acb6:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800acba:	e912 0003 	ldmdb	r2, {r0, r1}
 800acbe:	e903 0003 	stmdb	r3, {r0, r1}
 800acc2:	3208      	adds	r2, #8
 800acc4:	3308      	adds	r3, #8
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d1f7      	bne.n	800acba <_Z12CreateFigureR13TetrisManager+0x230>
	  this->_M_impl._M_finish =
 800acca:	952c      	str	r5, [sp, #176]	; 0xb0
 800accc:	2300      	movs	r3, #0
 800acce:	f88d 3008 	strb.w	r3, [sp, #8]
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f88d 2010 	strb.w	r2, [sp, #16]
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	f88d 3018 	strb.w	r3, [sp, #24]
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	f88d 2020 	strb.w	r2, [sp, #32]
 800ace6:	9309      	str	r3, [sp, #36]	; 0x24
 800ace8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800acec:	930b      	str	r3, [sp, #44]	; 0x2c
 800acee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800acf2:	930d      	str	r3, [sp, #52]	; 0x34
 800acf4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800acf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acfa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800acfe:	9311      	str	r3, [sp, #68]	; 0x44
 800ad00:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800ad04:	9313      	str	r3, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ad06:	9328      	str	r3, [sp, #160]	; 0xa0
 800ad08:	9329      	str	r3, [sp, #164]	; 0xa4
 800ad0a:	932a      	str	r3, [sp, #168]	; 0xa8
 800ad0c:	2048      	movs	r0, #72	; 0x48
 800ad0e:	f001 fc17 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800ad12:	9028      	str	r0, [sp, #160]	; 0xa0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ad14:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800ad18:	952a      	str	r5, [sp, #168]	; 0xa8
 800ad1a:	aa04      	add	r2, sp, #16
 800ad1c:	f100 0308 	add.w	r3, r0, #8
 800ad20:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800ad24:	e912 0003 	ldmdb	r2, {r0, r1}
 800ad28:	e903 0003 	stmdb	r3, {r0, r1}
 800ad2c:	3208      	adds	r2, #8
 800ad2e:	3308      	adds	r3, #8
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	d1f7      	bne.n	800ad24 <_Z12CreateFigureR13TetrisManager+0x29a>
	  this->_M_impl._M_finish =
 800ad34:	9529      	str	r5, [sp, #164]	; 0xa4
 800ad36:	2201      	movs	r2, #1
 800ad38:	f88d 2008 	strb.w	r2, [sp, #8]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	f88d 2010 	strb.w	r2, [sp, #16]
 800ad44:	9305      	str	r3, [sp, #20]
 800ad46:	f88d 2018 	strb.w	r2, [sp, #24]
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	f88d 2020 	strb.w	r2, [sp, #32]
 800ad50:	9309      	str	r3, [sp, #36]	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ad52:	9325      	str	r3, [sp, #148]	; 0x94
 800ad54:	9326      	str	r3, [sp, #152]	; 0x98
 800ad56:	9327      	str	r3, [sp, #156]	; 0x9c
 800ad58:	2020      	movs	r0, #32
 800ad5a:	f001 fbf1 	bl	800c540 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800ad5e:	9025      	str	r0, [sp, #148]	; 0x94
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ad60:	f100 0520 	add.w	r5, r0, #32
 800ad64:	9527      	str	r5, [sp, #156]	; 0x9c
 800ad66:	aa04      	add	r2, sp, #16
 800ad68:	f100 0308 	add.w	r3, r0, #8
 800ad6c:	f100 0428 	add.w	r4, r0, #40	; 0x28
 800ad70:	e912 0003 	ldmdb	r2, {r0, r1}
 800ad74:	e903 0003 	stmdb	r3, {r0, r1}
 800ad78:	3208      	adds	r2, #8
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	d1f7      	bne.n	800ad70 <_Z12CreateFigureR13TetrisManager+0x2e6>
	  this->_M_impl._M_finish =
 800ad80:	9526      	str	r5, [sp, #152]	; 0x98
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ad82:	2300      	movs	r3, #0
 800ad84:	9322      	str	r3, [sp, #136]	; 0x88
 800ad86:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad88:	9324      	str	r3, [sp, #144]	; 0x90
 800ad8a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800ad8e:	f001 fbd7 	bl	800c540 <_Znwj>
 800ad92:	4682      	mov	sl, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad94:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800ad98:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
      for (; __first != __last; ++__first, (void)++__cur)
 800ad9c:	45d9      	cmp	r9, fp
 800ad9e:	d068      	beq.n	800ae72 <_Z12CreateFigureR13TetrisManager+0x3e8>
 800ada0:	f109 043c 	add.w	r4, r9, #60	; 0x3c
      _ForwardIterator __cur = __result;
 800ada4:	4605      	mov	r5, r0
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800ada6:	2700      	movs	r7, #0
 800ada8:	e01a      	b.n	800ade0 <_Z12CreateFigureR13TetrisManager+0x356>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800adaa:	f854 1c1c 	ldr.w	r1, [r4, #-28]
	::operator delete(__p
 800adae:	1a09      	subs	r1, r1, r0
 800adb0:	f001 fbc4 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800adb4:	f858 0c30 	ldr.w	r0, [r8, #-48]
	if (__p)
 800adb8:	b120      	cbz	r0, 800adc4 <_Z12CreateFigureR13TetrisManager+0x33a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800adba:	f858 1c28 	ldr.w	r1, [r8, #-40]
 800adbe:	1a09      	subs	r1, r1, r0
 800adc0:	f001 fbbc 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800adc4:	f858 0c3c 	ldr.w	r0, [r8, #-60]
	if (__p)
 800adc8:	b120      	cbz	r0, 800add4 <_Z12CreateFigureR13TetrisManager+0x34a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800adca:	f858 1c34 	ldr.w	r1, [r8, #-52]
 800adce:	1a09      	subs	r1, r1, r0
 800add0:	f001 fbb4 	bl	800c53c <_ZdlPvj>
      for (; __first != __last; ++__first, (void)++__cur)
 800add4:	f109 093c 	add.w	r9, r9, #60	; 0x3c
 800add8:	353c      	adds	r5, #60	; 0x3c
 800adda:	343c      	adds	r4, #60	; 0x3c
 800addc:	45cb      	cmp	fp, r9
 800adde:	d048      	beq.n	800ae72 <_Z12CreateFigureR13TetrisManager+0x3e8>
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800ade0:	46a0      	mov	r8, r4
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ade2:	f854 3c3c 	ldr.w	r3, [r4, #-60]
	  _M_end_of_storage(__x._M_end_of_storage)
 800ade6:	602b      	str	r3, [r5, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ade8:	f854 3c38 	ldr.w	r3, [r4, #-56]
	  _M_end_of_storage(__x._M_end_of_storage)
 800adec:	606b      	str	r3, [r5, #4]
 800adee:	f854 3c34 	ldr.w	r3, [r4, #-52]
 800adf2:	60ab      	str	r3, [r5, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800adf4:	f844 7c34 	str.w	r7, [r4, #-52]
 800adf8:	f844 7c38 	str.w	r7, [r4, #-56]
 800adfc:	f844 7c3c 	str.w	r7, [r4, #-60]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ae00:	f854 3c30 	ldr.w	r3, [r4, #-48]
	  _M_end_of_storage(__x._M_end_of_storage)
 800ae04:	60eb      	str	r3, [r5, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ae06:	f854 3c2c 	ldr.w	r3, [r4, #-44]
	  _M_end_of_storage(__x._M_end_of_storage)
 800ae0a:	612b      	str	r3, [r5, #16]
 800ae0c:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800ae10:	616b      	str	r3, [r5, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800ae12:	f844 7c28 	str.w	r7, [r4, #-40]
 800ae16:	f844 7c2c 	str.w	r7, [r4, #-44]
 800ae1a:	f844 7c30 	str.w	r7, [r4, #-48]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ae1e:	f854 3c24 	ldr.w	r3, [r4, #-36]
	  _M_end_of_storage(__x._M_end_of_storage)
 800ae22:	61ab      	str	r3, [r5, #24]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800ae24:	f854 3c20 	ldr.w	r3, [r4, #-32]
	  _M_end_of_storage(__x._M_end_of_storage)
 800ae28:	61eb      	str	r3, [r5, #28]
 800ae2a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800ae2e:	622b      	str	r3, [r5, #32]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800ae30:	f844 7c1c 	str.w	r7, [r4, #-28]
 800ae34:	f844 7c20 	str.w	r7, [r4, #-32]
 800ae38:	f844 7c24 	str.w	r7, [r4, #-36]
struct TetrisFigure
 800ae3c:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800ae40:	f1a4 0218 	sub.w	r2, r4, #24
 800ae44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae48:	e883 0003 	stmia.w	r3, {r0, r1}
 800ae4c:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 800ae50:	f1a4 0210 	sub.w	r2, r4, #16
 800ae54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae58:	e883 0003 	stmia.w	r3, {r0, r1}
 800ae5c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800ae60:	636b      	str	r3, [r5, #52]	; 0x34
 800ae62:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ae66:	63ab      	str	r3, [r5, #56]	; 0x38
	_M_deallocate(_M_impl._M_start,
 800ae68:	f854 0c24 	ldr.w	r0, [r4, #-36]
	if (__p)
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d19c      	bne.n	800adaa <_Z12CreateFigureR13TetrisManager+0x320>
 800ae70:	e7a0      	b.n	800adb4 <_Z12CreateFigureR13TetrisManager+0x32a>
	  _M_deallocate(this->_M_impl._M_start,
 800ae72:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ae74:	b118      	cbz	r0, 800ae7e <_Z12CreateFigureR13TetrisManager+0x3f4>
 800ae76:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ae78:	1a09      	subs	r1, r1, r0
 800ae7a:	f001 fb5f 	bl	800c53c <_ZdlPvj>
	  this->_M_impl._M_start = __tmp;
 800ae7e:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
	  this->_M_impl._M_finish = __tmp + __old_size;
 800ae82:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ae86:	f50a 70d2 	add.w	r0, sl, #420	; 0x1a4
 800ae8a:	9024      	str	r0, [sp, #144]	; 0x90
 800ae8c:	2406      	movs	r4, #6
 800ae8e:	943a      	str	r4, [sp, #232]	; 0xe8
 800ae90:	2300      	movs	r3, #0
 800ae92:	933b      	str	r3, [sp, #236]	; 0xec
		{1},{1},
		{1},{1}
	};
	std::vector<TetrisFigure> myFigure;
	myFigure.reserve(QUANTITY_FIGURE);
	myFigure.emplace_back(std::move(fig1), Coordinate{ 6, 0 }, 4, FIG1COLOR, man);
 800ae94:	2304      	movs	r3, #4
 800ae96:	933c      	str	r3, [sp, #240]	; 0xf0
 800ae98:	231f      	movs	r3, #31
 800ae9a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
 800ae9e:	9601      	str	r6, [sp, #4]
 800aea0:	f10d 03f6 	add.w	r3, sp, #246	; 0xf6
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	ab3c      	add	r3, sp, #240	; 0xf0
 800aea8:	aa3a      	add	r2, sp, #232	; 0xe8
 800aeaa:	a937      	add	r1, sp, #220	; 0xdc
 800aeac:	a822      	add	r0, sp, #136	; 0x88
 800aeae:	f7ff fdc1 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800aeb2:	943e      	str	r4, [sp, #248]	; 0xf8
 800aeb4:	2701      	movs	r7, #1
 800aeb6:	973f      	str	r7, [sp, #252]	; 0xfc
	myFigure.emplace_back(std::move(fig2), Coordinate{ 6, 1 }, 3, FIG2COLOR, man);
 800aeb8:	2503      	movs	r5, #3
 800aeba:	9540      	str	r5, [sp, #256]	; 0x100
 800aebc:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800aec0:	f8ad 3106 	strh.w	r3, [sp, #262]	; 0x106
 800aec4:	9601      	str	r6, [sp, #4]
 800aec6:	f50d 7383 	add.w	r3, sp, #262	; 0x106
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	ab40      	add	r3, sp, #256	; 0x100
 800aece:	aa3e      	add	r2, sp, #248	; 0xf8
 800aed0:	a934      	add	r1, sp, #208	; 0xd0
 800aed2:	a822      	add	r0, sp, #136	; 0x88
 800aed4:	f7ff fdae 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800aed8:	9442      	str	r4, [sp, #264]	; 0x108
 800aeda:	9743      	str	r7, [sp, #268]	; 0x10c
	myFigure.emplace_back(std::move(fig3), Coordinate{ 6, 1 }, 3, FIG3COLOR, man);
 800aedc:	9544      	str	r5, [sp, #272]	; 0x110
 800aede:	f647 33e0 	movw	r3, #31712	; 0x7be0
 800aee2:	f8ad 3116 	strh.w	r3, [sp, #278]	; 0x116
 800aee6:	9601      	str	r6, [sp, #4]
 800aee8:	f50d 738b 	add.w	r3, sp, #278	; 0x116
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	ab44      	add	r3, sp, #272	; 0x110
 800aef0:	aa42      	add	r2, sp, #264	; 0x108
 800aef2:	a931      	add	r1, sp, #196	; 0xc4
 800aef4:	a822      	add	r0, sp, #136	; 0x88
 800aef6:	f7ff fd9d 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800aefa:	9446      	str	r4, [sp, #280]	; 0x118
 800aefc:	9747      	str	r7, [sp, #284]	; 0x11c
	myFigure.emplace_back(std::move(fig4), Coordinate{ 6, 1 }, 3, FIG4COLOR, man);
 800aefe:	9548      	str	r5, [sp, #288]	; 0x120
 800af00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800af04:	f8ad 3126 	strh.w	r3, [sp, #294]	; 0x126
 800af08:	9601      	str	r6, [sp, #4]
 800af0a:	f50d 7393 	add.w	r3, sp, #294	; 0x126
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	ab48      	add	r3, sp, #288	; 0x120
 800af12:	aa46      	add	r2, sp, #280	; 0x118
 800af14:	a92e      	add	r1, sp, #184	; 0xb8
 800af16:	a822      	add	r0, sp, #136	; 0x88
 800af18:	f7ff fd8c 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800af1c:	944a      	str	r4, [sp, #296]	; 0x128
 800af1e:	974b      	str	r7, [sp, #300]	; 0x12c
	myFigure.emplace_back(std::move(fig5), Coordinate{ 6, 1 }, 3, FIG5COLOR, man);
 800af20:	954c      	str	r5, [sp, #304]	; 0x130
 800af22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800af26:	f8ad 3136 	strh.w	r3, [sp, #310]	; 0x136
 800af2a:	9601      	str	r6, [sp, #4]
 800af2c:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	ab4c      	add	r3, sp, #304	; 0x130
 800af34:	aa4a      	add	r2, sp, #296	; 0x128
 800af36:	a92b      	add	r1, sp, #172	; 0xac
 800af38:	a822      	add	r0, sp, #136	; 0x88
 800af3a:	f7ff fd7b 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800af3e:	944e      	str	r4, [sp, #312]	; 0x138
 800af40:	974f      	str	r7, [sp, #316]	; 0x13c
	myFigure.emplace_back(std::move(fig6), Coordinate{ 6, 1 }, 3, FIG6COLOR, man);
 800af42:	9550      	str	r5, [sp, #320]	; 0x140
 800af44:	f647 030f 	movw	r3, #30735	; 0x780f
 800af48:	f8ad 3146 	strh.w	r3, [sp, #326]	; 0x146
 800af4c:	9601      	str	r6, [sp, #4]
 800af4e:	f50d 73a3 	add.w	r3, sp, #326	; 0x146
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	ab50      	add	r3, sp, #320	; 0x140
 800af56:	aa4e      	add	r2, sp, #312	; 0x138
 800af58:	a928      	add	r1, sp, #160	; 0xa0
 800af5a:	a822      	add	r0, sp, #136	; 0x88
 800af5c:	f7ff fd6a 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
 800af60:	9452      	str	r4, [sp, #328]	; 0x148
 800af62:	2302      	movs	r3, #2
 800af64:	9353      	str	r3, [sp, #332]	; 0x14c
	myFigure.emplace_back(std::move(fig7), Coordinate{ 6, 2 }, 2, FIG7COLOR, man);
 800af66:	9354      	str	r3, [sp, #336]	; 0x150
 800af68:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800af6c:	f8ad 3156 	strh.w	r3, [sp, #342]	; 0x156
 800af70:	9601      	str	r6, [sp, #4]
 800af72:	f50d 73ab 	add.w	r3, sp, #342	; 0x156
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	ab54      	add	r3, sp, #336	; 0x150
 800af7a:	aa52      	add	r2, sp, #328	; 0x148
 800af7c:	a925      	add	r1, sp, #148	; 0x94
 800af7e:	a822      	add	r0, sp, #136	; 0x88
 800af80:	f7ff fd58 	bl	800aa34 <_ZNSt6vectorI12TetrisFigureSaIS0_EE12emplace_backIJS_I15PartTetrisBlockSaIS4_EE10Coordinatei12TetrisColorsR13TetrisManagerEEEvDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800af84:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800af86:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 800af88:	42ac      	cmp	r4, r5
 800af8a:	d146      	bne.n	800b01a <_Z12CreateFigureR13TetrisManager+0x590>
	_M_deallocate(_M_impl._M_start,
 800af8c:	9822      	ldr	r0, [sp, #136]	; 0x88
	if (__p)
 800af8e:	b118      	cbz	r0, 800af98 <_Z12CreateFigureR13TetrisManager+0x50e>
 800af90:	9924      	ldr	r1, [sp, #144]	; 0x90
 800af92:	1a09      	subs	r1, r1, r0
 800af94:	f001 fad2 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800af98:	9825      	ldr	r0, [sp, #148]	; 0x94
	if (__p)
 800af9a:	b118      	cbz	r0, 800afa4 <_Z12CreateFigureR13TetrisManager+0x51a>
 800af9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800af9e:	1a09      	subs	r1, r1, r0
 800afa0:	f001 facc 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afa4:	9828      	ldr	r0, [sp, #160]	; 0xa0
	if (__p)
 800afa6:	b118      	cbz	r0, 800afb0 <_Z12CreateFigureR13TetrisManager+0x526>
 800afa8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800afaa:	1a09      	subs	r1, r1, r0
 800afac:	f001 fac6 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afb0:	982b      	ldr	r0, [sp, #172]	; 0xac
	if (__p)
 800afb2:	b118      	cbz	r0, 800afbc <_Z12CreateFigureR13TetrisManager+0x532>
 800afb4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800afb6:	1a09      	subs	r1, r1, r0
 800afb8:	f001 fac0 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afbc:	982e      	ldr	r0, [sp, #184]	; 0xb8
	if (__p)
 800afbe:	b118      	cbz	r0, 800afc8 <_Z12CreateFigureR13TetrisManager+0x53e>
 800afc0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800afc2:	1a09      	subs	r1, r1, r0
 800afc4:	f001 faba 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afc8:	9831      	ldr	r0, [sp, #196]	; 0xc4
	if (__p)
 800afca:	b118      	cbz	r0, 800afd4 <_Z12CreateFigureR13TetrisManager+0x54a>
 800afcc:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800afce:	1a09      	subs	r1, r1, r0
 800afd0:	f001 fab4 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afd4:	9834      	ldr	r0, [sp, #208]	; 0xd0
	if (__p)
 800afd6:	b118      	cbz	r0, 800afe0 <_Z12CreateFigureR13TetrisManager+0x556>
 800afd8:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800afda:	1a09      	subs	r1, r1, r0
 800afdc:	f001 faae 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800afe0:	9837      	ldr	r0, [sp, #220]	; 0xdc
	if (__p)
 800afe2:	b118      	cbz	r0, 800afec <_Z12CreateFigureR13TetrisManager+0x562>
 800afe4:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800afe6:	1a09      	subs	r1, r1, r0
 800afe8:	f001 faa8 	bl	800c53c <_ZdlPvj>
	return std::move(myFigure);
}
 800afec:	2000      	movs	r0, #0
 800afee:	b057      	add	sp, #348	; 0x15c
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800aff4:	6a21      	ldr	r1, [r4, #32]
 800aff6:	1a09      	subs	r1, r1, r0
 800aff8:	f001 faa0 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800affc:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 800affe:	b118      	cbz	r0, 800b008 <_Z12CreateFigureR13TetrisManager+0x57e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b000:	6961      	ldr	r1, [r4, #20]
 800b002:	1a09      	subs	r1, r1, r0
 800b004:	f001 fa9a 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b008:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800b00a:	b118      	cbz	r0, 800b014 <_Z12CreateFigureR13TetrisManager+0x58a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b00c:	68a1      	ldr	r1, [r4, #8]
 800b00e:	1a09      	subs	r1, r1, r0
 800b010:	f001 fa94 	bl	800c53c <_ZdlPvj>
 800b014:	343c      	adds	r4, #60	; 0x3c
 800b016:	42a5      	cmp	r5, r4
 800b018:	d0b8      	beq.n	800af8c <_Z12CreateFigureR13TetrisManager+0x502>
	_M_deallocate(_M_impl._M_start,
 800b01a:	69a0      	ldr	r0, [r4, #24]
	if (__p)
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d1e9      	bne.n	800aff4 <_Z12CreateFigureR13TetrisManager+0x56a>
 800b020:	e7ec      	b.n	800affc <_Z12CreateFigureR13TetrisManager+0x572>

0800b022 <_ZN13TetrisManagerC1Ev>:
TetrisManager::TetrisManager()
 800b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b026:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b028:	2400      	movs	r4, #0
 800b02a:	6004      	str	r4, [r0, #0]
 800b02c:	6044      	str	r4, [r0, #4]
 800b02e:	6084      	str	r4, [r0, #8]
 800b030:	60c4      	str	r4, [r0, #12]
 800b032:	6104      	str	r4, [r0, #16]
 800b034:	6144      	str	r4, [r0, #20]
 800b036:	2301      	movs	r3, #1
 800b038:	6183      	str	r3, [r0, #24]
 800b03a:	7703      	strb	r3, [r0, #28]
	  _M_default_append(__new_size - size());
 800b03c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b040:	f7ff fb82 	bl	800a748 <_ZNSt6vectorI15PartTetrisBlockSaIS0_EE17_M_default_appendEj>
	myFigure = CreateFigure(*this);
 800b044:	4628      	mov	r0, r5
 800b046:	f7ff fd20 	bl	800aa8a <_Z12CreateFigureR13TetrisManager>
	  _M_start = __x._M_start;
 800b04a:	68ef      	ldr	r7, [r5, #12]
	  _M_finish = __x._M_finish;
 800b04c:	692e      	ldr	r6, [r5, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 800b04e:	f8d5 8014 	ldr.w	r8, [r5, #20]
	  _M_start = __x._M_start;
 800b052:	6803      	ldr	r3, [r0, #0]
 800b054:	60eb      	str	r3, [r5, #12]
	  _M_finish = __x._M_finish;
 800b056:	6843      	ldr	r3, [r0, #4]
 800b058:	612b      	str	r3, [r5, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 800b05a:	6883      	ldr	r3, [r0, #8]
 800b05c:	616b      	str	r3, [r5, #20]
	  _M_start = __x._M_start;
 800b05e:	6004      	str	r4, [r0, #0]
	  _M_finish = __x._M_finish;
 800b060:	6044      	str	r4, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800b062:	6084      	str	r4, [r0, #8]
 800b064:	42b7      	cmp	r7, r6
 800b066:	d018      	beq.n	800b09a <_ZN13TetrisManagerC1Ev+0x78>
 800b068:	463c      	mov	r4, r7
 800b06a:	e002      	b.n	800b072 <_ZN13TetrisManagerC1Ev+0x50>
 800b06c:	343c      	adds	r4, #60	; 0x3c
 800b06e:	42a6      	cmp	r6, r4
 800b070:	d013      	beq.n	800b09a <_ZN13TetrisManagerC1Ev+0x78>
	_M_deallocate(_M_impl._M_start,
 800b072:	69a0      	ldr	r0, [r4, #24]
	if (__p)
 800b074:	b118      	cbz	r0, 800b07e <_ZN13TetrisManagerC1Ev+0x5c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	1a09      	subs	r1, r1, r0
 800b07a:	f001 fa5f 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b07e:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 800b080:	b118      	cbz	r0, 800b08a <_ZN13TetrisManagerC1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b082:	6961      	ldr	r1, [r4, #20]
 800b084:	1a09      	subs	r1, r1, r0
 800b086:	f001 fa59 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b08a:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d0ed      	beq.n	800b06c <_ZN13TetrisManagerC1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	1a09      	subs	r1, r1, r0
 800b094:	f001 fa52 	bl	800c53c <_ZdlPvj>
 800b098:	e7e8      	b.n	800b06c <_ZN13TetrisManagerC1Ev+0x4a>
	if (__p)
 800b09a:	b127      	cbz	r7, 800b0a6 <_ZN13TetrisManagerC1Ev+0x84>
 800b09c:	eba8 0107 	sub.w	r1, r8, r7
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f001 fa4b 	bl	800c53c <_ZdlPvj>
}
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0ac <_Z19TetrisButtonHandlerR12TetrisFigureRm>:
extern but::ButtonWrapper* but2;
extern but::ButtonWrapper* but3;
extern but::ButtonWrapper* but4;

bool TetrisButtonHandler(TetrisFigure& figure, uint32_t& delay)
{
 800b0ac:	b508      	push	{r3, lr}

	if(but4->LogicState_ != LogicState::NONE)
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x8c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	b1a3      	cbz	r3, 800b0e0 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x34>
	{
		if(but4->LogicState_ == LogicState::WAS_PRESSED)
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d003      	beq.n	800b0c2 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x16>
		{
			delay = TetrisLowDelay;
			but4->LogicState_ = LogicState::WAS_SHORT_PRESSED;
		}
		else if(but4->LogicState_ == LogicState::WAS_RELEASED)
 800b0ba:	2b04      	cmp	r3, #4
 800b0bc:	d009      	beq.n	800b0d2 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x26>
	else if(but3->LogicState_ == LogicState::WAS_PRESSED){
		figure.Rotate();
		but3->LogicState_ = LogicState::NONE;
		return true;
	}
	return false;
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e01f      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
			delay = TetrisLowDelay;
 800b0c2:	2364      	movs	r3, #100	; 0x64
 800b0c4:	600b      	str	r3, [r1, #0]
			but4->LogicState_ = LogicState::WAS_SHORT_PRESSED;
 800b0c6:	4b1c      	ldr	r3, [pc, #112]	; (800b138 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x8c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	625a      	str	r2, [r3, #36]	; 0x24
	return false;
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	e017      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
			delay = TetrisHighDelay;
 800b0d2:	23fa      	movs	r3, #250	; 0xfa
 800b0d4:	600b      	str	r3, [r1, #0]
			but4->LogicState_ = LogicState::NONE;
 800b0d6:	4b18      	ldr	r3, [pc, #96]	; (800b138 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x8c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2000      	movs	r0, #0
 800b0dc:	6258      	str	r0, [r3, #36]	; 0x24
 800b0de:	e010      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
	else if(but1->LogicState_ == LogicState::WAS_PRESSED){
 800b0e0:	4b16      	ldr	r3, [pc, #88]	; (800b13c <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x90>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d00c      	beq.n	800b104 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x58>
	else if(but2->LogicState_ == LogicState::WAS_PRESSED){
 800b0ea:	4b15      	ldr	r3, [pc, #84]	; (800b140 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x94>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d010      	beq.n	800b116 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x6a>
	else if(but3->LogicState_ == LogicState::WAS_PRESSED){
 800b0f4:	4b13      	ldr	r3, [pc, #76]	; (800b144 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x98>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	2b01      	cmp	r3, #1
	return false;
 800b0fc:	bf18      	it	ne
 800b0fe:	2000      	movne	r0, #0
	else if(but3->LogicState_ == LogicState::WAS_PRESSED){
 800b100:	d012      	beq.n	800b128 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x7c>
}
 800b102:	bd08      	pop	{r3, pc}
		figure.MoveHorizontally(Directions::LEFT);
 800b104:	2100      	movs	r1, #0
 800b106:	f7ff f9d8 	bl	800a4ba <_ZN12TetrisFigure16MoveHorizontallyE10Directions>
		but1->LogicState_ = LogicState::NONE;
 800b10a:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x90>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	625a      	str	r2, [r3, #36]	; 0x24
		return true;
 800b112:	2001      	movs	r0, #1
 800b114:	e7f5      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
		figure.MoveHorizontally(Directions::RIGHT);
 800b116:	2101      	movs	r1, #1
 800b118:	f7ff f9cf 	bl	800a4ba <_ZN12TetrisFigure16MoveHorizontallyE10Directions>
		but2->LogicState_ = LogicState::NONE;
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x94>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2200      	movs	r2, #0
 800b122:	625a      	str	r2, [r3, #36]	; 0x24
		return true;
 800b124:	2001      	movs	r0, #1
 800b126:	e7ec      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
		figure.Rotate();
 800b128:	f7ff fa86 	bl	800a638 <_ZN12TetrisFigure6RotateEv>
		but3->LogicState_ = LogicState::NONE;
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x98>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2200      	movs	r2, #0
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
		return true;
 800b134:	2001      	movs	r0, #1
 800b136:	e7e4      	b.n	800b102 <_Z19TetrisButtonHandlerR12TetrisFigureRm+0x56>
 800b138:	2000088c 	.word	0x2000088c
 800b13c:	20000880 	.word	0x20000880
 800b140:	20000884 	.word	0x20000884
 800b144:	20000888 	.word	0x20000888

0800b148 <_Z10TetrisTaskv>:
		if (++col == figure.side) { ++row, col = 0; }
	});
}

void TetrisTask()
{
 800b148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b14a:	b08d      	sub	sp, #52	; 0x34
	tft_fillScreen(BACKGROUND);
 800b14c:	2000      	movs	r0, #0
 800b14e:	f000 f8a5 	bl	800b29c <_Z14tft_fillScreent>
	tft_setRotation(PORTRAIT_ORIENTATION);
 800b152:	2000      	movs	r0, #0
 800b154:	f000 f970 	bl	800b438 <_Z15tft_setRotationh>

	TetrisManager manager;
 800b158:	a804      	add	r0, sp, #16
 800b15a:	f7ff ff62 	bl	800b022 <_ZN13TetrisManagerC1Ev>
	uint32_t delay = TetrisHighDelay;
 800b15e:	23fa      	movs	r3, #250	; 0xfa
 800b160:	9303      	str	r3, [sp, #12]
	uint32_t time = HAL_GetTick();
 800b162:	f7fc ff4f 	bl	8008004 <HAL_GetTick>
 800b166:	4604      	mov	r4, r0
	: _M_a(__a), _M_b(__b)
 800b168:	2300      	movs	r3, #0
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	2306      	movs	r3, #6
 800b16e:	9302      	str	r3, [sp, #8]
        { return this->operator()(__urng, _M_param); }
 800b170:	aa01      	add	r2, sp, #4
 800b172:	a90a      	add	r1, sp, #40	; 0x28
 800b174:	4610      	mov	r0, r2
 800b176:	f7fe fd53 	bl	8009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>
	uint32_t numFigure = manager.generator.generate(0, QUANTITY_FIGURE - 1);

	while(manager.END_OF_GAME)
 800b17a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b17e:	b353      	cbz	r3, 800b1d6 <_Z10TetrisTaskv+0x8e>
 800b180:	4606      	mov	r6, r0
	: _M_a(__a), _M_b(__b)
 800b182:	2700      	movs	r7, #0
 800b184:	e01a      	b.n	800b1bc <_Z10TetrisTaskv+0x74>
 800b186:	9701      	str	r7, [sp, #4]
 800b188:	2306      	movs	r3, #6
 800b18a:	9302      	str	r3, [sp, #8]
        { return this->operator()(__urng, _M_param); }
 800b18c:	aa01      	add	r2, sp, #4
 800b18e:	a90a      	add	r1, sp, #40	; 0x28
 800b190:	4610      	mov	r0, r2
 800b192:	f7fe fd45 	bl	8009c20 <_ZNSt24uniform_int_distributionIlEclISt26linear_congruential_engineIjLj16807ELj0ELj2147483647EEEElRT_RKNS0_10param_typeE>
 800b196:	4606      	mov	r6, r0
 800b198:	e019      	b.n	800b1ce <_Z10TetrisTaskv+0x86>
		{
			numFigure = manager.generator.generate(0, QUANTITY_FIGURE - 1);
		}
		while(computeTimeDuration(time) < delay)
		{
			TetrisButtonHandler(manager.myFigure[numFigure], delay);
 800b19a:	a903      	add	r1, sp, #12
 800b19c:	9807      	ldr	r0, [sp, #28]
 800b19e:	4428      	add	r0, r5
 800b1a0:	f7ff ff84 	bl	800b0ac <_Z19TetrisButtonHandlerR12TetrisFigureRm>
		while(computeTimeDuration(time) < delay)
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7fe fc31 	bl	8009a0c <_Z19computeTimeDurationm>
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	4298      	cmp	r0, r3
 800b1ae:	d3f4      	bcc.n	800b19a <_Z10TetrisTaskv+0x52>
		}
		time = HAL_GetTick();
 800b1b0:	f7fc ff28 	bl	8008004 <HAL_GetTick>
 800b1b4:	4604      	mov	r4, r0
	while(manager.END_OF_GAME)
 800b1b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b1ba:	b163      	cbz	r3, 800b1d6 <_Z10TetrisTaskv+0x8e>
	return *(this->_M_impl._M_start + __n);
 800b1bc:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
		if(!manager.myFigure[numFigure].MoveDown())
 800b1c0:	9807      	ldr	r0, [sp, #28]
 800b1c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b1c6:	f7ff fa99 	bl	800a6fc <_ZN12TetrisFigure8MoveDownEv>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0db      	beq.n	800b186 <_Z10TetrisTaskv+0x3e>
 800b1ce:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 800b1d2:	00ad      	lsls	r5, r5, #2
 800b1d4:	e7e6      	b.n	800b1a4 <_Z10TetrisTaskv+0x5c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b1d6:	9c07      	ldr	r4, [sp, #28]
 800b1d8:	9d08      	ldr	r5, [sp, #32]
 800b1da:	42ac      	cmp	r4, r5
 800b1dc:	d110      	bne.n	800b200 <_Z10TetrisTaskv+0xb8>
	_M_deallocate(_M_impl._M_start,
 800b1de:	9807      	ldr	r0, [sp, #28]
	if (__p)
 800b1e0:	b118      	cbz	r0, 800b1ea <_Z10TetrisTaskv+0xa2>
 800b1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1e4:	1a09      	subs	r1, r1, r0
 800b1e6:	f001 f9a9 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b1ea:	9804      	ldr	r0, [sp, #16]
	if (__p)
 800b1ec:	b118      	cbz	r0, 800b1f6 <_Z10TetrisTaskv+0xae>
 800b1ee:	9906      	ldr	r1, [sp, #24]
 800b1f0:	1a09      	subs	r1, r1, r0
 800b1f2:	f001 f9a3 	bl	800c53c <_ZdlPvj>
	}
}
 800b1f6:	b00d      	add	sp, #52	; 0x34
 800b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fa:	343c      	adds	r4, #60	; 0x3c
 800b1fc:	42a5      	cmp	r5, r4
 800b1fe:	d0ee      	beq.n	800b1de <_Z10TetrisTaskv+0x96>
	_M_deallocate(_M_impl._M_start,
 800b200:	69a0      	ldr	r0, [r4, #24]
	if (__p)
 800b202:	b118      	cbz	r0, 800b20c <_Z10TetrisTaskv+0xc4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	1a09      	subs	r1, r1, r0
 800b208:	f001 f998 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b20c:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 800b20e:	b118      	cbz	r0, 800b218 <_Z10TetrisTaskv+0xd0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b210:	6961      	ldr	r1, [r4, #20]
 800b212:	1a09      	subs	r1, r1, r0
 800b214:	f001 f992 	bl	800c53c <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800b218:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0ed      	beq.n	800b1fa <_Z10TetrisTaskv+0xb2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b21e:	68a1      	ldr	r1, [r4, #8]
 800b220:	1a09      	subs	r1, r1, r0
 800b222:	f001 f98b 	bl	800c53c <_ZdlPvj>
 800b226:	e7e8      	b.n	800b1fa <_Z10TetrisTaskv+0xb2>

0800b228 <_Z9tft_beginv>:
#ifndef abs
#define abs(a) ((a)<0?-(a):a)
#endif

uint16_t tft_begin(void)
{
 800b228:	b508      	push	{r3, lr}
     WIDTH = TFTWIDTH;
 800b22a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800b22e:	4a0f      	ldr	r2, [pc, #60]	; (800b26c <_Z9tft_beginv+0x44>)
 800b230:	8013      	strh	r3, [r2, #0]
     HEIGHT = TFTHEIGHT;
 800b232:	4a0f      	ldr	r2, [pc, #60]	; (800b270 <_Z9tft_beginv+0x48>)
 800b234:	8013      	strh	r3, [r2, #0]
    _width    = WIDTH;
 800b236:	4a0f      	ldr	r2, [pc, #60]	; (800b274 <_Z9tft_beginv+0x4c>)
 800b238:	8013      	strh	r3, [r2, #0]
    _height   = HEIGHT;
 800b23a:	4a0f      	ldr	r2, [pc, #60]	; (800b278 <_Z9tft_beginv+0x50>)
 800b23c:	8013      	strh	r3, [r2, #0]
    rotation  = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	4a0e      	ldr	r2, [pc, #56]	; (800b27c <_Z9tft_beginv+0x54>)
 800b242:	7013      	strb	r3, [r2, #0]
    cursor_y  = cursor_x    = 0;
 800b244:	4a0e      	ldr	r2, [pc, #56]	; (800b280 <_Z9tft_beginv+0x58>)
 800b246:	8013      	strh	r3, [r2, #0]
 800b248:	4a0e      	ldr	r2, [pc, #56]	; (800b284 <_Z9tft_beginv+0x5c>)
 800b24a:	8013      	strh	r3, [r2, #0]
    textsize  = 1;
 800b24c:	2201      	movs	r2, #1
 800b24e:	490e      	ldr	r1, [pc, #56]	; (800b288 <_Z9tft_beginv+0x60>)
 800b250:	700a      	strb	r2, [r1, #0]
    textcolor = textbgcolor = 0xFFFF;
 800b252:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b256:	480d      	ldr	r0, [pc, #52]	; (800b28c <_Z9tft_beginv+0x64>)
 800b258:	8001      	strh	r1, [r0, #0]
 800b25a:	480d      	ldr	r0, [pc, #52]	; (800b290 <_Z9tft_beginv+0x68>)
 800b25c:	8001      	strh	r1, [r0, #0]
    wrap      = true;
 800b25e:	490d      	ldr	r1, [pc, #52]	; (800b294 <_Z9tft_beginv+0x6c>)
 800b260:	700a      	strb	r2, [r1, #0]
    gfxFont   = NULL;
 800b262:	4a0d      	ldr	r2, [pc, #52]	; (800b298 <_Z9tft_beginv+0x70>)
 800b264:	6013      	str	r3, [r2, #0]
    return ili9341_begin();
 800b266:	f001 f83d 	bl	800c2e4 <_Z13ili9341_beginv>
}
 800b26a:	bd08      	pop	{r3, pc}
 800b26c:	20000892 	.word	0x20000892
 800b270:	20000890 	.word	0x20000890
 800b274:	20000896 	.word	0x20000896
 800b278:	20000894 	.word	0x20000894
 800b27c:	200008a0 	.word	0x200008a0
 800b280:	20000898 	.word	0x20000898
 800b284:	2000089a 	.word	0x2000089a
 800b288:	200008a6 	.word	0x200008a6
 800b28c:	200008a2 	.word	0x200008a2
 800b290:	200008a4 	.word	0x200008a4
 800b294:	200008a7 	.word	0x200008a7
 800b298:	2000089c 	.word	0x2000089c

0800b29c <_Z14tft_fillScreent>:
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
}

void tft_fillScreen(uint16_t color)
{
 800b29c:	b500      	push	{lr}
 800b29e:	b083      	sub	sp, #12
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
 800b2a0:	9000      	str	r0, [sp, #0]
 800b2a2:	4b06      	ldr	r3, [pc, #24]	; (800b2bc <_Z14tft_fillScreent+0x20>)
 800b2a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2a8:	4a05      	ldr	r2, [pc, #20]	; (800b2c0 <_Z14tft_fillScreent+0x24>)
 800b2aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	f001 f8ab 	bl	800c40c <_Z8fillRectsssst>
}
 800b2b6:	b003      	add	sp, #12
 800b2b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2bc:	20000894 	.word	0x20000894
 800b2c0:	20000896 	.word	0x20000896

0800b2c4 <_Z20tft_fillCircleHelperssshst>:
    tft_fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void tft_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	b087      	sub	sp, #28
 800b2ca:	9104      	str	r1, [sp, #16]
 800b2cc:	4617      	mov	r7, r2
 800b2ce:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800b2d2:	9200      	str	r2, [sp, #0]

    int16_t f     = 1 - r;
 800b2d4:	b2ba      	uxth	r2, r7
 800b2d6:	f1c2 0401 	rsb	r4, r2, #1
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
 800b2da:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 800b2de:	0052      	lsls	r2, r2, #1
 800b2e0:	b212      	sxth	r2, r2
 800b2e2:	9201      	str	r2, [sp, #4]
    int16_t x     = 0;
    int16_t y     = r;

    while (x<y)
 800b2e4:	2f00      	cmp	r7, #0
 800b2e6:	dd64      	ble.n	800b3b2 <_Z20tft_fillCircleHelperssshst+0xee>
 800b2e8:	b224      	sxth	r4, r4
 800b2ea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b2ee:	9205      	str	r2, [sp, #20]
 800b2f0:	1cd6      	adds	r6, r2, #3
 800b2f2:	b2b6      	uxth	r6, r6
    int16_t x     = 0;
 800b2f4:	2500      	movs	r5, #0
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;

        if (cornername & 0x1)
 800b2f6:	f003 0201 	and.w	r2, r3, #1
 800b2fa:	9202      	str	r2, [sp, #8]
        {
            tft_writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800b2fc:	fa1f fa80 	uxth.w	sl, r0
            tft_writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2)
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	9303      	str	r3, [sp, #12]
 800b306:	e017      	b.n	800b338 <_Z20tft_fillCircleHelperssshst+0x74>
            y--;
 800b308:	3f01      	subs	r7, #1
 800b30a:	b23f      	sxth	r7, r7
            ddF_y += 2;
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	3302      	adds	r3, #2
 800b310:	b21a      	sxth	r2, r3
 800b312:	9201      	str	r2, [sp, #4]
            f     += ddF_y;
 800b314:	441c      	add	r4, r3
 800b316:	b224      	sxth	r4, r4
        x++;
 800b318:	3501      	adds	r5, #1
 800b31a:	fa1f f885 	uxth.w	r8, r5
 800b31e:	b22d      	sxth	r5, r5
        ddF_x += 2;
 800b320:	eb04 0448 	add.w	r4, r4, r8, lsl #1
        f     += ddF_x;
 800b324:	3401      	adds	r4, #1
 800b326:	b224      	sxth	r4, r4
        if (cornername & 0x1)
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	b943      	cbnz	r3, 800b33e <_Z20tft_fillCircleHelperssshst+0x7a>
        if (cornername & 0x2)
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	bb1b      	cbnz	r3, 800b378 <_Z20tft_fillCircleHelperssshst+0xb4>
    while (x<y)
 800b330:	3602      	adds	r6, #2
 800b332:	b2b6      	uxth	r6, r6
 800b334:	42af      	cmp	r7, r5
 800b336:	dd3c      	ble.n	800b3b2 <_Z20tft_fillCircleHelperssshst+0xee>
        if (f >= 0)
 800b338:	2c00      	cmp	r4, #0
 800b33a:	dae5      	bge.n	800b308 <_Z20tft_fillCircleHelperssshst+0x44>
 800b33c:	e7ec      	b.n	800b318 <_Z20tft_fillCircleHelperssshst+0x54>
            tft_writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800b33e:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800b342:	fa1f f987 	uxth.w	r9, r7
 800b346:	9b05      	ldr	r3, [sp, #20]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 800b34e:	ebab 0109 	sub.w	r1, fp, r9
    drawFastVLine(x, y, h, color);
 800b352:	eb0a 0008 	add.w	r0, sl, r8
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	b212      	sxth	r2, r2
 800b35a:	b209      	sxth	r1, r1
 800b35c:	b200      	sxth	r0, r0
 800b35e:	f001 f831 	bl	800c3c4 <_Z13drawFastVLinessst>
 800b362:	ebab 0108 	sub.w	r1, fp, r8
            tft_writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 800b366:	eb0a 0009 	add.w	r0, sl, r9
    drawFastVLine(x, y, h, color);
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	b232      	sxth	r2, r6
 800b36e:	b209      	sxth	r1, r1
 800b370:	b200      	sxth	r0, r0
 800b372:	f001 f827 	bl	800c3c4 <_Z13drawFastVLinessst>
}
 800b376:	e7d9      	b.n	800b32c <_Z20tft_fillCircleHelperssshst+0x68>
        {
            tft_writeFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800b378:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800b37c:	fa1f f987 	uxth.w	r9, r7
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 800b388:	ebab 0109 	sub.w	r1, fp, r9
    drawFastVLine(x, y, h, color);
 800b38c:	ebaa 0008 	sub.w	r0, sl, r8
 800b390:	9b00      	ldr	r3, [sp, #0]
 800b392:	b212      	sxth	r2, r2
 800b394:	b209      	sxth	r1, r1
 800b396:	b200      	sxth	r0, r0
 800b398:	f001 f814 	bl	800c3c4 <_Z13drawFastVLinessst>
 800b39c:	ebab 0108 	sub.w	r1, fp, r8
            tft_writeFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800b3a0:	ebaa 0009 	sub.w	r0, sl, r9
    drawFastVLine(x, y, h, color);
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	b232      	sxth	r2, r6
 800b3a8:	b209      	sxth	r1, r1
 800b3aa:	b200      	sxth	r0, r0
 800b3ac:	f001 f80a 	bl	800c3c4 <_Z13drawFastVLinessst>
}
 800b3b0:	e7be      	b.n	800b330 <_Z20tft_fillCircleHelperssshst+0x6c>
        }
    }
}
 800b3b2:	b007      	add	sp, #28
 800b3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3b8 <_Z17tft_fillRoundRectssssst>:
    tft_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

// Fill a rounded rectangle
void tft_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	460c      	mov	r4, r1
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 800b3c6:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
    // smarter version
    tft_writeFillRect(x+r, y, w-2*r, h, color);
 800b3ca:	b285      	uxth	r5, r0
 800b3cc:	fa1f f88a 	uxth.w	r8, sl
 800b3d0:	eb05 0708 	add.w	r7, r5, r8
 800b3d4:	b23f      	sxth	r7, r7
 800b3d6:	b296      	uxth	r6, r2
 800b3d8:	ea4f 0948 	mov.w	r9, r8, lsl #1
 800b3dc:	fa1f f989 	uxth.w	r9, r9
 800b3e0:	eba6 0209 	sub.w	r2, r6, r9
    fillRect(x,y,w,h,color);
 800b3e4:	f8cd b000 	str.w	fp, [sp]
 800b3e8:	b212      	sxth	r2, r2
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f001 f80e 	bl	800c40c <_Z8fillRectsssst>

    // draw four corners
    tft_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800b3f0:	4444      	add	r4, r8
 800b3f2:	b224      	sxth	r4, r4
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	eba3 0909 	sub.w	r9, r3, r9
 800b3fc:	fa0f f989 	sxth.w	r9, r9
 800b400:	1e70      	subs	r0, r6, #1
 800b402:	4428      	add	r0, r5
 800b404:	eba0 0008 	sub.w	r0, r0, r8
 800b408:	f8cd b004 	str.w	fp, [sp, #4]
 800b40c:	f8cd 9000 	str.w	r9, [sp]
 800b410:	2301      	movs	r3, #1
 800b412:	4652      	mov	r2, sl
 800b414:	4621      	mov	r1, r4
 800b416:	b200      	sxth	r0, r0
 800b418:	f7ff ff54 	bl	800b2c4 <_Z20tft_fillCircleHelperssshst>
    tft_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800b41c:	f8cd b004 	str.w	fp, [sp, #4]
 800b420:	f8cd 9000 	str.w	r9, [sp]
 800b424:	2302      	movs	r3, #2
 800b426:	4652      	mov	r2, sl
 800b428:	4621      	mov	r1, r4
 800b42a:	4638      	mov	r0, r7
 800b42c:	f7ff ff4a 	bl	800b2c4 <_Z20tft_fillCircleHelperssshst>
}
 800b430:	b005      	add	sp, #20
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b438 <_Z15tft_setRotationh>:
{
    return rotation;
}

void tft_setRotation(uint8_t x)
{
 800b438:	b508      	push	{r3, lr}
    rotation = (x & 3);
 800b43a:	f000 0303 	and.w	r3, r0, #3
 800b43e:	4a0e      	ldr	r2, [pc, #56]	; (800b478 <_Z15tft_setRotationh+0x40>)
 800b440:	7013      	strb	r3, [r2, #0]
    switch(rotation)
 800b442:	2b03      	cmp	r3, #3
 800b444:	d80b      	bhi.n	800b45e <_Z15tft_setRotationh+0x26>
 800b446:	e8df f003 	tbb	[pc, r3]
 800b44a:	0d02      	.short	0x0d02
 800b44c:	0d02      	.short	0x0d02
    {
        case 0:
        case 2:
            _width  = WIDTH;
 800b44e:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <_Z15tft_setRotationh+0x44>)
 800b450:	881a      	ldrh	r2, [r3, #0]
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <_Z15tft_setRotationh+0x48>)
 800b454:	801a      	strh	r2, [r3, #0]
            _height = HEIGHT;
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <_Z15tft_setRotationh+0x4c>)
 800b458:	881a      	ldrh	r2, [r3, #0]
 800b45a:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <_Z15tft_setRotationh+0x50>)
 800b45c:	801a      	strh	r2, [r3, #0]
        case 3:
            _width  = HEIGHT;
            _height = WIDTH;
            break;
    }
    setRotation(x);
 800b45e:	f001 f819 	bl	800c494 <_Z11setRotationh>
}
 800b462:	bd08      	pop	{r3, pc}
            _width  = HEIGHT;
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <_Z15tft_setRotationh+0x4c>)
 800b466:	881a      	ldrh	r2, [r3, #0]
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <_Z15tft_setRotationh+0x48>)
 800b46a:	801a      	strh	r2, [r3, #0]
            _height = WIDTH;
 800b46c:	4b03      	ldr	r3, [pc, #12]	; (800b47c <_Z15tft_setRotationh+0x44>)
 800b46e:	881a      	ldrh	r2, [r3, #0]
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <_Z15tft_setRotationh+0x50>)
 800b472:	801a      	strh	r2, [r3, #0]
            break;
 800b474:	e7f3      	b.n	800b45e <_Z15tft_setRotationh+0x26>
 800b476:	bf00      	nop
 800b478:	200008a0 	.word	0x200008a0
 800b47c:	20000892 	.word	0x20000892
 800b480:	20000896 	.word	0x20000896
 800b484:	20000890 	.word	0x20000890
 800b488:	20000894 	.word	0x20000894

0800b48c <_Z7delayMSm>:


//Arduino Function Wrapper...

void delayMS(uint32_t ms)
{
 800b48c:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 800b48e:	f7fc fdbf 	bl	8008010 <HAL_Delay>
}
 800b492:	bd08      	pop	{r3, pc}

0800b494 <_Z7delayUSm>:


#define STM32_DELAY_US_MULT (SystemCoreClock / 6000000U)
/*inline*/ void delayUS(uint32_t us)
{
    us *= STM32_DELAY_US_MULT;
 800b494:	4b06      	ldr	r3, [pc, #24]	; (800b4b0 <_Z7delayUSm+0x1c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a06      	ldr	r2, [pc, #24]	; (800b4b4 <_Z7delayUSm+0x20>)
 800b49a:	fba2 2303 	umull	r2, r3, r2, r3
 800b49e:	0cdb      	lsrs	r3, r3, #19
 800b4a0:	fb00 f303 	mul.w	r3, r0, r3

    /* fudge for function call overhead  */
    us--;
 800b4a4:	3b01      	subs	r3, #1
    asm volatile("   mov r0, %[us]          \n\t"
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3801      	subs	r0, #1
 800b4aa:	d8fd      	bhi.n	800b4a8 <_Z7delayUSm+0x14>
                 "1: subs r0, #1            \n\t"
                 "   bhi 1b                 \n\t"
                 :
                 : [us] "r" (us)
                 : "r0");
}
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	20000000 	.word	0x20000000
 800b4b4:	165e9f81 	.word	0x165e9f81

0800b4b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b4b8:	b500      	push	{lr}
 800b4ba:	b095      	sub	sp, #84	; 0x54
    _Error_Handler(__FILE__, __LINE__);
  }
#else
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b4bc:	2201      	movs	r2, #1
 800b4be:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b4c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b4c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b4ca:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b4d0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800b4d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800b4d6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b4d8:	a80a      	add	r0, sp, #40	; 0x28
 800b4da:	f7fd f9df 	bl	800889c <HAL_RCC_OscConfig>
 800b4de:	bb50      	cbnz	r0, 800b536 <_Z18SystemClock_Configv+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b4e0:	230f      	movs	r3, #15
 800b4e2:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b4e4:	2102      	movs	r1, #2
 800b4e6:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b4ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4f0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b4f2:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b4f4:	a805      	add	r0, sp, #20
 800b4f6:	f7fd fc07 	bl	8008d08 <HAL_RCC_ClockConfig>
 800b4fa:	b9e8      	cbnz	r0, 800b538 <_Z18SystemClock_Configv+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800b500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b504:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b506:	a801      	add	r0, sp, #4
 800b508:	f7fd fce4 	bl	8008ed4 <HAL_RCCEx_PeriphCLKConfig>
 800b50c:	b9a8      	cbnz	r0, 800b53a <_Z18SystemClock_Configv+0x82>
    _Error_Handler(__FILE__, __LINE__);
  }
#endif
    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b50e:	f7fd fcbb 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 800b512:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <_Z18SystemClock_Configv+0x84>)
 800b514:	fba3 3000 	umull	r3, r0, r3, r0
 800b518:	0980      	lsrs	r0, r0, #6
 800b51a:	f7fc ffd9 	bl	80084d0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b51e:	2004      	movs	r0, #4
 800b520:	f7fc ffea 	bl	80084f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b524:	2200      	movs	r2, #0
 800b526:	4611      	mov	r1, r2
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	f7fc ff9a 	bl	8008464 <HAL_NVIC_SetPriority>
}
 800b530:	b015      	add	sp, #84	; 0x54
 800b532:	f85d fb04 	ldr.w	pc, [sp], #4
  */
void _Error_Handler(const char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800b536:	e7fe      	b.n	800b536 <_Z18SystemClock_Configv+0x7e>
 800b538:	e7fe      	b.n	800b538 <_Z18SystemClock_Configv+0x80>
 800b53a:	e7fe      	b.n	800b53a <_Z18SystemClock_Configv+0x82>
 800b53c:	10624dd3 	.word	0x10624dd3

0800b540 <main>:
{
 800b540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b544:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800b546:	f7fc fd43 	bl	8007fd0 <HAL_Init>
  SystemClock_Config();
 800b54a:	f7ff ffb5 	bl	800b4b8 <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b54e:	4ba8      	ldr	r3, [pc, #672]	; (800b7f0 <main+0x2b0>)
 800b550:	699a      	ldr	r2, [r3, #24]
 800b552:	f042 0210 	orr.w	r2, r2, #16
 800b556:	619a      	str	r2, [r3, #24]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	f002 0210 	and.w	r2, r2, #16
 800b55e:	9201      	str	r2, [sp, #4]
 800b560:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b562:	699a      	ldr	r2, [r3, #24]
 800b564:	f042 0220 	orr.w	r2, r2, #32
 800b568:	619a      	str	r2, [r3, #24]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	f002 0220 	and.w	r2, r2, #32
 800b570:	9202      	str	r2, [sp, #8]
 800b572:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b574:	699a      	ldr	r2, [r3, #24]
 800b576:	f042 0204 	orr.w	r2, r2, #4
 800b57a:	619a      	str	r2, [r3, #24]
 800b57c:	699a      	ldr	r2, [r3, #24]
 800b57e:	f002 0204 	and.w	r2, r2, #4
 800b582:	9203      	str	r2, [sp, #12]
 800b584:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b586:	699a      	ldr	r2, [r3, #24]
 800b588:	f042 0208 	orr.w	r2, r2, #8
 800b58c:	619a      	str	r2, [r3, #24]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	f003 0308 	and.w	r3, r3, #8
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, LCD_nCS_Pin|LCD_RS_Pin|LCD_nWR_Pin, GPIO_PIN_RESET);
 800b598:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800b7f4 <main+0x2b4>
 800b59c:	2200      	movs	r2, #0
 800b59e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800b5a2:	4648      	mov	r0, r9
 800b5a4:	f7fd f8f2 	bl	800878c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SENSEL0_Pin|SENSEL1_Pin|SENSEL2_Pin|SENSEL3_Pin 
 800b5a8:	4f93      	ldr	r7, [pc, #588]	; (800b7f8 <main+0x2b8>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f248 01de 	movw	r1, #32990	; 0x80de
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7fd f8eb 	bl	800878c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 800b5b6:	4e91      	ldr	r6, [pc, #580]	; (800b7fc <main+0x2bc>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f240 21ff 	movw	r1, #767	; 0x2ff
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7fd f8e4 	bl	800878c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_nCS_Pin|LCD_RS_Pin|LCD_nWR_Pin;
 800b5c4:	f44f 4560 	mov.w	r5, #57344	; 0xe000
 800b5c8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5ca:	2401      	movs	r4, #1
 800b5cc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5ce:	f04f 0802 	mov.w	r8, #2
 800b5d2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5d6:	a907      	add	r1, sp, #28
 800b5d8:	4648      	mov	r0, r9
 800b5da:	f7fc ff9d 	bl	8008518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SENSEL0_Pin|SENSEL1_Pin|SENSEL2_Pin|SENSEL3_Pin 
 800b5de:	f248 03de 	movw	r3, #32990	; 0x80de
 800b5e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5e4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ea:	a907      	add	r1, sp, #28
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7fc ff93 	bl	8008518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 800b5f2:	f240 23ff 	movw	r3, #767	; 0x2ff
 800b5f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5f8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b5fa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5fc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5fe:	a907      	add	r1, sp, #28
 800b600:	4630      	mov	r0, r6
 800b602:	f7fc ff89 	bl	8008518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin;
 800b606:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b608:	2500      	movs	r5, #0
 800b60a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b60c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b610:	a907      	add	r1, sp, #28
 800b612:	4630      	mov	r0, r6
 800b614:	f7fc ff80 	bl	8008518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AMPSEL_Pin;
 800b618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b61c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b61e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b620:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b622:	a907      	add	r1, sp, #28
 800b624:	4630      	mov	r0, r6
 800b626:	f7fc ff77 	bl	8008518 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b62a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b62e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b630:	2303      	movs	r3, #3
 800b632:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b634:	a907      	add	r1, sp, #28
 800b636:	4638      	mov	r0, r7
 800b638:	f7fc ff6e 	bl	8008518 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 800b63c:	4870      	ldr	r0, [pc, #448]	; (800b800 <main+0x2c0>)
 800b63e:	4b71      	ldr	r3, [pc, #452]	; (800b804 <main+0x2c4>)
 800b640:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b642:	6085      	str	r5, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b644:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b646:	6145      	str	r5, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b648:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800b64c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b64e:	6045      	str	r5, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b650:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b652:	f7fc fdfb 	bl	800824c <HAL_ADC_Init>
 800b656:	2800      	cmp	r0, #0
 800b658:	f040 80f8 	bne.w	800b84c <main+0x30c>
  sConfig.Channel = ADC_CHANNEL_0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b660:	2201      	movs	r2, #1
 800b662:	9208      	str	r2, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b664:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b666:	a907      	add	r1, sp, #28
 800b668:	4865      	ldr	r0, [pc, #404]	; (800b800 <main+0x2c0>)
 800b66a:	f7fc fce3 	bl	8008034 <HAL_ADC_ConfigChannel>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f040 80ed 	bne.w	800b84e <main+0x30e>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800b674:	4862      	ldr	r0, [pc, #392]	; (800b800 <main+0x2c0>)
 800b676:	f7fc fe6d 	bl	8008354 <HAL_ADCEx_Calibration_Start>
  hadc2.Instance = ADC2;
 800b67a:	4863      	ldr	r0, [pc, #396]	; (800b808 <main+0x2c8>)
 800b67c:	4b63      	ldr	r3, [pc, #396]	; (800b80c <main+0x2cc>)
 800b67e:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b680:	2300      	movs	r3, #0
 800b682:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800b684:	2201      	movs	r2, #1
 800b686:	60c2      	str	r2, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b688:	6143      	str	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b68a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b68e:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b690:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 800b692:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800b694:	f7fc fdda 	bl	800824c <HAL_ADC_Init>
 800b698:	2800      	cmp	r0, #0
 800b69a:	f040 80d9 	bne.w	800b850 <main+0x310>
  sConfig.Channel = ADC_CHANNEL_5;
 800b69e:	2305      	movs	r3, #5
 800b6a0:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b6aa:	a907      	add	r1, sp, #28
 800b6ac:	4856      	ldr	r0, [pc, #344]	; (800b808 <main+0x2c8>)
 800b6ae:	f7fc fcc1 	bl	8008034 <HAL_ADC_ConfigChannel>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	f040 80cd 	bne.w	800b852 <main+0x312>
  HAL_ADCEx_Calibration_Start(&hadc2);
 800b6b8:	4853      	ldr	r0, [pc, #332]	; (800b808 <main+0x2c8>)
 800b6ba:	f7fc fe4b 	bl	8008354 <HAL_ADCEx_Calibration_Start>
  huart1.Instance = USART1;
 800b6be:	4854      	ldr	r0, [pc, #336]	; (800b810 <main+0x2d0>)
 800b6c0:	4b54      	ldr	r3, [pc, #336]	; (800b814 <main+0x2d4>)
 800b6c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800b6c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b6c8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b6ce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b6d0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b6d2:	220c      	movs	r2, #12
 800b6d4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b6da:	f7fe f805 	bl	80096e8 <HAL_UART_Init>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f040 80b8 	bne.w	800b854 <main+0x314>
  hi2c2.Instance = I2C2;
 800b6e4:	484c      	ldr	r0, [pc, #304]	; (800b818 <main+0x2d8>)
 800b6e6:	4b4d      	ldr	r3, [pc, #308]	; (800b81c <main+0x2dc>)
 800b6e8:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800b6ea:	4b4d      	ldr	r3, [pc, #308]	; (800b820 <main+0x2e0>)
 800b6ec:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b6f2:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b6f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b6f8:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b6fa:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b6fc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b6fe:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b700:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b702:	f7fd f849 	bl	8008798 <HAL_I2C_Init>
 800b706:	2800      	cmp	r0, #0
 800b708:	f040 80a5 	bne.w	800b856 <main+0x316>
  htim4.Instance = TIM4;
 800b70c:	4845      	ldr	r0, [pc, #276]	; (800b824 <main+0x2e4>)
 800b70e:	4b46      	ldr	r3, [pc, #280]	; (800b828 <main+0x2e8>)
 800b710:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b716:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 800b718:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b71a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b71c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800b71e:	f7fd fdb1 	bl	8009284 <HAL_TIM_OC_Init>
 800b722:	2800      	cmp	r0, #0
 800b724:	f040 8098 	bne.w	800b858 <main+0x318>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b728:	2300      	movs	r3, #0
 800b72a:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b72c:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b72e:	a905      	add	r1, sp, #20
 800b730:	483c      	ldr	r0, [pc, #240]	; (800b824 <main+0x2e4>)
 800b732:	f7fd fea6 	bl	8009482 <HAL_TIMEx_MasterConfigSynchronization>
 800b736:	2800      	cmp	r0, #0
 800b738:	f040 808f 	bne.w	800b85a <main+0x31a>
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800b73c:	2310      	movs	r3, #16
 800b73e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b744:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b746:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b748:	220c      	movs	r2, #12
 800b74a:	a907      	add	r1, sp, #28
 800b74c:	4835      	ldr	r0, [pc, #212]	; (800b824 <main+0x2e4>)
 800b74e:	f7fd fe2a 	bl	80093a6 <HAL_TIM_PWM_ConfigChannel>
 800b752:	2800      	cmp	r0, #0
 800b754:	f040 8082 	bne.w	800b85c <main+0x31c>
  HAL_TIM_MspPostInit(&htim4);
 800b758:	4832      	ldr	r0, [pc, #200]	; (800b824 <main+0x2e4>)
 800b75a:	f000 f96b 	bl	800ba34 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800b75e:	4833      	ldr	r0, [pc, #204]	; (800b82c <main+0x2ec>)
 800b760:	4b33      	ldr	r3, [pc, #204]	; (800b830 <main+0x2f0>)
 800b762:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b768:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0;
 800b76a:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b76c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b76e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b770:	f7fd fda2 	bl	80092b8 <HAL_TIM_PWM_Init>
 800b774:	2800      	cmp	r0, #0
 800b776:	d172      	bne.n	800b85e <main+0x31e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b778:	2300      	movs	r3, #0
 800b77a:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b77c:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b77e:	a905      	add	r1, sp, #20
 800b780:	482a      	ldr	r0, [pc, #168]	; (800b82c <main+0x2ec>)
 800b782:	f7fd fe7e 	bl	8009482 <HAL_TIMEx_MasterConfigSynchronization>
 800b786:	2800      	cmp	r0, #0
 800b788:	d16a      	bne.n	800b860 <main+0x320>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b78a:	2360      	movs	r3, #96	; 0x60
 800b78c:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b792:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b794:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b796:	2204      	movs	r2, #4
 800b798:	a907      	add	r1, sp, #28
 800b79a:	4824      	ldr	r0, [pc, #144]	; (800b82c <main+0x2ec>)
 800b79c:	f7fd fe03 	bl	80093a6 <HAL_TIM_PWM_ConfigChannel>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d15e      	bne.n	800b862 <main+0x322>
  HAL_TIM_MspPostInit(&htim3);
 800b7a4:	4821      	ldr	r0, [pc, #132]	; (800b82c <main+0x2ec>)
 800b7a6:	f000 f945 	bl	800ba34 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800b7aa:	4822      	ldr	r0, [pc, #136]	; (800b834 <main+0x2f4>)
 800b7ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7b0:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7b6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 800b7b8:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7ba:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7bc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800b7be:	f7fd fd61 	bl	8009284 <HAL_TIM_OC_Init>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d14e      	bne.n	800b864 <main+0x324>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b7ca:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b7cc:	a905      	add	r1, sp, #20
 800b7ce:	4819      	ldr	r0, [pc, #100]	; (800b834 <main+0x2f4>)
 800b7d0:	f7fd fe57 	bl	8009482 <HAL_TIMEx_MasterConfigSynchronization>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d146      	bne.n	800b866 <main+0x326>
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800b7d8:	2310      	movs	r3, #16
 800b7da:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800b7dc:	2200      	movs	r2, #0
 800b7de:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b7e0:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b7e2:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b7e4:	a907      	add	r1, sp, #28
 800b7e6:	4813      	ldr	r0, [pc, #76]	; (800b834 <main+0x2f4>)
 800b7e8:	f7fd fdae 	bl	8009348 <HAL_TIM_OC_ConfigChannel>
 800b7ec:	e024      	b.n	800b838 <main+0x2f8>
 800b7ee:	bf00      	nop
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	40011000 	.word	0x40011000
 800b7f8:	40010800 	.word	0x40010800
 800b7fc:	40010c00 	.word	0x40010c00
 800b800:	200008a8 	.word	0x200008a8
 800b804:	40012400 	.word	0x40012400
 800b808:	200008d8 	.word	0x200008d8
 800b80c:	40012800 	.word	0x40012800
 800b810:	20000a1c 	.word	0x20000a1c
 800b814:	40013800 	.word	0x40013800
 800b818:	20000908 	.word	0x20000908
 800b81c:	40005800 	.word	0x40005800
 800b820:	000186a0 	.word	0x000186a0
 800b824:	200009dc 	.word	0x200009dc
 800b828:	40000800 	.word	0x40000800
 800b82c:	2000099c 	.word	0x2000099c
 800b830:	40000400 	.word	0x40000400
 800b834:	2000095c 	.word	0x2000095c
 800b838:	b9b0      	cbnz	r0, 800b868 <main+0x328>
  HAL_TIM_MspPostInit(&htim2);
 800b83a:	480c      	ldr	r0, [pc, #48]	; (800b86c <main+0x32c>)
 800b83c:	f000 f8fa 	bl	800ba34 <HAL_TIM_MspPostInit>
  MainThread();
 800b840:	f7fe f8f1 	bl	8009a26 <_Z10MainThreadv>
}
 800b844:	2000      	movs	r0, #0
 800b846:	b00f      	add	sp, #60	; 0x3c
 800b848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while(1)
 800b84c:	e7fe      	b.n	800b84c <main+0x30c>
 800b84e:	e7fe      	b.n	800b84e <main+0x30e>
 800b850:	e7fe      	b.n	800b850 <main+0x310>
 800b852:	e7fe      	b.n	800b852 <main+0x312>
 800b854:	e7fe      	b.n	800b854 <main+0x314>
 800b856:	e7fe      	b.n	800b856 <main+0x316>
 800b858:	e7fe      	b.n	800b858 <main+0x318>
 800b85a:	e7fe      	b.n	800b85a <main+0x31a>
 800b85c:	e7fe      	b.n	800b85c <main+0x31c>
 800b85e:	e7fe      	b.n	800b85e <main+0x31e>
 800b860:	e7fe      	b.n	800b860 <main+0x320>
 800b862:	e7fe      	b.n	800b862 <main+0x322>
 800b864:	e7fe      	b.n	800b864 <main+0x324>
 800b866:	e7fe      	b.n	800b866 <main+0x326>
 800b868:	e7fe      	b.n	800b868 <main+0x328>
 800b86a:	bf00      	nop
 800b86c:	2000095c 	.word	0x2000095c

0800b870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b870:	b500      	push	{lr}
 800b872:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800b874:	4b21      	ldr	r3, [pc, #132]	; (800b8fc <HAL_MspInit+0x8c>)
 800b876:	699a      	ldr	r2, [r3, #24]
 800b878:	f042 0201 	orr.w	r2, r2, #1
 800b87c:	619a      	str	r2, [r3, #24]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b888:	2003      	movs	r0, #3
 800b88a:	f7fc fdd9 	bl	8008440 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b88e:	2200      	movs	r2, #0
 800b890:	4611      	mov	r1, r2
 800b892:	f06f 000b 	mvn.w	r0, #11
 800b896:	f7fc fde5 	bl	8008464 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b89a:	2200      	movs	r2, #0
 800b89c:	4611      	mov	r1, r2
 800b89e:	f06f 000a 	mvn.w	r0, #10
 800b8a2:	f7fc fddf 	bl	8008464 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	f06f 0009 	mvn.w	r0, #9
 800b8ae:	f7fc fdd9 	bl	8008464 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	f06f 0004 	mvn.w	r0, #4
 800b8ba:	f7fc fdd3 	bl	8008464 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	f06f 0003 	mvn.w	r0, #3
 800b8c6:	f7fc fdcd 	bl	8008464 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	f06f 0001 	mvn.w	r0, #1
 800b8d2:	f7fc fdc7 	bl	8008464 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4611      	mov	r1, r2
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	f7fc fdc1 	bl	8008464 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800b8e2:	4b07      	ldr	r3, [pc, #28]	; (800b900 <HAL_MspInit+0x90>)
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800b8ea:	605a      	str	r2, [r3, #4]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b8f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b8f4:	b003      	add	sp, #12
 800b8f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8fa:	bf00      	nop
 800b8fc:	40021000 	.word	0x40021000
 800b900:	40010000 	.word	0x40010000

0800b904 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b904:	b500      	push	{lr}
 800b906:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800b908:	6803      	ldr	r3, [r0, #0]
 800b90a:	4a17      	ldr	r2, [pc, #92]	; (800b968 <HAL_ADC_MspInit+0x64>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d005      	beq.n	800b91c <HAL_ADC_MspInit+0x18>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800b910:	4a16      	ldr	r2, [pc, #88]	; (800b96c <HAL_ADC_MspInit+0x68>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d015      	beq.n	800b942 <HAL_ADC_MspInit+0x3e>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800b916:	b007      	add	sp, #28
 800b918:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b91c:	4b14      	ldr	r3, [pc, #80]	; (800b970 <HAL_ADC_MspInit+0x6c>)
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b924:	619a      	str	r2, [r3, #24]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ADCIN_Pin;
 800b930:	2301      	movs	r3, #1
 800b932:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b934:	2303      	movs	r3, #3
 800b936:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ADCIN_GPIO_Port, &GPIO_InitStruct);
 800b938:	a902      	add	r1, sp, #8
 800b93a:	480e      	ldr	r0, [pc, #56]	; (800b974 <HAL_ADC_MspInit+0x70>)
 800b93c:	f7fc fdec 	bl	8008518 <HAL_GPIO_Init>
 800b940:	e7e9      	b.n	800b916 <HAL_ADC_MspInit+0x12>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800b942:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <HAL_ADC_MspInit+0x6c>)
 800b944:	699a      	ldr	r2, [r3, #24]
 800b946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b94a:	619a      	str	r2, [r3, #24]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CPLSEL_Pin;
 800b956:	2320      	movs	r3, #32
 800b958:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b95a:	2303      	movs	r3, #3
 800b95c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(CPLSEL_GPIO_Port, &GPIO_InitStruct);
 800b95e:	a902      	add	r1, sp, #8
 800b960:	4804      	ldr	r0, [pc, #16]	; (800b974 <HAL_ADC_MspInit+0x70>)
 800b962:	f7fc fdd9 	bl	8008518 <HAL_GPIO_Init>
}
 800b966:	e7d6      	b.n	800b916 <HAL_ADC_MspInit+0x12>
 800b968:	40012400 	.word	0x40012400
 800b96c:	40012800 	.word	0x40012800
 800b970:	40021000 	.word	0x40021000
 800b974:	40010800 	.word	0x40010800

0800b978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C2)
 800b978:	6802      	ldr	r2, [r0, #0]
 800b97a:	4b0f      	ldr	r3, [pc, #60]	; (800b9b8 <HAL_I2C_MspInit+0x40>)
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d000      	beq.n	800b982 <HAL_I2C_MspInit+0xa>
 800b980:	4770      	bx	lr
{
 800b982:	b500      	push	{lr}
 800b984:	b087      	sub	sp, #28
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b986:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b98a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b98c:	2312      	movs	r3, #18
 800b98e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b990:	2303      	movs	r3, #3
 800b992:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b994:	a902      	add	r1, sp, #8
 800b996:	4809      	ldr	r0, [pc, #36]	; (800b9bc <HAL_I2C_MspInit+0x44>)
 800b998:	f7fc fdbe 	bl	8008518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b99c:	4b08      	ldr	r3, [pc, #32]	; (800b9c0 <HAL_I2C_MspInit+0x48>)
 800b99e:	69da      	ldr	r2, [r3, #28]
 800b9a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b9a4:	61da      	str	r2, [r3, #28]
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b9b0:	b007      	add	sp, #28
 800b9b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9b6:	bf00      	nop
 800b9b8:	40005800 	.word	0x40005800
 800b9bc:	40010c00 	.word	0x40010c00
 800b9c0:	40021000 	.word	0x40021000

0800b9c4 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b9c4:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM4)
 800b9c6:	6802      	ldr	r2, [r0, #0]
 800b9c8:	4b18      	ldr	r3, [pc, #96]	; (800ba2c <HAL_TIM_PWM_MspInit+0x68>)
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d009      	beq.n	800b9e2 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  if(htim_pwm->Instance==TIM3)
 800b9ce:	6802      	ldr	r2, [r0, #0]
 800b9d0:	4b17      	ldr	r3, [pc, #92]	; (800ba30 <HAL_TIM_PWM_MspInit+0x6c>)
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d011      	beq.n	800b9fa <HAL_TIM_PWM_MspInit+0x36>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  if(htim_pwm->Instance==TIM2)
 800b9d6:	6803      	ldr	r3, [r0, #0]
 800b9d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9dc:	d019      	beq.n	800ba12 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800b9de:	b004      	add	sp, #16
 800b9e0:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b9e2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800b9e6:	69da      	ldr	r2, [r3, #28]
 800b9e8:	f042 0204 	orr.w	r2, r2, #4
 800b9ec:	61da      	str	r2, [r3, #28]
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	e7e9      	b.n	800b9ce <HAL_TIM_PWM_MspInit+0xa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b9fa:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	f042 0202 	orr.w	r2, r2, #2
 800ba04:	61da      	str	r2, [r3, #28]
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	9302      	str	r3, [sp, #8]
 800ba0e:	9b02      	ldr	r3, [sp, #8]
 800ba10:	e7e1      	b.n	800b9d6 <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ba12:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ba16:	69da      	ldr	r2, [r3, #28]
 800ba18:	f042 0201 	orr.w	r2, r2, #1
 800ba1c:	61da      	str	r2, [r3, #28]
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	9303      	str	r3, [sp, #12]
 800ba26:	9b03      	ldr	r3, [sp, #12]
}
 800ba28:	e7d9      	b.n	800b9de <HAL_TIM_PWM_MspInit+0x1a>
 800ba2a:	bf00      	nop
 800ba2c:	40000800 	.word	0x40000800
 800ba30:	40000400 	.word	0x40000400

0800ba34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 800ba34:	6802      	ldr	r2, [r0, #0]
 800ba36:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <HAL_TIM_MspPostInit+0x28>)
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d000      	beq.n	800ba3e <HAL_TIM_MspPostInit+0xa>
 800ba3c:	4770      	bx	lr
{
 800ba3e:	b500      	push	{lr}
 800ba40:	b085      	sub	sp, #20
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = TL_PWM_Pin;
 800ba42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba46:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba48:	2302      	movs	r3, #2
 800ba4a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba4c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(TL_PWM_GPIO_Port, &GPIO_InitStruct);
 800ba4e:	4669      	mov	r1, sp
 800ba50:	4803      	ldr	r0, [pc, #12]	; (800ba60 <HAL_TIM_MspPostInit+0x2c>)
 800ba52:	f7fc fd61 	bl	8008518 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
}
 800ba56:	b005      	add	sp, #20
 800ba58:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba5c:	40000800 	.word	0x40000800
 800ba60:	40010c00 	.word	0x40010c00

0800ba64 <HAL_TIM_OC_MspInit>:
  }
}


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ba64:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM4)
 800ba66:	6802      	ldr	r2, [r0, #0]
 800ba68:	4b18      	ldr	r3, [pc, #96]	; (800bacc <HAL_TIM_OC_MspInit+0x68>)
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d009      	beq.n	800ba82 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  if(htim_pwm->Instance==TIM3)
 800ba6e:	6802      	ldr	r2, [r0, #0]
 800ba70:	4b17      	ldr	r3, [pc, #92]	; (800bad0 <HAL_TIM_OC_MspInit+0x6c>)
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d011      	beq.n	800ba9a <HAL_TIM_OC_MspInit+0x36>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  if(htim_pwm->Instance==TIM2)
 800ba76:	6803      	ldr	r3, [r0, #0]
 800ba78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7c:	d019      	beq.n	800bab2 <HAL_TIM_OC_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800ba7e:	b004      	add	sp, #16
 800ba80:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ba82:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800ba86:	69da      	ldr	r2, [r3, #28]
 800ba88:	f042 0204 	orr.w	r2, r2, #4
 800ba8c:	61da      	str	r2, [r3, #28]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	e7e9      	b.n	800ba6e <HAL_TIM_OC_MspInit+0xa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ba9a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800ba9e:	69da      	ldr	r2, [r3, #28]
 800baa0:	f042 0202 	orr.w	r2, r2, #2
 800baa4:	61da      	str	r2, [r3, #28]
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	f003 0302 	and.w	r3, r3, #2
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	e7e1      	b.n	800ba76 <HAL_TIM_OC_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bab2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800bab6:	69da      	ldr	r2, [r3, #28]
 800bab8:	f042 0201 	orr.w	r2, r2, #1
 800babc:	61da      	str	r2, [r3, #28]
 800babe:	69db      	ldr	r3, [r3, #28]
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	9b03      	ldr	r3, [sp, #12]
}
 800bac8:	e7d9      	b.n	800ba7e <HAL_TIM_OC_MspInit+0x1a>
 800baca:	bf00      	nop
 800bacc:	40000800 	.word	0x40000800
 800bad0:	40000400 	.word	0x40000400

0800bad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800bad4:	6802      	ldr	r2, [r0, #0]
 800bad6:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <HAL_UART_MspInit+0x54>)
 800bad8:	429a      	cmp	r2, r3
 800bada:	d000      	beq.n	800bade <HAL_UART_MspInit+0xa>
 800badc:	4770      	bx	lr
{
 800bade:	b510      	push	{r4, lr}
 800bae0:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bae2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800bae6:	699a      	ldr	r2, [r3, #24]
 800bae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baec:	619a      	str	r2, [r3, #24]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800baf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bafc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bafe:	2302      	movs	r3, #2
 800bb00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bb02:	2303      	movs	r3, #3
 800bb04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb06:	4c09      	ldr	r4, [pc, #36]	; (800bb2c <HAL_UART_MspInit+0x58>)
 800bb08:	a902      	add	r1, sp, #8
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7fc fd04 	bl	8008518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800bb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb16:	2300      	movs	r3, #0
 800bb18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb1a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb1c:	a902      	add	r1, sp, #8
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f7fc fcfa 	bl	8008518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bb24:	b006      	add	sp, #24
 800bb26:	bd10      	pop	{r4, pc}
 800bb28:	40013800 	.word	0x40013800
 800bb2c:	40010800 	.word	0x40010800

0800bb30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bb30:	4770      	bx	lr

0800bb32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bb32:	e7fe      	b.n	800bb32 <HardFault_Handler>

0800bb34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bb34:	e7fe      	b.n	800bb34 <MemManage_Handler>

0800bb36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bb36:	e7fe      	b.n	800bb36 <BusFault_Handler>

0800bb38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bb38:	e7fe      	b.n	800bb38 <UsageFault_Handler>

0800bb3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bb3a:	4770      	bx	lr

0800bb3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bb3c:	4770      	bx	lr

0800bb3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bb3e:	4770      	bx	lr

0800bb40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800bb40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	///////////////
	SysTickThread();
 800bb42:	f7fd ff78 	bl	8009a36 <_Z13SysTickThreadv>
	///////////////

		/* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bb46:	f7fc fa55 	bl	8007ff4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800bb4a:	f7fc fce1 	bl	8008510 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bb4e:	bd08      	pop	{r3, pc}

0800bb50 <_write>:


extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len)
{
 800bb50:	b510      	push	{r4, lr}
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800bb52:	3801      	subs	r0, #1
 800bb54:	2801      	cmp	r0, #1
 800bb56:	d80b      	bhi.n	800bb70 <_write+0x20>
 800bb58:	4614      	mov	r4, r2
      return -1;
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 800bb5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	4807      	ldr	r0, [pc, #28]	; (800bb80 <_write+0x30>)
 800bb62:	f7fd fdf0 	bl	8009746 <HAL_UART_Transmit>

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800bb66:	2800      	cmp	r0, #0
 800bb68:	bf0c      	ite	eq
 800bb6a:	4620      	moveq	r0, r4
 800bb6c:	2000      	movne	r0, #0
}
 800bb6e:	bd10      	pop	{r4, pc}
      errno = EBADF;
 800bb70:	f001 ff00 	bl	800d974 <__errno>
 800bb74:	2309      	movs	r3, #9
 800bb76:	6003      	str	r3, [r0, #0]
      return -1;
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	e7f7      	b.n	800bb6e <_write+0x1e>
 800bb7e:	bf00      	nop
 800bb80:	20000a1c 	.word	0x20000a1c

0800bb84 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <SystemInit+0x40>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	f042 0201 	orr.w	r2, r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bb8e:	6859      	ldr	r1, [r3, #4]
 800bb90:	4a0d      	ldr	r2, [pc, #52]	; (800bbc8 <SystemInit+0x44>)
 800bb92:	400a      	ands	r2, r1
 800bb94:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800bb9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bba0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bba8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800bbb0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bbb2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bbb6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bbb8:	4b04      	ldr	r3, [pc, #16]	; (800bbcc <SystemInit+0x48>)
 800bbba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bbbe:	609a      	str	r2, [r3, #8]
#endif 
}
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	40021000 	.word	0x40021000
 800bbc8:	f8ff0000 	.word	0xf8ff0000
 800bbcc:	e000ed00 	.word	0xe000ed00

0800bbd0 <ts_itoa>:
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800bbd0:	4291      	cmp	r1, r2
 800bbd2:	d320      	bcc.n	800bc16 <ts_itoa+0x46>
	int div = 1;
 800bbd4:	2301      	movs	r3, #1
		div *= base;
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 800bbda:	fbb1 fcf3 	udiv	ip, r1, r3
 800bbde:	4594      	cmp	ip, r2
 800bbe0:	d2f9      	bcs.n	800bbd6 <ts_itoa+0x6>

	while (div != 0)
 800bbe2:	b1bb      	cbz	r3, 800bc14 <ts_itoa+0x44>
{
 800bbe4:	b430      	push	{r4, r5}
	{
		int num = d/div;
 800bbe6:	fbb1 fcf3 	udiv	ip, r1, r3
		d = d%div;
 800bbea:	fb03 111c 	mls	r1, r3, ip, r1
		div /= base;
 800bbee:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800bbf2:	f1bc 0f09 	cmp.w	ip, #9
			*((*buf)++) = (num-10) + 'A';
 800bbf6:	6804      	ldr	r4, [r0, #0]
 800bbf8:	f104 0501 	add.w	r5, r4, #1
 800bbfc:	6005      	str	r5, [r0, #0]
 800bbfe:	bfcc      	ite	gt
 800bc00:	f10c 0c37 	addgt.w	ip, ip, #55	; 0x37
		else
			*((*buf)++) = num + '0';
 800bc04:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
 800bc08:	f884 c000 	strb.w	ip, [r4]
	while (div != 0)
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1ea      	bne.n	800bbe6 <ts_itoa+0x16>
	}
}
 800bc10:	bc30      	pop	{r4, r5}
 800bc12:	4770      	bx	lr
 800bc14:	4770      	bx	lr
	int div = 1;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e7e4      	b.n	800bbe4 <ts_itoa+0x14>

0800bc1a <intpow>:
  if (float_precision > 8)
      float_precision = 8;
}

int intpow(int x, int y)
{
 800bc1a:	4602      	mov	r2, r0
	int res=x;

	if (y==0)
 800bc1c:	468c      	mov	ip, r1
 800bc1e:	b141      	cbz	r1, 800bc32 <intpow+0x18>
		return 1;

	for (int ii=1;ii<y;ii++)
 800bc20:	2901      	cmp	r1, #1
 800bc22:	dd08      	ble.n	800bc36 <intpow+0x1c>
 800bc24:	2301      	movs	r3, #1
	{
		res = res * x;
 800bc26:	fb02 f000 	mul.w	r0, r2, r0
	for (int ii=1;ii<y;ii++)
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	459c      	cmp	ip, r3
 800bc2e:	d1fa      	bne.n	800bc26 <intpow+0xc>
 800bc30:	4770      	bx	lr
		return 1;
 800bc32:	2001      	movs	r0, #1
 800bc34:	4770      	bx	lr
	}
	return res;
}
 800bc36:	4770      	bx	lr

0800bc38 <ts_ftoa>:

void ts_ftoa(char **buf, float f, int precision)
{
 800bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	4690      	mov	r8, r2
	int a=0,b=0,c=0,k=0,l=0;

	// check for negetive float
	if(f<0.0)
 800bc42:	2100      	movs	r1, #0
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fb f9d1 	bl	8006fec <__aeabi_fcmplt>
 800bc4a:	b988      	cbnz	r0, 800bc70 <ts_ftoa+0x38>

		*((*buf)++)='-';
		f*=-1;
	}

	a=f;	// extracting whole number
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f7fb f9f5 	bl	800703c <__aeabi_f2iz>
 800bc52:	4607      	mov	r7, r0
	f-=a;	// extracting decimal part
 800bc54:	f7fa ffd8 	bl	8006c08 <__aeabi_i2f>
 800bc58:	4601      	mov	r1, r0
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f7fa ff1e 	bl	8006a9c <__aeabi_fsub>
 800bc60:	4606      	mov	r6, r0


    //Add Leading 0...
    if (a==0)
 800bc62:	b96f      	cbnz	r7, 800bc80 <ts_ftoa+0x48>
      *((*buf)++) = '0';
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	2230      	movs	r2, #48	; 0x30
 800bc6c:	701a      	strb	r2, [r3, #0]
	/*
	extracting most significant digit i.e. right most digit , and concatenating to string
	obtained as quotient by dividing number by 10^k where k = (number of digit -1)
	*/

	for(l=k+1;l>0;l--)
 800bc6e:	e026      	b.n	800bcbe <ts_ftoa+0x86>
		*((*buf)++)='-';
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	222d      	movs	r2, #45	; 0x2d
 800bc78:	701a      	strb	r2, [r3, #0]
		f*=-1;
 800bc7a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800bc7e:	e7e5      	b.n	800bc4c <ts_ftoa+0x14>
 800bc80:	463b      	mov	r3, r7
 800bc82:	2400      	movs	r4, #0
		l=l/10;
 800bc84:	4920      	ldr	r1, [pc, #128]	; (800bd08 <ts_ftoa+0xd0>)
 800bc86:	fb81 0203 	smull	r0, r2, r1, r3
 800bc8a:	17db      	asrs	r3, r3, #31
		k++;
 800bc8c:	3401      	adds	r4, #1
	while(l!=0)
 800bc8e:	ebd3 03a2 	rsbs	r3, r3, r2, asr #2
 800bc92:	d1f8      	bne.n	800bc86 <ts_ftoa+0x4e>
	for(l=k+1;l>0;l--)
 800bc94:	2c00      	cmp	r4, #0
 800bc96:	dd12      	ble.n	800bcbe <ts_ftoa+0x86>
	{
		b = intpow(10,l-1);
 800bc98:	f04f 090a 	mov.w	r9, #10
 800bc9c:	3c01      	subs	r4, #1
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4648      	mov	r0, r9
 800bca2:	f7ff ffba 	bl	800bc1a <intpow>
		c = a/b;
		*((*buf)++)=c+48;
 800bca6:	682a      	ldr	r2, [r5, #0]
 800bca8:	1c53      	adds	r3, r2, #1
 800bcaa:	602b      	str	r3, [r5, #0]
		c = a/b;
 800bcac:	fb97 f3f0 	sdiv	r3, r7, r0
		*((*buf)++)=c+48;
 800bcb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcb4:	7011      	strb	r1, [r2, #0]
		a%=b;
 800bcb6:	fb00 7713 	mls	r7, r0, r3, r7
	for(l=k+1;l>0;l--)
 800bcba:	2c00      	cmp	r4, #0
 800bcbc:	d1ee      	bne.n	800bc9c <ts_ftoa+0x64>
	}


	*((*buf)++) = '.';
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	602a      	str	r2, [r5, #0]
 800bcc4:	222e      	movs	r2, #46	; 0x2e
 800bcc6:	701a      	strb	r2, [r3, #0]

	/* extracting decimal digits till precision */

	for(l=0;l<precision;l++)
 800bcc8:	f1b8 0f00 	cmp.w	r8, #0
 800bccc:	dd19      	ble.n	800bd02 <ts_ftoa+0xca>
 800bcce:	2700      	movs	r7, #0
	{
		f*=10.0;
 800bcd0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800bd0c <ts_ftoa+0xd4>
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7fa ffea 	bl	8006cb0 <__aeabi_fmul>
 800bcdc:	4604      	mov	r4, r0
		b = f;
 800bcde:	f7fb f9ad 	bl	800703c <__aeabi_f2iz>
		*((*buf)++)=b+48;
 800bce2:	682a      	ldr	r2, [r5, #0]
 800bce4:	1c53      	adds	r3, r2, #1
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bcec:	7013      	strb	r3, [r2, #0]
		f-=b;
 800bcee:	f7fa ff8b 	bl	8006c08 <__aeabi_i2f>
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7fa fed1 	bl	8006a9c <__aeabi_fsub>
 800bcfa:	4606      	mov	r6, r0
	for(l=0;l<precision;l++)
 800bcfc:	3701      	adds	r7, #1
 800bcfe:	45b8      	cmp	r8, r7
 800bd00:	d1e8      	bne.n	800bcd4 <ts_ftoa+0x9c>
	}
}
 800bd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd06:	bf00      	nop
 800bd08:	66666667 	.word	0x66666667
 800bd0c:	41200000 	.word	0x41200000

0800bd10 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800bd10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd14:	b083      	sub	sp, #12
 800bd16:	9001      	str	r0, [sp, #4]
	char *start_buf = buf;
 800bd18:	4606      	mov	r6, r0
	while(*fmt)
 800bd1a:	780b      	ldrb	r3, [r1, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d077      	beq.n	800be10 <ts_formatstring+0x100>
 800bd20:	460c      	mov	r4, r1
 800bd22:	4615      	mov	r5, r2
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800bd24:	f04f 0825 	mov.w	r8, #37	; 0x25
					ts_ftoa(&buf, val, float_precision);
 800bd28:	4f3d      	ldr	r7, [pc, #244]	; (800be20 <ts_formatstring+0x110>)
 800bd2a:	e027      	b.n	800bd7c <ts_formatstring+0x6c>
			switch (*(++fmt))
 800bd2c:	7863      	ldrb	r3, [r4, #1]
 800bd2e:	2b25      	cmp	r3, #37	; 0x25
 800bd30:	d068      	beq.n	800be04 <ts_formatstring+0xf4>
 800bd32:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	2a20      	cmp	r2, #32
 800bd3a:	d81b      	bhi.n	800bd74 <ts_formatstring+0x64>
 800bd3c:	3b58      	subs	r3, #88	; 0x58
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	d818      	bhi.n	800bd74 <ts_formatstring+0x64>
 800bd42:	e8df f003 	tbb	[pc, r3]
 800bd46:	1758      	.short	0x1758
 800bd48:	17171717 	.word	0x17171717
 800bd4c:	17171717 	.word	0x17171717
 800bd50:	17231117 	.word	0x17231117
 800bd54:	23171733 	.word	0x23171733
 800bd58:	17171717 	.word	0x17171717
 800bd5c:	17171717 	.word	0x17171717
 800bd60:	51174217 	.word	0x51174217
 800bd64:	1717      	.short	0x1717
 800bd66:	58          	.byte	0x58
 800bd67:	00          	.byte	0x00
				*buf++ = va_arg(va, int);
 800bd68:	f855 2b04 	ldr.w	r2, [r5], #4
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	1c59      	adds	r1, r3, #1
 800bd70:	9101      	str	r1, [sp, #4]
 800bd72:	701a      	strb	r2, [r3, #0]
				  break;
			}
			fmt++;
 800bd74:	3402      	adds	r4, #2
	while(*fmt)
 800bd76:	7823      	ldrb	r3, [r4, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d049      	beq.n	800be10 <ts_formatstring+0x100>
		if (*fmt == '%')
 800bd7c:	2b25      	cmp	r3, #37	; 0x25
 800bd7e:	d0d5      	beq.n	800bd2c <ts_formatstring+0x1c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800bd80:	3401      	adds	r4, #1
 800bd82:	9a01      	ldr	r2, [sp, #4]
 800bd84:	1c51      	adds	r1, r2, #1
 800bd86:	9101      	str	r1, [sp, #4]
 800bd88:	7013      	strb	r3, [r2, #0]
 800bd8a:	e7f4      	b.n	800bd76 <ts_formatstring+0x66>
					signed int val = va_arg(va, signed int);
 800bd8c:	f855 1b04 	ldr.w	r1, [r5], #4
					if (val < 0)
 800bd90:	2900      	cmp	r1, #0
 800bd92:	db04      	blt.n	800bd9e <ts_formatstring+0x8e>
					ts_itoa(&buf, val, 10);
 800bd94:	220a      	movs	r2, #10
 800bd96:	a801      	add	r0, sp, #4
 800bd98:	f7ff ff1a 	bl	800bbd0 <ts_itoa>
				break;
 800bd9c:	e7ea      	b.n	800bd74 <ts_formatstring+0x64>
						val *= -1;
 800bd9e:	4249      	negs	r1, r1
						*buf++ = '-';
 800bda0:	9b01      	ldr	r3, [sp, #4]
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	9201      	str	r2, [sp, #4]
 800bda6:	222d      	movs	r2, #45	; 0x2d
 800bda8:	701a      	strb	r2, [r3, #0]
 800bdaa:	e7f3      	b.n	800bd94 <ts_formatstring+0x84>
					double val = va_arg(va, double);
 800bdac:	3507      	adds	r5, #7
 800bdae:	f025 0507 	bic.w	r5, r5, #7
					ts_ftoa(&buf, val, float_precision);
 800bdb2:	f8d7 9000 	ldr.w	r9, [r7]
 800bdb6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bdba:	f7fa fe1b 	bl	80069f4 <__aeabi_d2f>
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	464a      	mov	r2, r9
 800bdc2:	a801      	add	r0, sp, #4
 800bdc4:	f7ff ff38 	bl	800bc38 <ts_ftoa>
				break;
 800bdc8:	e7d4      	b.n	800bd74 <ts_formatstring+0x64>
					char * arg = va_arg(va, char *);
 800bdca:	f855 3b04 	ldr.w	r3, [r5], #4
					while (*arg)
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	d0cf      	beq.n	800bd74 <ts_formatstring+0x64>
						*buf++ = *arg++;
 800bdd4:	9901      	ldr	r1, [sp, #4]
 800bdd6:	1c48      	adds	r0, r1, #1
 800bdd8:	9001      	str	r0, [sp, #4]
 800bdda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdde:	7008      	strb	r0, [r1, #0]
					while (*arg)
 800bde0:	7819      	ldrb	r1, [r3, #0]
 800bde2:	2900      	cmp	r1, #0
 800bde4:	d1f6      	bne.n	800bdd4 <ts_formatstring+0xc4>
 800bde6:	e7c5      	b.n	800bd74 <ts_formatstring+0x64>
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800bde8:	220a      	movs	r2, #10
 800bdea:	f855 1b04 	ldr.w	r1, [r5], #4
 800bdee:	a801      	add	r0, sp, #4
 800bdf0:	f7ff feee 	bl	800bbd0 <ts_itoa>
				break;
 800bdf4:	e7be      	b.n	800bd74 <ts_formatstring+0x64>
					ts_itoa(&buf, va_arg(va, int), 16);
 800bdf6:	2210      	movs	r2, #16
 800bdf8:	f855 1b04 	ldr.w	r1, [r5], #4
 800bdfc:	a801      	add	r0, sp, #4
 800bdfe:	f7ff fee7 	bl	800bbd0 <ts_itoa>
				break;
 800be02:	e7b7      	b.n	800bd74 <ts_formatstring+0x64>
				  *buf++ = '%';
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	9201      	str	r2, [sp, #4]
 800be0a:	f883 8000 	strb.w	r8, [r3]
				  break;
 800be0e:	e7b1      	b.n	800bd74 <ts_formatstring+0x64>
		}
	}
	*buf = 0;
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800be16:	9801      	ldr	r0, [sp, #4]
 800be18:	1b80      	subs	r0, r0, r6
 800be1a:	b003      	add	sp, #12
 800be1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be20:	20000004 	.word	0x20000004

0800be24 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800be24:	b40e      	push	{r1, r2, r3}
 800be26:	b500      	push	{lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	aa03      	add	r2, sp, #12
 800be2c:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 800be30:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 800be32:	f7ff ff6d 	bl	800bd10 <ts_formatstring>
	va_end(va);
	return length;
}
 800be36:	b002      	add	sp, #8
 800be38:	f85d eb04 	ldr.w	lr, [sp], #4
 800be3c:	b003      	add	sp, #12
 800be3e:	4770      	bx	lr

0800be40 <fputs>:
**
**===========================================================================
*/

int fputs(const char *s, FILE *fp)
{
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	4605      	mov	r5, r0
 800be44:	460e      	mov	r6, r1
	int length = strlen(s);
 800be46:	f7fa f977 	bl	8006138 <strlen>
 800be4a:	4604      	mov	r4, r0
	int wlen = 0;
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 800be4c:	4602      	mov	r2, r0
 800be4e:	4629      	mov	r1, r5
 800be50:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 800be54:	f7ff fe7c 	bl	800bb50 <_write>
 800be58:	4605      	mov	r5, r0
	wlen += _write((fp->_file), "\n", 1);
 800be5a:	2201      	movs	r2, #1
 800be5c:	4905      	ldr	r1, [pc, #20]	; (800be74 <fputs+0x34>)
 800be5e:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 800be62:	f7ff fe75 	bl	800bb50 <_write>

	if (wlen == (length+1))
 800be66:	3401      	adds	r4, #1
	wlen += _write((fp->_file), "\n", 1);
 800be68:	4428      	add	r0, r5
	{
		res = EOF;
	}

	return res;
}
 800be6a:	1a20      	subs	r0, r4, r0
 800be6c:	bf18      	it	ne
 800be6e:	f04f 30ff 	movne.w	r0, #4294967295
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	0800f874 	.word	0x0800f874

0800be78 <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 800be78:	b510      	push	{r4, lr}
 800be7a:	460c      	mov	r4, r1
	return (_write((fp->_file), (char*)buf, size * count) / size);
 800be7c:	fb01 f202 	mul.w	r2, r1, r2
 800be80:	4601      	mov	r1, r0
 800be82:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800be86:	f7ff fe63 	bl	800bb50 <_write>
}
 800be8a:	fbb0 f0f4 	udiv	r0, r0, r4
 800be8e:	bd10      	pop	{r4, pc}

0800be90 <_ZL12writeCommandh>:

// speed optimization
//static void writeCommand(uint8_t c) __attribute__((always_inline));
/*****************************************************************************/
static void writeCommand(uint8_t c)
{
 800be90:	b410      	push	{r4}
	CS_ACTIVE;
 800be92:	4b12      	ldr	r3, [pc, #72]	; (800bedc <_ZL12writeCommandh+0x4c>)
 800be94:	6819      	ldr	r1, [r3, #0]
 800be96:	4a12      	ldr	r2, [pc, #72]	; (800bee0 <_ZL12writeCommandh+0x50>)
 800be98:	6011      	str	r1, [r2, #0]
 800be9a:	4c12      	ldr	r4, [pc, #72]	; (800bee4 <_ZL12writeCommandh+0x54>)
 800be9c:	68e1      	ldr	r1, [r4, #12]
 800be9e:	4a12      	ldr	r2, [pc, #72]	; (800bee8 <_ZL12writeCommandh+0x58>)
 800bea0:	6011      	str	r1, [r2, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	4b0f      	ldr	r3, [pc, #60]	; (800beec <_ZL12writeCommandh+0x5c>)
 800beae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800beb2:	615a      	str	r2, [r3, #20]
	CD_COMMAND;
 800beb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800beb8:	615a      	str	r2, [r3, #20]
	write8(0);
 800beba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bebe:	6122      	str	r2, [r4, #16]
 800bec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bec4:	6159      	str	r1, [r3, #20]
 800bec6:	6119      	str	r1, [r3, #16]
	write8(c);
 800bec8:	0402      	lsls	r2, r0, #16
 800beca:	f482 027f 	eor.w	r2, r2, #16711680	; 0xff0000
 800bece:	4310      	orrs	r0, r2
 800bed0:	6120      	str	r0, [r4, #16]
 800bed2:	6159      	str	r1, [r3, #20]
 800bed4:	6119      	str	r1, [r3, #16]
}
 800bed6:	bc10      	pop	{r4}
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40010400 	.word	0x40010400
 800bee0:	20000a60 	.word	0x20000a60
 800bee4:	40010c00 	.word	0x40010c00
 800bee8:	20000a64 	.word	0x20000a64
 800beec:	40011000 	.word	0x40011000

0800bef0 <_Z13ili9341_resetv>:
{
 800bef0:	b538      	push	{r3, r4, r5, lr}
	RST_HIGH;
 800bef2:	4c08      	ldr	r4, [pc, #32]	; (800bf14 <_Z13ili9341_resetv+0x24>)
 800bef4:	f44f 7500 	mov.w	r5, #512	; 0x200
 800bef8:	6125      	str	r5, [r4, #16]
    delayMS(10);
 800befa:	200a      	movs	r0, #10
 800befc:	f7ff fac6 	bl	800b48c <_Z7delayMSm>
	RST_LOW;
 800bf00:	6165      	str	r5, [r4, #20]
    delayMS(10);
 800bf02:	200a      	movs	r0, #10
 800bf04:	f7ff fac2 	bl	800b48c <_Z7delayMSm>
	RST_HIGH;
 800bf08:	6125      	str	r5, [r4, #16]
    delayMS(100);
 800bf0a:	2064      	movs	r0, #100	; 0x64
 800bf0c:	f7ff fabe 	bl	800b48c <_Z7delayMSm>
}
 800bf10:	bd38      	pop	{r3, r4, r5, pc}
 800bf12:	bf00      	nop
 800bf14:	40010c00 	.word	0x40010c00

0800bf18 <_Z5floodtm>:
{
 800bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
              lo = color;
 800bf1a:	b2c7      	uxtb	r7, r0
  CS_ACTIVE;
 800bf1c:	4b5e      	ldr	r3, [pc, #376]	; (800c098 <_Z5floodtm+0x180>)
 800bf1e:	681c      	ldr	r4, [r3, #0]
 800bf20:	4a5e      	ldr	r2, [pc, #376]	; (800c09c <_Z5floodtm+0x184>)
 800bf22:	6014      	str	r4, [r2, #0]
 800bf24:	4e5e      	ldr	r6, [pc, #376]	; (800c0a0 <_Z5floodtm+0x188>)
 800bf26:	68f4      	ldr	r4, [r6, #12]
 800bf28:	4a5e      	ldr	r2, [pc, #376]	; (800c0a4 <_Z5floodtm+0x18c>)
 800bf2a:	6014      	str	r4, [r2, #0]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800bf34:	6033      	str	r3, [r6, #0]
 800bf36:	4b5c      	ldr	r3, [pc, #368]	; (800c0a8 <_Z5floodtm+0x190>)
 800bf38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bf3c:	615a      	str	r2, [r3, #20]
  CD_COMMAND;
 800bf3e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 800bf42:	615c      	str	r4, [r3, #20]
  write8(ILI9341_MEMORYWRITE);
 800bf44:	4a59      	ldr	r2, [pc, #356]	; (800c0ac <_Z5floodtm+0x194>)
 800bf46:	6132      	str	r2, [r6, #16]
 800bf48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf4c:	615a      	str	r2, [r3, #20]
 800bf4e:	611a      	str	r2, [r3, #16]
  CD_DATA;
 800bf50:	611c      	str	r4, [r3, #16]
  write8(hi);
 800bf52:	ea6f 2410 	mvn.w	r4, r0, lsr #8
 800bf56:	b2e4      	uxtb	r4, r4
 800bf58:	0424      	lsls	r4, r4, #16
 800bf5a:	ea44 2410 	orr.w	r4, r4, r0, lsr #8
 800bf5e:	6134      	str	r4, [r6, #16]
 800bf60:	615a      	str	r2, [r3, #20]
 800bf62:	611a      	str	r2, [r3, #16]
  write8(lo);
 800bf64:	043d      	lsls	r5, r7, #16
 800bf66:	f485 057f 	eor.w	r5, r5, #16711680	; 0xff0000
 800bf6a:	433d      	orrs	r5, r7
 800bf6c:	6135      	str	r5, [r6, #16]
 800bf6e:	615a      	str	r2, [r3, #20]
 800bf70:	611a      	str	r2, [r3, #16]
  len--;
 800bf72:	f101 3eff 	add.w	lr, r1, #4294967295
  blocks = (uint16_t)(len / 64); // 64 pixels/block
 800bf76:	f3ce 138f 	ubfx	r3, lr, #6, #16
  if(hi == lo) {
 800bf7a:	ebb7 2f10 	cmp.w	r7, r0, lsr #8
 800bf7e:	d053      	beq.n	800c028 <_Z5floodtm+0x110>
    while(blocks--) {
 800bf80:	f103 3cff 	add.w	ip, r3, #4294967295
 800bf84:	fa1f fc8c 	uxth.w	ip, ip
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d029      	beq.n	800bfe0 <_Z5floodtm+0xc8>
{
 800bf8c:	2710      	movs	r7, #16
        write8(hi); write8(lo); write8(hi); write8(lo);
 800bf8e:	4944      	ldr	r1, [pc, #272]	; (800c0a0 <_Z5floodtm+0x188>)
 800bf90:	4a45      	ldr	r2, [pc, #276]	; (800c0a8 <_Z5floodtm+0x190>)
 800bf92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    while(blocks--) {
 800bf96:	f64f 76ff 	movw	r6, #65535	; 0xffff
{
 800bf9a:	4638      	mov	r0, r7
        write8(hi); write8(lo); write8(hi); write8(lo);
 800bf9c:	610c      	str	r4, [r1, #16]
 800bf9e:	6153      	str	r3, [r2, #20]
 800bfa0:	6113      	str	r3, [r2, #16]
 800bfa2:	610d      	str	r5, [r1, #16]
 800bfa4:	6153      	str	r3, [r2, #20]
 800bfa6:	6113      	str	r3, [r2, #16]
 800bfa8:	610c      	str	r4, [r1, #16]
 800bfaa:	6153      	str	r3, [r2, #20]
 800bfac:	6113      	str	r3, [r2, #16]
 800bfae:	610d      	str	r5, [r1, #16]
 800bfb0:	6153      	str	r3, [r2, #20]
 800bfb2:	6113      	str	r3, [r2, #16]
        write8(hi); write8(lo); write8(hi); write8(lo);
 800bfb4:	610c      	str	r4, [r1, #16]
 800bfb6:	6153      	str	r3, [r2, #20]
 800bfb8:	6113      	str	r3, [r2, #16]
 800bfba:	610d      	str	r5, [r1, #16]
 800bfbc:	6153      	str	r3, [r2, #20]
 800bfbe:	6113      	str	r3, [r2, #16]
 800bfc0:	610c      	str	r4, [r1, #16]
 800bfc2:	6153      	str	r3, [r2, #20]
 800bfc4:	6113      	str	r3, [r2, #16]
 800bfc6:	610d      	str	r5, [r1, #16]
 800bfc8:	6153      	str	r3, [r2, #20]
 800bfca:	6113      	str	r3, [r2, #16]
      } while(--i);
 800bfcc:	3801      	subs	r0, #1
 800bfce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800bfd2:	d1e3      	bne.n	800bf9c <_Z5floodtm+0x84>
    while(blocks--) {
 800bfd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfd8:	fa1f fc8c 	uxth.w	ip, ip
 800bfdc:	45b4      	cmp	ip, r6
 800bfde:	d1dc      	bne.n	800bf9a <_Z5floodtm+0x82>
    for(i = (uint8_t)len & 63; i--; ) {
 800bfe0:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
 800bfe4:	1e53      	subs	r3, r2, #1
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	b16a      	cbz	r2, 800c006 <_Z5floodtm+0xee>
      write8(hi);
 800bfea:	482d      	ldr	r0, [pc, #180]	; (800c0a0 <_Z5floodtm+0x188>)
 800bfec:	492e      	ldr	r1, [pc, #184]	; (800c0a8 <_Z5floodtm+0x190>)
 800bfee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bff2:	6104      	str	r4, [r0, #16]
 800bff4:	614a      	str	r2, [r1, #20]
 800bff6:	610a      	str	r2, [r1, #16]
      write8(lo);
 800bff8:	6105      	str	r5, [r0, #16]
 800bffa:	614a      	str	r2, [r1, #20]
 800bffc:	610a      	str	r2, [r1, #16]
    for(i = (uint8_t)len & 63; i--; ) {
 800bffe:	3b01      	subs	r3, #1
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2bff      	cmp	r3, #255	; 0xff
 800c004:	d1f5      	bne.n	800bff2 <_Z5floodtm+0xda>
  CS_IDLE;
 800c006:	4b27      	ldr	r3, [pc, #156]	; (800c0a4 <_Z5floodtm+0x18c>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4b25      	ldr	r3, [pc, #148]	; (800c0a0 <_Z5floodtm+0x188>)
 800c00c:	60da      	str	r2, [r3, #12]
 800c00e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800c012:	601a      	str	r2, [r3, #0]
 800c014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c01c:	611a      	str	r2, [r3, #16]
 800c01e:	4b1f      	ldr	r3, [pc, #124]	; (800c09c <_Z5floodtm+0x184>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	4b1d      	ldr	r3, [pc, #116]	; (800c098 <_Z5floodtm+0x180>)
 800c024:	601a      	str	r2, [r3, #0]
}
 800c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(blocks--) {
 800c028:	1e58      	subs	r0, r3, #1
 800c02a:	b280      	uxth	r0, r0
 800c02c:	b30b      	cbz	r3, 800c072 <_Z5floodtm+0x15a>
{
 800c02e:	2510      	movs	r5, #16
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
 800c030:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c034:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 800c038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    while(blocks--) {
 800c03c:	f64f 74ff 	movw	r4, #65535	; 0xffff
{
 800c040:	4629      	mov	r1, r5
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
 800c042:	6153      	str	r3, [r2, #20]
 800c044:	6113      	str	r3, [r2, #16]
 800c046:	6153      	str	r3, [r2, #20]
 800c048:	6113      	str	r3, [r2, #16]
 800c04a:	6153      	str	r3, [r2, #20]
 800c04c:	6113      	str	r3, [r2, #16]
 800c04e:	6153      	str	r3, [r2, #20]
 800c050:	6113      	str	r3, [r2, #16]
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
 800c052:	6153      	str	r3, [r2, #20]
 800c054:	6113      	str	r3, [r2, #16]
 800c056:	6153      	str	r3, [r2, #20]
 800c058:	6113      	str	r3, [r2, #16]
 800c05a:	6153      	str	r3, [r2, #20]
 800c05c:	6113      	str	r3, [r2, #16]
 800c05e:	6153      	str	r3, [r2, #20]
 800c060:	6113      	str	r3, [r2, #16]
      } while(--i);
 800c062:	3901      	subs	r1, #1
 800c064:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c068:	d1eb      	bne.n	800c042 <_Z5floodtm+0x12a>
    while(blocks--) {
 800c06a:	3801      	subs	r0, #1
 800c06c:	b280      	uxth	r0, r0
 800c06e:	42a0      	cmp	r0, r4
 800c070:	d1e6      	bne.n	800c040 <_Z5floodtm+0x128>
    for(i = (uint8_t)len & 63; i--; ) {
 800c072:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
 800c076:	1e53      	subs	r3, r2, #1
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	d0c3      	beq.n	800c006 <_Z5floodtm+0xee>
      WR_STROBE;
 800c07e:	490a      	ldr	r1, [pc, #40]	; (800c0a8 <_Z5floodtm+0x190>)
 800c080:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c084:	614a      	str	r2, [r1, #20]
 800c086:	610a      	str	r2, [r1, #16]
      WR_STROBE;
 800c088:	614a      	str	r2, [r1, #20]
 800c08a:	610a      	str	r2, [r1, #16]
    for(i = (uint8_t)len & 63; i--; ) {
 800c08c:	3b01      	subs	r3, #1
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2bff      	cmp	r3, #255	; 0xff
 800c092:	d1f7      	bne.n	800c084 <_Z5floodtm+0x16c>
 800c094:	e7b7      	b.n	800c006 <_Z5floodtm+0xee>
 800c096:	bf00      	nop
 800c098:	40010400 	.word	0x40010400
 800c09c:	20000a60 	.word	0x20000a60
 800c0a0:	40010c00 	.word	0x40010c00
 800c0a4:	20000a64 	.word	0x20000a64
 800c0a8:	40011000 	.word	0x40011000
 800c0ac:	00d3002c 	.word	0x00d3002c

0800c0b0 <_Z6read8_v>:


/*****************************************************************************/
uint8_t read8_(void)
{
 800c0b0:	b570      	push	{r4, r5, r6, lr}
  RD_ACTIVE;
 800c0b2:	4c08      	ldr	r4, [pc, #32]	; (800c0d4 <_Z6read8_v+0x24>)
 800c0b4:	2540      	movs	r5, #64	; 0x40
 800c0b6:	6165      	str	r5, [r4, #20]
  delayUS(10);
 800c0b8:	200a      	movs	r0, #10
 800c0ba:	f7ff f9eb 	bl	800b494 <_Z7delayUSm>
  uint8_t temp = ( (TFT_DATA->IDR>>TFT_DATA_NIBBLE) & 0x00FF);
 800c0be:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <_Z6read8_v+0x28>)
 800c0c0:	689e      	ldr	r6, [r3, #8]
  delayUS(1);
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	f7ff f9e6 	bl	800b494 <_Z7delayUSm>
  RD_IDLE;
 800c0c8:	6125      	str	r5, [r4, #16]
  delayUS(1);
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	f7ff f9e2 	bl	800b494 <_Z7delayUSm>
  return temp;
}
 800c0d0:	b2f0      	uxtb	r0, r6
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	40010800 	.word	0x40010800
 800c0d8:	40010c00 	.word	0x40010c00

0800c0dc <_Z9readReg32h>:



/*****************************************************************************/
uint32_t readReg32(uint8_t r)
{
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t id;
  uint8_t x;

  // try reading register #4
  writeCommand(r);
 800c0de:	f7ff fed7 	bl	800be90 <_ZL12writeCommandh>
  setReadDir();  // Set up LCD data port(s) for READ operations
 800c0e2:	4d14      	ldr	r5, [pc, #80]	; (800c134 <_Z9readReg32h+0x58>)
 800c0e4:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
 800c0e8:	602f      	str	r7, [r5, #0]
  CD_DATA;
 800c0ea:	4e13      	ldr	r6, [pc, #76]	; (800c138 <_Z9readReg32h+0x5c>)
 800c0ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0f0:	6133      	str	r3, [r6, #16]
  delayUS(50);
 800c0f2:	2032      	movs	r0, #50	; 0x32
 800c0f4:	f7ff f9ce 	bl	800b494 <_Z7delayUSm>
  read8(x);
 800c0f8:	f7ff ffda 	bl	800c0b0 <_Z6read8_v>
  id = x;          // Do not merge or otherwise simplify
  id <<= 8;              // these lines.  It's an unfortunate
 800c0fc:	0204      	lsls	r4, r0, #8
  read8(x);
 800c0fe:	f7ff ffd7 	bl	800c0b0 <_Z6read8_v>
  id  |= x;        // shenanigans that are going on.
 800c102:	4304      	orrs	r4, r0
  id <<= 8;              // these lines.  It's an unfortunate
 800c104:	0224      	lsls	r4, r4, #8
  read8(x);
 800c106:	f7ff ffd3 	bl	800c0b0 <_Z6read8_v>
  id  |= x;        // shenanigans that are going on.
 800c10a:	4304      	orrs	r4, r0
  id <<= 8;              // these lines.  It's an unfortunate
 800c10c:	0224      	lsls	r4, r4, #8
  read8(x);
 800c10e:	f7ff ffcf 	bl	800c0b0 <_Z6read8_v>
  id  |= x;        // shenanigans that are going on.
  CS_IDLE;
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <_Z9readReg32h+0x60>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60eb      	str	r3, [r5, #12]
 800c118:	602f      	str	r7, [r5, #0]
 800c11a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c11e:	6133      	str	r3, [r6, #16]
 800c120:	4b07      	ldr	r3, [pc, #28]	; (800c140 <_Z9readReg32h+0x64>)
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <_Z9readReg32h+0x68>)
 800c126:	601a      	str	r2, [r3, #0]
  setWriteDir();  // Restore LCD data port(s) to WRITE configuration
 800c128:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800c12c:	602b      	str	r3, [r5, #0]
  return id;
}
 800c12e:	4320      	orrs	r0, r4
 800c130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c132:	bf00      	nop
 800c134:	40010c00 	.word	0x40010c00
 800c138:	40011000 	.word	0x40011000
 800c13c:	20000a64 	.word	0x20000a64
 800c140:	20000a60 	.word	0x20000a60
 800c144:	40010400 	.word	0x40010400

0800c148 <_Z14writeRegister8hh>:
  writeRegister8(aL, d);
}

/*****************************************************************************/
void writeRegister8(uint8_t a, uint8_t d)
{
 800c148:	b510      	push	{r4, lr}
 800c14a:	460c      	mov	r4, r1
  writeCommand(a);
 800c14c:	f7ff fea0 	bl	800be90 <_ZL12writeCommandh>
  CD_DATA;
 800c150:	4a0d      	ldr	r2, [pc, #52]	; (800c188 <_Z14writeRegister8hh+0x40>)
 800c152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c156:	6113      	str	r3, [r2, #16]
  write8(d);
 800c158:	0423      	lsls	r3, r4, #16
 800c15a:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 800c15e:	431c      	orrs	r4, r3
 800c160:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <_Z14writeRegister8hh+0x44>)
 800c162:	611c      	str	r4, [r3, #16]
 800c164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c168:	6151      	str	r1, [r2, #20]
 800c16a:	6111      	str	r1, [r2, #16]
  CS_IDLE;
 800c16c:	4908      	ldr	r1, [pc, #32]	; (800c190 <_Z14writeRegister8hh+0x48>)
 800c16e:	6809      	ldr	r1, [r1, #0]
 800c170:	60d9      	str	r1, [r3, #12]
 800c172:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
 800c176:	6019      	str	r1, [r3, #0]
 800c178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c17c:	6113      	str	r3, [r2, #16]
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <_Z14writeRegister8hh+0x4c>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <_Z14writeRegister8hh+0x50>)
 800c184:	601a      	str	r2, [r3, #0]
}
 800c186:	bd10      	pop	{r4, pc}
 800c188:	40011000 	.word	0x40011000
 800c18c:	40010c00 	.word	0x40010c00
 800c190:	20000a64 	.word	0x20000a64
 800c194:	20000a60 	.word	0x20000a60
 800c198:	40010400 	.word	0x40010400

0800c19c <_Z17writeRegisterPairhht>:
{
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	460d      	mov	r5, r1
 800c1a0:	4614      	mov	r4, r2
  writeRegister8(aH, d>>8);
 800c1a2:	0a11      	lsrs	r1, r2, #8
 800c1a4:	f7ff ffd0 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(aL, d);
 800c1a8:	b2e1      	uxtb	r1, r4
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7ff ffcc 	bl	800c148 <_Z14writeRegister8hh>
}
 800c1b0:	bd38      	pop	{r3, r4, r5, pc}

0800c1b2 <_Z13ili9341_setLRv>:
{
 800c1b2:	b508      	push	{r3, lr}
  writeRegisterPair(HX8347G_COLADDREND_HI, HX8347G_COLADDREND_LO, TFTWIDTH  - 1);
 800c1b4:	f240 123f 	movw	r2, #319	; 0x13f
 800c1b8:	2105      	movs	r1, #5
 800c1ba:	2004      	movs	r0, #4
 800c1bc:	f7ff ffee 	bl	800c19c <_Z17writeRegisterPairhht>
  writeRegisterPair(HX8347G_ROWADDREND_HI, HX8347G_ROWADDREND_LO, TFTHEIGHT - 1);
 800c1c0:	f240 123f 	movw	r2, #319	; 0x13f
 800c1c4:	2109      	movs	r1, #9
 800c1c6:	2008      	movs	r0, #8
 800c1c8:	f7ff ffe8 	bl	800c19c <_Z17writeRegisterPairhht>
}
 800c1cc:	bd08      	pop	{r3, pc}
	...

0800c1d0 <_Z15writeRegister16tt>:

/*****************************************************************************/
void writeRegister16(uint16_t a, uint16_t d)
{
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	460c      	mov	r4, r1
  writeCommand(a);
 800c1d4:	b2c0      	uxtb	r0, r0
 800c1d6:	f7ff fe5b 	bl	800be90 <_ZL12writeCommandh>
  CD_DATA;
 800c1da:	4b12      	ldr	r3, [pc, #72]	; (800c224 <_Z15writeRegister16tt+0x54>)
 800c1dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c1e0:	611a      	str	r2, [r3, #16]
  write8(d>>8);
 800c1e2:	0a22      	lsrs	r2, r4, #8
 800c1e4:	f082 01ff 	eor.w	r1, r2, #255	; 0xff
 800c1e8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800c1ec:	4a0e      	ldr	r2, [pc, #56]	; (800c228 <_Z15writeRegister16tt+0x58>)
 800c1ee:	6111      	str	r1, [r2, #16]
 800c1f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c1f4:	6158      	str	r0, [r3, #20]
 800c1f6:	6118      	str	r0, [r3, #16]
  write8(d);
 800c1f8:	f084 01ff 	eor.w	r1, r4, #255	; 0xff
 800c1fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c200:	6114      	str	r4, [r2, #16]
 800c202:	6158      	str	r0, [r3, #20]
 800c204:	6118      	str	r0, [r3, #16]
  CS_IDLE;
 800c206:	4909      	ldr	r1, [pc, #36]	; (800c22c <_Z15writeRegister16tt+0x5c>)
 800c208:	6809      	ldr	r1, [r1, #0]
 800c20a:	60d1      	str	r1, [r2, #12]
 800c20c:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c216:	611a      	str	r2, [r3, #16]
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_Z15writeRegister16tt+0x60>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <_Z15writeRegister16tt+0x64>)
 800c21e:	601a      	str	r2, [r3, #0]
}
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	40011000 	.word	0x40011000
 800c228:	40010c00 	.word	0x40010c00
 800c22c:	20000a64 	.word	0x20000a64
 800c230:	20000a60 	.word	0x20000a60
 800c234:	40010400 	.word	0x40010400

0800c238 <_Z15writeRegister32hm>:

/*****************************************************************************/
void writeRegister32(uint8_t r, uint32_t d)
{
 800c238:	b510      	push	{r4, lr}
 800c23a:	460c      	mov	r4, r1
  writeCommand(r);
 800c23c:	f7ff fe28 	bl	800be90 <_ZL12writeCommandh>
  CD_DATA;
 800c240:	4b1c      	ldr	r3, [pc, #112]	; (800c2b4 <_Z15writeRegister32hm+0x7c>)
 800c242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c246:	611a      	str	r2, [r3, #16]
  write8(d >> 24);
 800c248:	0e21      	lsrs	r1, r4, #24
 800c24a:	040a      	lsls	r2, r1, #16
 800c24c:	f482 027f 	eor.w	r2, r2, #16711680	; 0xff0000
 800c250:	430a      	orrs	r2, r1
 800c252:	4819      	ldr	r0, [pc, #100]	; (800c2b8 <_Z15writeRegister32hm+0x80>)
 800c254:	6102      	str	r2, [r0, #16]
 800c256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c25a:	615a      	str	r2, [r3, #20]
 800c25c:	611a      	str	r2, [r3, #16]
  write8(d >> 16);
 800c25e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c262:	ea4f 410c 	mov.w	r1, ip, lsl #16
 800c266:	f481 017f 	eor.w	r1, r1, #16711680	; 0xff0000
 800c26a:	ea41 010c 	orr.w	r1, r1, ip
 800c26e:	6101      	str	r1, [r0, #16]
 800c270:	615a      	str	r2, [r3, #20]
 800c272:	611a      	str	r2, [r3, #16]
  write8(d >> 8);
 800c274:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800c278:	ea4f 410c 	mov.w	r1, ip, lsl #16
 800c27c:	f481 017f 	eor.w	r1, r1, #16711680	; 0xff0000
 800c280:	ea41 010c 	orr.w	r1, r1, ip
 800c284:	6101      	str	r1, [r0, #16]
 800c286:	615a      	str	r2, [r3, #20]
 800c288:	611a      	str	r2, [r3, #16]
  write8(d);
 800c28a:	0421      	lsls	r1, r4, #16
 800c28c:	f481 017f 	eor.w	r1, r1, #16711680	; 0xff0000
 800c290:	430c      	orrs	r4, r1
 800c292:	6104      	str	r4, [r0, #16]
 800c294:	615a      	str	r2, [r3, #20]
 800c296:	611a      	str	r2, [r3, #16]
  CS_IDLE;
 800c298:	4a08      	ldr	r2, [pc, #32]	; (800c2bc <_Z15writeRegister32hm+0x84>)
 800c29a:	6812      	ldr	r2, [r2, #0]
 800c29c:	60c2      	str	r2, [r0, #12]
 800c29e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800c2a2:	6002      	str	r2, [r0, #0]
 800c2a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c2a8:	611a      	str	r2, [r3, #16]
 800c2aa:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <_Z15writeRegister32hm+0x88>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <_Z15writeRegister32hm+0x8c>)
 800c2b0:	601a      	str	r2, [r3, #0]
}
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	40011000 	.word	0x40011000
 800c2b8:	40010c00 	.word	0x40010c00
 800c2bc:	20000a64 	.word	0x20000a64
 800c2c0:	20000a60 	.word	0x20000a60
 800c2c4:	40010400 	.word	0x40010400

0800c2c8 <_Z13setAddrWindowiiii>:
{
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	461c      	mov	r4, r3
    writeRegister32(ILI9341_COLADDRSET, t);  // HX8357D uses same registers!
 800c2ce:	ea42 4100 	orr.w	r1, r2, r0, lsl #16
 800c2d2:	202a      	movs	r0, #42	; 0x2a
 800c2d4:	f7ff ffb0 	bl	800c238 <_Z15writeRegister32hm>
    writeRegister32(ILI9341_PAGEADDRSET, t); // HX8357D uses same registers!
 800c2d8:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 800c2dc:	202b      	movs	r0, #43	; 0x2b
 800c2de:	f7ff ffab 	bl	800c238 <_Z15writeRegister32hm>
}
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}

0800c2e4 <_Z13ili9341_beginv>:
{
 800c2e4:	b510      	push	{r4, lr}
  CS_IDLE; // Set all control bits to HIGH (idle)
 800c2e6:	4b31      	ldr	r3, [pc, #196]	; (800c3ac <_Z13ili9341_beginv+0xc8>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4c31      	ldr	r4, [pc, #196]	; (800c3b0 <_Z13ili9341_beginv+0xcc>)
 800c2ec:	60e3      	str	r3, [r4, #12]
 800c2ee:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	4b2f      	ldr	r3, [pc, #188]	; (800c3b4 <_Z13ili9341_beginv+0xd0>)
 800c2f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c2fa:	611a      	str	r2, [r3, #16]
 800c2fc:	4a2e      	ldr	r2, [pc, #184]	; (800c3b8 <_Z13ili9341_beginv+0xd4>)
 800c2fe:	6811      	ldr	r1, [r2, #0]
 800c300:	4a2e      	ldr	r2, [pc, #184]	; (800c3bc <_Z13ili9341_beginv+0xd8>)
 800c302:	6011      	str	r1, [r2, #0]
  CD_DATA; // Signals are ACTIVE LOW
 800c304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c308:	611a      	str	r2, [r3, #16]
  WR_IDLE;
 800c30a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c30e:	611a      	str	r2, [r3, #16]
  RD_IDLE;
 800c310:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800c314:	2240      	movs	r2, #64	; 0x40
 800c316:	611a      	str	r2, [r3, #16]
  ili9341_reset();
 800c318:	f7ff fdea 	bl	800bef0 <_Z13ili9341_resetv>
  setWriteDir();
 800c31c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800c320:	6023      	str	r3, [r4, #0]
  writeRegister8(ILI9341_SOFTRESET, 0);
 800c322:	2100      	movs	r1, #0
 800c324:	2001      	movs	r0, #1
 800c326:	f7ff ff0f 	bl	800c148 <_Z14writeRegister8hh>
  delayMS(50);
 800c32a:	2032      	movs	r0, #50	; 0x32
 800c32c:	f7ff f8ae 	bl	800b48c <_Z7delayMSm>
  dispControllerId = (uint16_t)(readReg32(0x04) & 0xffff);
 800c330:	2004      	movs	r0, #4
 800c332:	f7ff fed3 	bl	800c0dc <_Z9readReg32h>
 800c336:	4c22      	ldr	r4, [pc, #136]	; (800c3c0 <_Z13ili9341_beginv+0xdc>)
 800c338:	8020      	strh	r0, [r4, #0]
  writeRegister8(ILI9341_DISPLAYOFF, 0);
 800c33a:	2100      	movs	r1, #0
 800c33c:	2028      	movs	r0, #40	; 0x28
 800c33e:	f7ff ff03 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_POWERCONTROL1, 0x23);
 800c342:	2123      	movs	r1, #35	; 0x23
 800c344:	20c0      	movs	r0, #192	; 0xc0
 800c346:	f7ff feff 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_POWERCONTROL2, 0x10);
 800c34a:	2110      	movs	r1, #16
 800c34c:	20c1      	movs	r0, #193	; 0xc1
 800c34e:	f7ff fefb 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister16(ILI9341_VCOMCONTROL1, 0x2B2B);
 800c352:	f642 312b 	movw	r1, #11051	; 0x2b2b
 800c356:	20c5      	movs	r0, #197	; 0xc5
 800c358:	f7ff ff3a 	bl	800c1d0 <_Z15writeRegister16tt>
  writeRegister8(ILI9341_VCOMCONTROL2, 0xC0);
 800c35c:	21c0      	movs	r1, #192	; 0xc0
 800c35e:	20c7      	movs	r0, #199	; 0xc7
 800c360:	f7ff fef2 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_MADCTL , ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800c364:	2188      	movs	r1, #136	; 0x88
 800c366:	2036      	movs	r0, #54	; 0x36
 800c368:	f7ff feee 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_PIXELFORMAT, 0x55);
 800c36c:	2155      	movs	r1, #85	; 0x55
 800c36e:	203a      	movs	r0, #58	; 0x3a
 800c370:	f7ff feea 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
 800c374:	211b      	movs	r1, #27
 800c376:	20b1      	movs	r0, #177	; 0xb1
 800c378:	f7ff ff2a 	bl	800c1d0 <_Z15writeRegister16tt>
  writeRegister8(ILI9341_ENTRYMODE, 0x07);
 800c37c:	2107      	movs	r1, #7
 800c37e:	20b7      	movs	r0, #183	; 0xb7
 800c380:	f7ff fee2 	bl	800c148 <_Z14writeRegister8hh>
  writeRegister8(ILI9341_SLEEPOUT, 0);
 800c384:	2100      	movs	r1, #0
 800c386:	2011      	movs	r0, #17
 800c388:	f7ff fede 	bl	800c148 <_Z14writeRegister8hh>
  delayMS(120);
 800c38c:	2078      	movs	r0, #120	; 0x78
 800c38e:	f7ff f87d 	bl	800b48c <_Z7delayMSm>
  writeRegister8(ILI9341_DISPLAYON, 0);
 800c392:	2100      	movs	r1, #0
 800c394:	2029      	movs	r0, #41	; 0x29
 800c396:	f7ff fed7 	bl	800c148 <_Z14writeRegister8hh>
  setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
 800c39a:	f240 133f 	movw	r3, #319	; 0x13f
 800c39e:	461a      	mov	r2, r3
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	f7ff ff90 	bl	800c2c8 <_Z13setAddrWindowiiii>
}
 800c3a8:	8820      	ldrh	r0, [r4, #0]
 800c3aa:	bd10      	pop	{r4, pc}
 800c3ac:	20000a64 	.word	0x20000a64
 800c3b0:	40010c00 	.word	0x40010c00
 800c3b4:	40011000 	.word	0x40011000
 800c3b8:	20000a60 	.word	0x20000a60
 800c3bc:	40010400 	.word	0x40010400
 800c3c0:	20000a5c 	.word	0x20000a5c

0800c3c4 <_Z13drawFastVLinessst>:
{
 800c3c4:	b538      	push	{r3, r4, r5, lr}
     (y      >= TFTHEIGHTREAL) || ((y2 = (y+length-1)) <  0     )) return;
 800c3c6:	1e14      	subs	r4, r2, #0
 800c3c8:	dd1f      	ble.n	800c40a <_Z13drawFastVLinessst+0x46>
 800c3ca:	461d      	mov	r5, r3
     (x      <  0      ) || ( x                  >= TFTWIDTH) ||
 800c3cc:	b283      	uxth	r3, r0
 800c3ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c3d2:	d21a      	bcs.n	800c40a <_Z13drawFastVLinessst+0x46>
 800c3d4:	29ef      	cmp	r1, #239	; 0xef
 800c3d6:	dc18      	bgt.n	800c40a <_Z13drawFastVLinessst+0x46>
     (y      >= TFTHEIGHTREAL) || ((y2 = (y+length-1)) <  0     )) return;
 800c3d8:	190a      	adds	r2, r1, r4
 800c3da:	b292      	uxth	r2, r2
 800c3dc:	1e53      	subs	r3, r2, #1
 800c3de:	b21b      	sxth	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	db12      	blt.n	800c40a <_Z13drawFastVLinessst+0x46>
  if(y < 0) {         // Clip top
 800c3e4:	2900      	cmp	r1, #0
    length += y;
 800c3e6:	bfbc      	itt	lt
 800c3e8:	b214      	sxthlt	r4, r2
    y       = 0;
 800c3ea:	2100      	movlt	r1, #0
  if(y2 >= TFTHEIGHTREAL) { // Clip bottom
 800c3ec:	2bef      	cmp	r3, #239	; 0xef
 800c3ee:	dd03      	ble.n	800c3f8 <_Z13drawFastVLinessst+0x34>
    length  = y2 - y + 1;
 800c3f0:	f1c1 02f0 	rsb	r2, r1, #240	; 0xf0
 800c3f4:	b214      	sxth	r4, r2
    y2      = TFTHEIGHTREAL - 1;
 800c3f6:	23ef      	movs	r3, #239	; 0xef
  setAddrWindow(x, y, x, y2);
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	f7ff ff65 	bl	800c2c8 <_Z13setAddrWindowiiii>
  flood(color, length);
 800c3fe:	4621      	mov	r1, r4
 800c400:	4628      	mov	r0, r5
 800c402:	f7ff fd89 	bl	800bf18 <_Z5floodtm>
  ili9341_setLR();
 800c406:	f7ff fed4 	bl	800c1b2 <_Z13ili9341_setLRv>
}
 800c40a:	bd38      	pop	{r3, r4, r5, pc}

0800c40c <_Z8fillRectsssst>:
{
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 800c40e:	1e14      	subs	r4, r2, #0
 800c410:	dd35      	ble.n	800c47e <_Z8fillRectsssst+0x72>
 800c412:	461d      	mov	r5, r3
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd32      	ble.n	800c47e <_Z8fillRectsssst+0x72>
 800c418:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 800c41c:	da2f      	bge.n	800c47e <_Z8fillRectsssst+0x72>
      (x1           >= TFTWIDTH) ||  (y1            >= TFTHEIGHTREAL) ||
 800c41e:	29ef      	cmp	r1, #239	; 0xef
 800c420:	dc2d      	bgt.n	800c47e <_Z8fillRectsssst+0x72>
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 800c422:	fa1f fc80 	uxth.w	ip, r0
 800c426:	b2a6      	uxth	r6, r4
 800c428:	f10c 32ff 	add.w	r2, ip, #4294967295
 800c42c:	4432      	add	r2, r6
 800c42e:	b212      	sxth	r2, r2
      (x1           >= TFTWIDTH) ||  (y1            >= TFTHEIGHTREAL) ||
 800c430:	2a00      	cmp	r2, #0
 800c432:	db24      	blt.n	800c47e <_Z8fillRectsssst+0x72>
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
 800c434:	fa1f fe81 	uxth.w	lr, r1
 800c438:	b29f      	uxth	r7, r3
 800c43a:	f10e 33ff 	add.w	r3, lr, #4294967295
 800c43e:	443b      	add	r3, r7
 800c440:	b21b      	sxth	r3, r3
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
 800c442:	2b00      	cmp	r3, #0
 800c444:	db1b      	blt.n	800c47e <_Z8fillRectsssst+0x72>
  if(x1 < 0) { // Clip left
 800c446:	2800      	cmp	r0, #0
 800c448:	db1a      	blt.n	800c480 <_Z8fillRectsssst+0x74>
  if(y1 < 0) { // Clip top
 800c44a:	2900      	cmp	r1, #0
 800c44c:	db1d      	blt.n	800c48a <_Z8fillRectsssst+0x7e>
  if(x2 >= TFTWIDTH) { // Clip right
 800c44e:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800c452:	db04      	blt.n	800c45e <_Z8fillRectsssst+0x52>
    w  = x2 - x1 + 1;
 800c454:	f5c0 72a0 	rsb	r2, r0, #320	; 0x140
 800c458:	b214      	sxth	r4, r2
    x2 = TFTWIDTH - 1;
 800c45a:	f240 123f 	movw	r2, #319	; 0x13f
  if(y2 >= TFTHEIGHTREAL) { // Clip bottom
 800c45e:	2bef      	cmp	r3, #239	; 0xef
 800c460:	dd03      	ble.n	800c46a <_Z8fillRectsssst+0x5e>
    h  = y2 - y1 + 1;
 800c462:	f1c1 05f0 	rsb	r5, r1, #240	; 0xf0
 800c466:	b22d      	sxth	r5, r5
    y2 = TFTHEIGHTREAL - 1;
 800c468:	23ef      	movs	r3, #239	; 0xef
  setAddrWindow(x1, y1, x2, y2);
 800c46a:	f7ff ff2d 	bl	800c2c8 <_Z13setAddrWindowiiii>
  flood(fillcolor, (uint32_t)w * (uint32_t)h);
 800c46e:	fb05 f104 	mul.w	r1, r5, r4
 800c472:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c476:	f7ff fd4f 	bl	800bf18 <_Z5floodtm>
  ili9341_setLR();
 800c47a:	f7ff fe9a 	bl	800c1b2 <_Z13ili9341_setLRv>
}
 800c47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    w += x1;
 800c480:	eb0c 0406 	add.w	r4, ip, r6
 800c484:	b224      	sxth	r4, r4
    x1 = 0;
 800c486:	2000      	movs	r0, #0
 800c488:	e7df      	b.n	800c44a <_Z8fillRectsssst+0x3e>
    h += y1;
 800c48a:	eb0e 0507 	add.w	r5, lr, r7
 800c48e:	b22d      	sxth	r5, r5
    y1 = 0;
 800c490:	2100      	movs	r1, #0
 800c492:	e7dc      	b.n	800c44e <_Z8fillRectsssst+0x42>

0800c494 <_Z11setRotationh>:
{
 800c494:	b508      	push	{r3, lr}
   if ( dispControllerId==0x8552)
 800c496:	4b15      	ldr	r3, [pc, #84]	; (800c4ec <_Z11setRotationh+0x58>)
 800c498:	881a      	ldrh	r2, [r3, #0]
 800c49a:	f248 5352 	movw	r3, #34130	; 0x8552
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d005      	beq.n	800c4ae <_Z11setRotationh+0x1a>
   switch (x)
 800c4a2:	2803      	cmp	r0, #3
 800c4a4:	d81f      	bhi.n	800c4e6 <_Z11setRotationh+0x52>
 800c4a6:	e8df f000 	tbb	[pc, r0]
 800c4aa:	1c1a      	.short	0x1c1a
 800c4ac:	180c      	.short	0x180c
	   x = (x+1) % 4; // Landscape & portrait are inverted compared to ILI
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	4243      	negs	r3, r0
 800c4b2:	f000 0003 	and.w	r0, r0, #3
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	bf58      	it	pl
 800c4bc:	4258      	negpl	r0, r3
 800c4be:	b2c0      	uxtb	r0, r0
 800c4c0:	e7ef      	b.n	800c4a2 <_Z11setRotationh+0xe>
   switch (x)
 800c4c2:	2148      	movs	r1, #72	; 0x48
   writeRegister8(ILI9341_MADCTL, t ); // MADCTL
 800c4c4:	2036      	movs	r0, #54	; 0x36
 800c4c6:	f7ff fe3f 	bl	800c148 <_Z14writeRegister8hh>
   setAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1); // CS_IDLE happens here
 800c4ca:	f240 133f 	movw	r3, #319	; 0x13f
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	f7ff fef8 	bl	800c2c8 <_Z13setAddrWindowiiii>
}
 800c4d8:	bd08      	pop	{r3, pc}
     t = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 800c4da:	2128      	movs	r1, #40	; 0x28
     break;
 800c4dc:	e7f2      	b.n	800c4c4 <_Z11setRotationh+0x30>
    t = ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR;
 800c4de:	2188      	movs	r1, #136	; 0x88
    break;
 800c4e0:	e7f0      	b.n	800c4c4 <_Z11setRotationh+0x30>
     t = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 800c4e2:	21e8      	movs	r1, #232	; 0xe8
     break;
 800c4e4:	e7ee      	b.n	800c4c4 <_Z11setRotationh+0x30>
   uint16_t t = 0;
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	e7ec      	b.n	800c4c4 <_Z11setRotationh+0x30>
 800c4ea:	bf00      	nop
 800c4ec:	20000a5c 	.word	0x20000a5c

0800c4f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c4f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c4f2:	e003      	b.n	800c4fc <LoopCopyDataInit>

0800c4f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c4f4:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c4f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c4f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c4fa:	3104      	adds	r1, #4

0800c4fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c4fc:	480a      	ldr	r0, [pc, #40]	; (800c528 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c500:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c502:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c504:	d3f6      	bcc.n	800c4f4 <CopyDataInit>
  ldr r2, =_sbss
 800c506:	4a0a      	ldr	r2, [pc, #40]	; (800c530 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c508:	e002      	b.n	800c510 <LoopFillZerobss>

0800c50a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c50a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c50c:	f842 3b04 	str.w	r3, [r2], #4

0800c510 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c510:	4b08      	ldr	r3, [pc, #32]	; (800c534 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c512:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c514:	d3f9      	bcc.n	800c50a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c516:	f7ff fb35 	bl	800bb84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c51a:	f001 fa5d 	bl	800d9d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c51e:	f7ff f80f 	bl	800b540 <main>
  bx lr
 800c522:	4770      	bx	lr
  ldr r3, =_sidata
 800c524:	08010544 	.word	0x08010544
  ldr r0, =_sdata
 800c528:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c52c:	20000854 	.word	0x20000854
  ldr r2, =_sbss
 800c530:	20000854 	.word	0x20000854
  ldr r3, = _ebss
 800c534:	20000adc 	.word	0x20000adc

0800c538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c538:	e7fe      	b.n	800c538 <ADC1_2_IRQHandler>
	...

0800c53c <_ZdlPvj>:
 800c53c:	f000 b888 	b.w	800c650 <_ZdlPv>

0800c540 <_Znwj>:
 800c540:	2801      	cmp	r0, #1
 800c542:	bf38      	it	cc
 800c544:	2001      	movcc	r0, #1
 800c546:	b510      	push	{r4, lr}
 800c548:	4604      	mov	r4, r0
 800c54a:	4620      	mov	r0, r4
 800c54c:	f001 fa6c 	bl	800da28 <malloc>
 800c550:	b100      	cbz	r0, 800c554 <_Znwj+0x14>
 800c552:	bd10      	pop	{r4, pc}
 800c554:	f000 fe0c 	bl	800d170 <_ZSt15get_new_handlerv>
 800c558:	b108      	cbz	r0, 800c55e <_Znwj+0x1e>
 800c55a:	4780      	blx	r0
 800c55c:	e7f5      	b.n	800c54a <_Znwj+0xa>
 800c55e:	2004      	movs	r0, #4
 800c560:	f000 f8ea 	bl	800c738 <__cxa_allocate_exception>
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <_Znwj+0x30>)
 800c566:	4a03      	ldr	r2, [pc, #12]	; (800c574 <_Znwj+0x34>)
 800c568:	4903      	ldr	r1, [pc, #12]	; (800c578 <_Znwj+0x38>)
 800c56a:	6003      	str	r3, [r0, #0]
 800c56c:	f000 fdac 	bl	800d0c8 <__cxa_throw>
 800c570:	0800f6b8 	.word	0x0800f6b8
 800c574:	0800c621 	.word	0x0800c621
 800c578:	0800f694 	.word	0x0800f694

0800c57c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800c57c:	684b      	ldr	r3, [r1, #4]
 800c57e:	e9c0 1300 	strd	r1, r3, [r0]
 800c582:	684b      	ldr	r3, [r1, #4]
 800c584:	6018      	str	r0, [r3, #0]
 800c586:	6048      	str	r0, [r1, #4]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop

0800c58c <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800c58c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	605a      	str	r2, [r3, #4]
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <_ZSt17__throw_bad_allocv>:
 800c598:	b508      	push	{r3, lr}
 800c59a:	2004      	movs	r0, #4
 800c59c:	f000 f8cc 	bl	800c738 <__cxa_allocate_exception>
 800c5a0:	4b02      	ldr	r3, [pc, #8]	; (800c5ac <_ZSt17__throw_bad_allocv+0x14>)
 800c5a2:	4a03      	ldr	r2, [pc, #12]	; (800c5b0 <_ZSt17__throw_bad_allocv+0x18>)
 800c5a4:	4903      	ldr	r1, [pc, #12]	; (800c5b4 <_ZSt17__throw_bad_allocv+0x1c>)
 800c5a6:	6003      	str	r3, [r0, #0]
 800c5a8:	f000 fd8e 	bl	800d0c8 <__cxa_throw>
 800c5ac:	0800f6b8 	.word	0x0800f6b8
 800c5b0:	0800c621 	.word	0x0800c621
 800c5b4:	0800f694 	.word	0x0800f694

0800c5b8 <_ZSt19__throw_logic_errorPKc>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	2008      	movs	r0, #8
 800c5be:	f000 f8bb 	bl	800c738 <__cxa_allocate_exception>
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	f000 ff93 	bl	800d4f0 <_ZNSt11logic_errorC1EPKc>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	4a04      	ldr	r2, [pc, #16]	; (800c5e0 <_ZSt19__throw_logic_errorPKc+0x28>)
 800c5ce:	4905      	ldr	r1, [pc, #20]	; (800c5e4 <_ZSt19__throw_logic_errorPKc+0x2c>)
 800c5d0:	f000 fd7a 	bl	800d0c8 <__cxa_throw>
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 f8c7 	bl	800c768 <__cxa_free_exception>
 800c5da:	f000 f8e9 	bl	800c7b0 <__cxa_end_cleanup>
 800c5de:	bf00      	nop
 800c5e0:	0800d3e1 	.word	0x0800d3e1
 800c5e4:	0800f884 	.word	0x0800f884

0800c5e8 <_ZSt20__throw_length_errorPKc>:
 800c5e8:	b510      	push	{r4, lr}
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	2008      	movs	r0, #8
 800c5ee:	f000 f8a3 	bl	800c738 <__cxa_allocate_exception>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	f000 ffbb 	bl	800d570 <_ZNSt12length_errorC1EPKc>
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	4a04      	ldr	r2, [pc, #16]	; (800c610 <_ZSt20__throw_length_errorPKc+0x28>)
 800c5fe:	4905      	ldr	r1, [pc, #20]	; (800c614 <_ZSt20__throw_length_errorPKc+0x2c>)
 800c600:	f000 fd62 	bl	800d0c8 <__cxa_throw>
 800c604:	4620      	mov	r0, r4
 800c606:	f000 f8af 	bl	800c768 <__cxa_free_exception>
 800c60a:	f000 f8d1 	bl	800c7b0 <__cxa_end_cleanup>
 800c60e:	bf00      	nop
 800c610:	0800d421 	.word	0x0800d421
 800c614:	0800f890 	.word	0x0800f890

0800c618 <_ZNKSt9bad_alloc4whatEv>:
 800c618:	4800      	ldr	r0, [pc, #0]	; (800c61c <_ZNKSt9bad_alloc4whatEv+0x4>)
 800c61a:	4770      	bx	lr
 800c61c:	0800f684 	.word	0x0800f684

0800c620 <_ZNSt9bad_allocD1Ev>:
 800c620:	b510      	push	{r4, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <_ZNSt9bad_allocD1Ev+0x10>)
 800c626:	6003      	str	r3, [r0, #0]
 800c628:	f000 f98c 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800c62c:	4620      	mov	r0, r4
 800c62e:	bd10      	pop	{r4, pc}
 800c630:	0800f6b8 	.word	0x0800f6b8

0800c634 <_ZNSt9bad_allocD0Ev>:
 800c634:	b510      	push	{r4, lr}
 800c636:	4604      	mov	r4, r0
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <_ZNSt9bad_allocD0Ev+0x18>)
 800c63a:	6003      	str	r3, [r0, #0]
 800c63c:	f000 f982 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800c640:	4620      	mov	r0, r4
 800c642:	2104      	movs	r1, #4
 800c644:	f7ff ff7a 	bl	800c53c <_ZdlPvj>
 800c648:	4620      	mov	r0, r4
 800c64a:	bd10      	pop	{r4, pc}
 800c64c:	0800f6b8 	.word	0x0800f6b8

0800c650 <_ZdlPv>:
 800c650:	f001 b9f2 	b.w	800da38 <free>

0800c654 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 800c654:	491f      	ldr	r1, [pc, #124]	; (800c6d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x80>)
 800c656:	b530      	push	{r4, r5, lr}
 800c658:	684b      	ldr	r3, [r1, #4]
 800c65a:	f1a0 0408 	sub.w	r4, r0, #8
 800c65e:	b35b      	cbz	r3, 800c6b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
 800c660:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800c664:	eb04 0e05 	add.w	lr, r4, r5
 800c668:	4573      	cmp	r3, lr
 800c66a:	d825      	bhi.n	800c6b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
 800c66c:	d01f      	beq.n	800c6ae <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5a>
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	f101 0c04 	add.w	ip, r1, #4
 800c674:	b932      	cbnz	r2, 800c684 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 800c676:	e00f      	b.n	800c698 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x44>
 800c678:	6851      	ldr	r1, [r2, #4]
 800c67a:	f103 0c04 	add.w	ip, r3, #4
 800c67e:	b311      	cbz	r1, 800c6c6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x72>
 800c680:	4613      	mov	r3, r2
 800c682:	460a      	mov	r2, r1
 800c684:	4596      	cmp	lr, r2
 800c686:	d3f7      	bcc.n	800c678 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
 800c688:	bf04      	itt	eq
 800c68a:	e9de 2100 	ldrdeq	r2, r1, [lr]
 800c68e:	6059      	streq	r1, [r3, #4]
 800c690:	f8dc 3000 	ldr.w	r3, [ip]
 800c694:	bf08      	it	eq
 800c696:	18ad      	addeq	r5, r5, r2
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	1899      	adds	r1, r3, r2
 800c69c:	428c      	cmp	r4, r1
 800c69e:	d00f      	beq.n	800c6c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	e940 5302 	strd	r5, r3, [r0, #-8]
 800c6a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6aa:	605c      	str	r4, [r3, #4]
 800c6ac:	bd30      	pop	{r4, r5, pc}
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	442a      	add	r2, r5
 800c6b4:	f840 2c08 	str.w	r2, [r0, #-8]
 800c6b8:	f840 3c04 	str.w	r3, [r0, #-4]
 800c6bc:	604c      	str	r4, [r1, #4]
 800c6be:	bd30      	pop	{r4, r5, pc}
 800c6c0:	442a      	add	r2, r5
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	bd30      	pop	{r4, r5, pc}
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	1899      	adds	r1, r3, r2
 800c6cc:	428c      	cmp	r4, r1
 800c6ce:	d1e7      	bne.n	800c6a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4c>
 800c6d0:	e7f6      	b.n	800c6c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>
 800c6d2:	bf00      	nop
 800c6d4:	20000a68 	.word	0x20000a68

0800c6d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 800c6d8:	4916      	ldr	r1, [pc, #88]	; (800c734 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x5c>)
 800c6da:	f100 0208 	add.w	r2, r0, #8
 800c6de:	684b      	ldr	r3, [r1, #4]
 800c6e0:	2a08      	cmp	r2, #8
 800c6e2:	bf38      	it	cc
 800c6e4:	2208      	movcc	r2, #8
 800c6e6:	b1ab      	cbz	r3, 800c714 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 800c6e8:	3207      	adds	r2, #7
 800c6ea:	f022 0207 	bic.w	r2, r2, #7
 800c6ee:	1d08      	adds	r0, r1, #4
 800c6f0:	e002      	b.n	800c6f8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
 800c6f2:	1d18      	adds	r0, r3, #4
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	b16b      	cbz	r3, 800c714 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	428a      	cmp	r2, r1
 800c6fc:	d8f9      	bhi.n	800c6f2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
 800c6fe:	b410      	push	{r4}
 800c700:	1a8c      	subs	r4, r1, r2
 800c702:	2c07      	cmp	r4, #7
 800c704:	d808      	bhi.n	800c718 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	6019      	str	r1, [r3, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	6002      	str	r2, [r0, #0]
 800c70e:	bc10      	pop	{r4}
 800c710:	4618      	mov	r0, r3
 800c712:	4770      	bx	lr
 800c714:	4618      	mov	r0, r3
 800c716:	4770      	bx	lr
 800c718:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c71c:	1899      	adds	r1, r3, r2
 800c71e:	f8c1 c004 	str.w	ip, [r1, #4]
 800c722:	509c      	str	r4, [r3, r2]
 800c724:	6803      	ldr	r3, [r0, #0]
 800c726:	bc10      	pop	{r4}
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	6001      	str	r1, [r0, #0]
 800c72e:	4618      	mov	r0, r3
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	20000a68 	.word	0x20000a68

0800c738 <__cxa_allocate_exception>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800c73e:	4620      	mov	r0, r4
 800c740:	f001 f972 	bl	800da28 <malloc>
 800c744:	4603      	mov	r3, r0
 800c746:	b130      	cbz	r0, 800c756 <__cxa_allocate_exception+0x1e>
 800c748:	2280      	movs	r2, #128	; 0x80
 800c74a:	2100      	movs	r1, #0
 800c74c:	4618      	mov	r0, r3
 800c74e:	f001 fbef 	bl	800df30 <memset>
 800c752:	3080      	adds	r0, #128	; 0x80
 800c754:	bd10      	pop	{r4, pc}
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff ffbe 	bl	800c6d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2800      	cmp	r0, #0
 800c760:	d1f2      	bne.n	800c748 <__cxa_allocate_exception+0x10>
 800c762:	f000 fc3b 	bl	800cfdc <_ZSt9terminatev>
 800c766:	bf00      	nop

0800c768 <__cxa_free_exception>:
 800c768:	4a06      	ldr	r2, [pc, #24]	; (800c784 <__cxa_free_exception+0x1c>)
 800c76a:	3880      	subs	r0, #128	; 0x80
 800c76c:	6893      	ldr	r3, [r2, #8]
 800c76e:	4298      	cmp	r0, r3
 800c770:	d905      	bls.n	800c77e <__cxa_free_exception+0x16>
 800c772:	68d2      	ldr	r2, [r2, #12]
 800c774:	4413      	add	r3, r2
 800c776:	4298      	cmp	r0, r3
 800c778:	d201      	bcs.n	800c77e <__cxa_free_exception+0x16>
 800c77a:	f7ff bf6b 	b.w	800c654 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 800c77e:	f001 b95b 	b.w	800da38 <free>
 800c782:	bf00      	nop
 800c784:	20000a68 	.word	0x20000a68

0800c788 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800c78e:	4c07      	ldr	r4, [pc, #28]	; (800c7ac <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800c790:	4628      	mov	r0, r5
 800c792:	60e5      	str	r5, [r4, #12]
 800c794:	f001 f948 	bl	800da28 <malloc>
 800c798:	60a0      	str	r0, [r4, #8]
 800c79a:	b120      	cbz	r0, 800c7a6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800c79c:	2300      	movs	r3, #0
 800c79e:	6060      	str	r0, [r4, #4]
 800c7a0:	e9c0 5300 	strd	r5, r3, [r0]
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	60e0      	str	r0, [r4, #12]
 800c7a8:	6060      	str	r0, [r4, #4]
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	20000a68 	.word	0x20000a68

0800c7b0 <__cxa_end_cleanup>:
 800c7b0:	b41e      	push	{r1, r2, r3, r4}
 800c7b2:	f000 f88f 	bl	800c8d4 <__gnu_end_cleanup>
 800c7b6:	bc1e      	pop	{r1, r2, r3, r4}
 800c7b8:	f7fb f9e6 	bl	8007b88 <_Unwind_Resume>

0800c7bc <__cxa_type_match>:
 800c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7be:	461c      	mov	r4, r3
 800c7c0:	7803      	ldrb	r3, [r0, #0]
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	2b47      	cmp	r3, #71	; 0x47
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	d019      	beq.n	800c7fe <__cxa_type_match+0x42>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	4e26      	ldr	r6, [pc, #152]	; (800c868 <__cxa_type_match+0xac>)
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	6833      	ldr	r3, [r6, #0]
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	4798      	blx	r3
 800c7d8:	b178      	cbz	r0, 800c7fa <__cxa_type_match+0x3e>
 800c7da:	2702      	movs	r7, #2
 800c7dc:	9b01      	ldr	r3, [sp, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	9301      	str	r3, [sp, #4]
 800c7e2:	682b      	ldr	r3, [r5, #0]
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	691d      	ldr	r5, [r3, #16]
 800c7ea:	aa01      	add	r2, sp, #4
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	47a8      	blx	r5
 800c7f0:	bb18      	cbnz	r0, 800c83a <__cxa_type_match+0x7e>
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	b003      	add	sp, #12
 800c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7fa:	2701      	movs	r7, #1
 800c7fc:	e7f1      	b.n	800c7e2 <__cxa_type_match+0x26>
 800c7fe:	7843      	ldrb	r3, [r0, #1]
 800c800:	2b4e      	cmp	r3, #78	; 0x4e
 800c802:	d1e2      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c804:	7883      	ldrb	r3, [r0, #2]
 800c806:	2b55      	cmp	r3, #85	; 0x55
 800c808:	d1df      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c80a:	78c3      	ldrb	r3, [r0, #3]
 800c80c:	2b43      	cmp	r3, #67	; 0x43
 800c80e:	d1dc      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c810:	7903      	ldrb	r3, [r0, #4]
 800c812:	2b46      	cmp	r3, #70	; 0x46
 800c814:	d01b      	beq.n	800c84e <__cxa_type_match+0x92>
 800c816:	7903      	ldrb	r3, [r0, #4]
 800c818:	2b43      	cmp	r3, #67	; 0x43
 800c81a:	d1d6      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c81c:	7943      	ldrb	r3, [r0, #5]
 800c81e:	2b2b      	cmp	r3, #43	; 0x2b
 800c820:	d1d3      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c822:	7983      	ldrb	r3, [r0, #6]
 800c824:	2b2b      	cmp	r3, #43	; 0x2b
 800c826:	d1d0      	bne.n	800c7ca <__cxa_type_match+0xe>
 800c828:	79c3      	ldrb	r3, [r0, #7]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d8cd      	bhi.n	800c7ca <__cxa_type_match+0xe>
 800c82e:	d009      	beq.n	800c844 <__cxa_type_match+0x88>
 800c830:	f850 6c20 	ldr.w	r6, [r0, #-32]
 800c834:	3058      	adds	r0, #88	; 0x58
 800c836:	9001      	str	r0, [sp, #4]
 800c838:	e7ca      	b.n	800c7d0 <__cxa_type_match+0x14>
 800c83a:	4638      	mov	r0, r7
 800c83c:	9b01      	ldr	r3, [sp, #4]
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	b003      	add	sp, #12
 800c842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c844:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800c848:	f850 6c78 	ldr.w	r6, [r0, #-120]
 800c84c:	e7f3      	b.n	800c836 <__cxa_type_match+0x7a>
 800c84e:	7943      	ldrb	r3, [r0, #5]
 800c850:	2b4f      	cmp	r3, #79	; 0x4f
 800c852:	d1e0      	bne.n	800c816 <__cxa_type_match+0x5a>
 800c854:	7983      	ldrb	r3, [r0, #6]
 800c856:	2b52      	cmp	r3, #82	; 0x52
 800c858:	d1dd      	bne.n	800c816 <__cxa_type_match+0x5a>
 800c85a:	79c3      	ldrb	r3, [r0, #7]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1da      	bne.n	800c816 <__cxa_type_match+0x5a>
 800c860:	4e02      	ldr	r6, [pc, #8]	; (800c86c <__cxa_type_match+0xb0>)
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	e7b4      	b.n	800c7d0 <__cxa_type_match+0x14>
 800c866:	bf00      	nop
 800c868:	0800f6e0 	.word	0x0800f6e0
 800c86c:	0800f6d8 	.word	0x0800f6d8

0800c870 <__cxa_begin_cleanup>:
 800c870:	b510      	push	{r4, lr}
 800c872:	4604      	mov	r4, r0
 800c874:	f000 f87a 	bl	800c96c <__cxa_get_globals>
 800c878:	4622      	mov	r2, r4
 800c87a:	f812 3920 	ldrb.w	r3, [r2], #-32
 800c87e:	2b47      	cmp	r3, #71	; 0x47
 800c880:	d004      	beq.n	800c88c <__cxa_begin_cleanup+0x1c>
 800c882:	6883      	ldr	r3, [r0, #8]
 800c884:	bb23      	cbnz	r3, 800c8d0 <__cxa_begin_cleanup+0x60>
 800c886:	6082      	str	r2, [r0, #8]
 800c888:	2001      	movs	r0, #1
 800c88a:	bd10      	pop	{r4, pc}
 800c88c:	7863      	ldrb	r3, [r4, #1]
 800c88e:	2b4e      	cmp	r3, #78	; 0x4e
 800c890:	d1f7      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c892:	78a3      	ldrb	r3, [r4, #2]
 800c894:	2b55      	cmp	r3, #85	; 0x55
 800c896:	d1f4      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c898:	78e3      	ldrb	r3, [r4, #3]
 800c89a:	2b43      	cmp	r3, #67	; 0x43
 800c89c:	d1f1      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c89e:	7923      	ldrb	r3, [r4, #4]
 800c8a0:	2b43      	cmp	r3, #67	; 0x43
 800c8a2:	d1ee      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c8a4:	7963      	ldrb	r3, [r4, #5]
 800c8a6:	2b2b      	cmp	r3, #43	; 0x2b
 800c8a8:	d1eb      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c8aa:	79a3      	ldrb	r3, [r4, #6]
 800c8ac:	2b2b      	cmp	r3, #43	; 0x2b
 800c8ae:	d1e8      	bne.n	800c882 <__cxa_begin_cleanup+0x12>
 800c8b0:	79e3      	ldrb	r3, [r4, #7]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d8e5      	bhi.n	800c882 <__cxa_begin_cleanup+0x12>
 800c8b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8c2:	d1e1      	bne.n	800c888 <__cxa_begin_cleanup+0x18>
 800c8c4:	6883      	ldr	r3, [r0, #8]
 800c8c6:	f844 3c08 	str.w	r3, [r4, #-8]
 800c8ca:	6082      	str	r2, [r0, #8]
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	bd10      	pop	{r4, pc}
 800c8d0:	f000 fb84 	bl	800cfdc <_ZSt9terminatev>

0800c8d4 <__gnu_end_cleanup>:
 800c8d4:	b508      	push	{r3, lr}
 800c8d6:	f000 f849 	bl	800c96c <__cxa_get_globals>
 800c8da:	6883      	ldr	r3, [r0, #8]
 800c8dc:	b383      	cbz	r3, 800c940 <__gnu_end_cleanup+0x6c>
 800c8de:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c8e2:	2a47      	cmp	r2, #71	; 0x47
 800c8e4:	d004      	beq.n	800c8f0 <__gnu_end_cleanup+0x1c>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	6082      	str	r2, [r0, #8]
 800c8ea:	f103 0020 	add.w	r0, r3, #32
 800c8ee:	bd08      	pop	{r3, pc}
 800c8f0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c8f4:	2a4e      	cmp	r2, #78	; 0x4e
 800c8f6:	d1f6      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c8f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c8fc:	2a55      	cmp	r2, #85	; 0x55
 800c8fe:	d1f2      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c900:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c904:	2a43      	cmp	r2, #67	; 0x43
 800c906:	d1ee      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c908:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c90c:	2a43      	cmp	r2, #67	; 0x43
 800c90e:	d1ea      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c910:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800c914:	2a2b      	cmp	r2, #43	; 0x2b
 800c916:	d1e6      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c918:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800c91c:	2a2b      	cmp	r2, #43	; 0x2b
 800c91e:	d1e2      	bne.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c920:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800c924:	2a01      	cmp	r2, #1
 800c926:	d8de      	bhi.n	800c8e6 <__gnu_end_cleanup+0x12>
 800c928:	69da      	ldr	r2, [r3, #28]
 800c92a:	3a01      	subs	r2, #1
 800c92c:	61da      	str	r2, [r3, #28]
 800c92e:	2a00      	cmp	r2, #0
 800c930:	d1db      	bne.n	800c8ea <__gnu_end_cleanup+0x16>
 800c932:	2200      	movs	r2, #0
 800c934:	6999      	ldr	r1, [r3, #24]
 800c936:	6081      	str	r1, [r0, #8]
 800c938:	619a      	str	r2, [r3, #24]
 800c93a:	f103 0020 	add.w	r0, r3, #32
 800c93e:	bd08      	pop	{r3, pc}
 800c940:	f000 fb4c 	bl	800cfdc <_ZSt9terminatev>

0800c944 <_ZNSt9exceptionD1Ev>:
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop

0800c948 <_ZNSt13bad_exceptionD1Ev>:
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop

0800c94c <_ZGTtNKSt13bad_exception4whatEv>:
 800c94c:	4800      	ldr	r0, [pc, #0]	; (800c950 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800c94e:	4770      	bx	lr
 800c950:	0800f6c4 	.word	0x0800f6c4

0800c954 <_ZNSt13bad_exceptionD0Ev>:
 800c954:	b510      	push	{r4, lr}
 800c956:	4604      	mov	r4, r0
 800c958:	2104      	movs	r1, #4
 800c95a:	f7ff fdef 	bl	800c53c <_ZdlPvj>
 800c95e:	4620      	mov	r0, r4
 800c960:	bd10      	pop	{r4, pc}
 800c962:	bf00      	nop

0800c964 <__cxa_get_globals_fast>:
 800c964:	4800      	ldr	r0, [pc, #0]	; (800c968 <__cxa_get_globals_fast+0x4>)
 800c966:	4770      	bx	lr
 800c968:	20000a78 	.word	0x20000a78

0800c96c <__cxa_get_globals>:
 800c96c:	4800      	ldr	r0, [pc, #0]	; (800c970 <__cxa_get_globals+0x4>)
 800c96e:	4770      	bx	lr
 800c970:	20000a78 	.word	0x20000a78

0800c974 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800c974:	2850      	cmp	r0, #80	; 0x50
 800c976:	b570      	push	{r4, r5, r6, lr}
 800c978:	d01d      	beq.n	800c9b6 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800c97a:	4684      	mov	ip, r0
 800c97c:	f000 000f 	and.w	r0, r0, #15
 800c980:	280c      	cmp	r0, #12
 800c982:	d855      	bhi.n	800ca30 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 800c984:	e8df f000 	tbb	[pc, r0]
 800c988:	07264407 	.word	0x07264407
 800c98c:	5454541e 	.word	0x5454541e
 800c990:	07222a54 	.word	0x07222a54
 800c994:	1e          	.byte	0x1e
 800c995:	00          	.byte	0x00
 800c996:	4610      	mov	r0, r2
 800c998:	f850 6b04 	ldr.w	r6, [r0], #4
 800c99c:	b14e      	cbz	r6, 800c9b2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 800c99e:	f00c 0470 	and.w	r4, ip, #112	; 0x70
 800c9a2:	2c10      	cmp	r4, #16
 800c9a4:	bf08      	it	eq
 800c9a6:	4611      	moveq	r1, r2
 800c9a8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c9ac:	440e      	add	r6, r1
 800c9ae:	bf18      	it	ne
 800c9b0:	6836      	ldrne	r6, [r6, #0]
 800c9b2:	601e      	str	r6, [r3, #0]
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
 800c9b6:	3203      	adds	r2, #3
 800c9b8:	f022 0003 	bic.w	r0, r2, #3
 800c9bc:	f850 6b04 	ldr.w	r6, [r0], #4
 800c9c0:	601e      	str	r6, [r3, #0]
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f850 6b08 	ldr.w	r6, [r0], #8
 800c9ca:	e7e7      	b.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f930 6b02 	ldrsh.w	r6, [r0], #2
 800c9d2:	e7e3      	b.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	f830 6b02 	ldrh.w	r6, [r0], #2
 800c9da:	e7df      	b.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800c9dc:	2600      	movs	r6, #0
 800c9de:	4610      	mov	r0, r2
 800c9e0:	4634      	mov	r4, r6
 800c9e2:	f810 5b01 	ldrb.w	r5, [r0], #1
 800c9e6:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 800c9ea:	fa0e fe04 	lsl.w	lr, lr, r4
 800c9ee:	f015 0f80 	tst.w	r5, #128	; 0x80
 800c9f2:	ea46 060e 	orr.w	r6, r6, lr
 800c9f6:	f104 0407 	add.w	r4, r4, #7
 800c9fa:	d1f2      	bne.n	800c9e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
 800c9fc:	2c1f      	cmp	r4, #31
 800c9fe:	d8cd      	bhi.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800ca00:	066d      	lsls	r5, r5, #25
 800ca02:	d5cb      	bpl.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800ca04:	f04f 35ff 	mov.w	r5, #4294967295
 800ca08:	fa05 f404 	lsl.w	r4, r5, r4
 800ca0c:	4326      	orrs	r6, r4
 800ca0e:	e7c6      	b.n	800c99e <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
 800ca10:	2600      	movs	r6, #0
 800ca12:	4610      	mov	r0, r2
 800ca14:	4634      	mov	r4, r6
 800ca16:	f810 5b01 	ldrb.w	r5, [r0], #1
 800ca1a:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 800ca1e:	fa0e fe04 	lsl.w	lr, lr, r4
 800ca22:	062d      	lsls	r5, r5, #24
 800ca24:	ea46 060e 	orr.w	r6, r6, lr
 800ca28:	f104 0407 	add.w	r4, r4, #7
 800ca2c:	d4f3      	bmi.n	800ca16 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
 800ca2e:	e7b5      	b.n	800c99c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800ca30:	f000 ff98 	bl	800d964 <abort>

0800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800ca34:	28ff      	cmp	r0, #255	; 0xff
 800ca36:	b508      	push	{r3, lr}
 800ca38:	4603      	mov	r3, r0
 800ca3a:	d019      	beq.n	800ca70 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 800ca3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ca40:	2a30      	cmp	r2, #48	; 0x30
 800ca42:	4608      	mov	r0, r1
 800ca44:	d016      	beq.n	800ca74 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 800ca46:	d805      	bhi.n	800ca54 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800ca48:	2a20      	cmp	r2, #32
 800ca4a:	d109      	bne.n	800ca60 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800ca4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca50:	f002 b9a9 	b.w	800eda6 <_Unwind_GetTextRelBase>
 800ca54:	2a40      	cmp	r2, #64	; 0x40
 800ca56:	d109      	bne.n	800ca6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800ca58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca5c:	f7fb ba92 	b.w	8007f84 <_Unwind_GetRegionStart>
 800ca60:	d802      	bhi.n	800ca68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 800ca62:	f013 0f60 	tst.w	r3, #96	; 0x60
 800ca66:	d003      	beq.n	800ca70 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 800ca68:	f000 ff7c 	bl	800d964 <abort>
 800ca6c:	2a50      	cmp	r2, #80	; 0x50
 800ca6e:	d1fb      	bne.n	800ca68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 800ca70:	2000      	movs	r0, #0
 800ca72:	bd08      	pop	{r3, pc}
 800ca74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca78:	f002 b992 	b.w	800eda0 <_Unwind_GetDataRelBase>

0800ca7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460c      	mov	r4, r1
 800ca82:	4615      	mov	r5, r2
 800ca84:	b108      	cbz	r0, 800ca8a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800ca86:	f7fb fa7d 	bl	8007f84 <_Unwind_GetRegionStart>
 800ca8a:	6028      	str	r0, [r5, #0]
 800ca8c:	f814 7b01 	ldrb.w	r7, [r4], #1
 800ca90:	2fff      	cmp	r7, #255	; 0xff
 800ca92:	d129      	bne.n	800cae8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6c>
 800ca94:	6068      	str	r0, [r5, #4]
 800ca96:	4620      	mov	r0, r4
 800ca98:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ca9c:	2bff      	cmp	r3, #255	; 0xff
 800ca9e:	752b      	strb	r3, [r5, #20]
 800caa0:	d033      	beq.n	800cb0a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 800caa2:	2400      	movs	r4, #0
 800caa4:	2310      	movs	r3, #16
 800caa6:	4622      	mov	r2, r4
 800caa8:	752b      	strb	r3, [r5, #20]
 800caaa:	f810 1b01 	ldrb.w	r1, [r0], #1
 800caae:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cab2:	4093      	lsls	r3, r2
 800cab4:	0609      	lsls	r1, r1, #24
 800cab6:	ea44 0403 	orr.w	r4, r4, r3
 800caba:	f102 0207 	add.w	r2, r2, #7
 800cabe:	d4f4      	bmi.n	800caaa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2e>
 800cac0:	4404      	add	r4, r0
 800cac2:	60ec      	str	r4, [r5, #12]
 800cac4:	2400      	movs	r4, #0
 800cac6:	4622      	mov	r2, r4
 800cac8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cacc:	756b      	strb	r3, [r5, #21]
 800cace:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cad2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cad6:	4093      	lsls	r3, r2
 800cad8:	431c      	orrs	r4, r3
 800cada:	060b      	lsls	r3, r1, #24
 800cadc:	f102 0207 	add.w	r2, r2, #7
 800cae0:	d4f5      	bmi.n	800cace <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800cae2:	4404      	add	r4, r0
 800cae4:	612c      	str	r4, [r5, #16]
 800cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae8:	4631      	mov	r1, r6
 800caea:	4638      	mov	r0, r7
 800caec:	f7ff ffa2 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800caf0:	4622      	mov	r2, r4
 800caf2:	4601      	mov	r1, r0
 800caf4:	1d2b      	adds	r3, r5, #4
 800caf6:	4638      	mov	r0, r7
 800caf8:	f7ff ff3c 	bl	800c974 <_ZL28read_encoded_value_with_basehjPKhPj>
 800cafc:	4604      	mov	r4, r0
 800cafe:	4620      	mov	r0, r4
 800cb00:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb04:	2bff      	cmp	r3, #255	; 0xff
 800cb06:	752b      	strb	r3, [r5, #20]
 800cb08:	d1cb      	bne.n	800caa2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60eb      	str	r3, [r5, #12]
 800cb0e:	e7d9      	b.n	800cac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x48>

0800cb10 <__gxx_personality_v0>:
 800cb10:	2300      	movs	r3, #0
 800cb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb16:	4617      	mov	r7, r2
 800cb18:	f000 0203 	and.w	r2, r0, #3
 800cb1c:	b093      	sub	sp, #76	; 0x4c
 800cb1e:	2a01      	cmp	r2, #1
 800cb20:	4688      	mov	r8, r1
 800cb22:	9308      	str	r3, [sp, #32]
 800cb24:	d013      	beq.n	800cb4e <__gxx_personality_v0+0x3e>
 800cb26:	2a02      	cmp	r2, #2
 800cb28:	d108      	bne.n	800cb3c <__gxx_personality_v0+0x2c>
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	f7fb fa11 	bl	8007f54 <__gnu_unwind_frame>
 800cb32:	b940      	cbnz	r0, 800cb46 <__gxx_personality_v0+0x36>
 800cb34:	2008      	movs	r0, #8
 800cb36:	b013      	add	sp, #76	; 0x4c
 800cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3c:	2a00      	cmp	r2, #0
 800cb3e:	f000 8097 	beq.w	800cc70 <__gxx_personality_v0+0x160>
 800cb42:	f000 ff0f 	bl	800d964 <abort>
 800cb46:	2009      	movs	r0, #9
 800cb48:	b013      	add	sp, #76	; 0x4c
 800cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4e:	f010 0408 	ands.w	r4, r0, #8
 800cb52:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cb56:	f000 80a2 	beq.w	800cc9e <__gxx_personality_v0+0x18e>
 800cb5a:	f044 0202 	orr.w	r2, r4, #2
 800cb5e:	9202      	str	r2, [sp, #8]
 800cb60:	910c      	str	r1, [sp, #48]	; 0x30
 800cb62:	220c      	movs	r2, #12
 800cb64:	4619      	mov	r1, r3
 800cb66:	4638      	mov	r0, r7
 800cb68:	f8cd b000 	str.w	fp, [sp]
 800cb6c:	f7fa fc86 	bl	800747c <_Unwind_VRS_Set>
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7fb fa0d 	bl	8007f90 <_Unwind_GetLanguageSpecificData>
 800cb76:	9003      	str	r0, [sp, #12]
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d0d6      	beq.n	800cb2a <__gxx_personality_v0+0x1a>
 800cb7c:	465a      	mov	r2, fp
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff ff7b 	bl	800ca7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800cb86:	4639      	mov	r1, r7
 800cb88:	4605      	mov	r5, r0
 800cb8a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cb8e:	f7ff ff51 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800cb92:	2300      	movs	r3, #0
 800cb94:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800cb98:	4619      	mov	r1, r3
 800cb9a:	900e      	str	r0, [sp, #56]	; 0x38
 800cb9c:	220f      	movs	r2, #15
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f8cd 9000 	str.w	r9, [sp]
 800cba4:	f7fa fc44 	bl	8007430 <_Unwind_VRS_Get>
 800cba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	1e5e      	subs	r6, r3, #1
 800cbb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbb2:	429d      	cmp	r5, r3
 800cbb4:	d237      	bcs.n	800cc26 <__gxx_personality_v0+0x116>
 800cbb6:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
 800cbba:	2100      	movs	r1, #0
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f7ff ff39 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	ab09      	add	r3, sp, #36	; 0x24
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff fed3 	bl	800c974 <_ZL28read_encoded_value_with_basehjPKhPj>
 800cbce:	2100      	movs	r1, #0
 800cbd0:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	460c      	mov	r4, r1
 800cbda:	f7ff ff2b 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800cbde:	462a      	mov	r2, r5
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	ab0a      	add	r3, sp, #40	; 0x28
 800cbe4:	4650      	mov	r0, sl
 800cbe6:	f7ff fec5 	bl	800c974 <_ZL28read_encoded_value_with_basehjPKhPj>
 800cbea:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800cbee:	4605      	mov	r5, r0
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4650      	mov	r0, sl
 800cbf4:	f7ff ff1e 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	464b      	mov	r3, r9
 800cbfe:	4650      	mov	r0, sl
 800cc00:	f7ff feb8 	bl	800c974 <_ZL28read_encoded_value_with_basehjPKhPj>
 800cc04:	4622      	mov	r2, r4
 800cc06:	4605      	mov	r5, r0
 800cc08:	f815 1b01 	ldrb.w	r1, [r5], #1
 800cc0c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cc10:	4093      	lsls	r3, r2
 800cc12:	431c      	orrs	r4, r3
 800cc14:	060b      	lsls	r3, r1, #24
 800cc16:	f102 0207 	add.w	r2, r2, #7
 800cc1a:	d4f5      	bmi.n	800cc08 <__gxx_personality_v0+0xf8>
 800cc1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc20:	4413      	add	r3, r2
 800cc22:	42b3      	cmp	r3, r6
 800cc24:	d91c      	bls.n	800cc60 <__gxx_personality_v0+0x150>
 800cc26:	9b02      	ldr	r3, [sp, #8]
 800cc28:	07d8      	lsls	r0, r3, #31
 800cc2a:	d533      	bpl.n	800cc94 <__gxx_personality_v0+0x184>
 800cc2c:	2400      	movs	r4, #0
 800cc2e:	9404      	str	r4, [sp, #16]
 800cc30:	2300      	movs	r3, #0
 800cc32:	4638      	mov	r0, r7
 800cc34:	4619      	mov	r1, r3
 800cc36:	220d      	movs	r2, #13
 800cc38:	f8cd 9000 	str.w	r9, [sp]
 800cc3c:	9d08      	ldr	r5, [sp, #32]
 800cc3e:	f7fa fbf7 	bl	8007430 <_Unwind_VRS_Get>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	2006      	movs	r0, #6
 800cc46:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 800cc4a:	9b04      	ldr	r3, [sp, #16]
 800cc4c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
 800cc50:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 800cc54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc56:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 800cc5a:	f8c8 3020 	str.w	r3, [r8, #32]
 800cc5e:	e76a      	b.n	800cb36 <__gxx_personality_v0+0x26>
 800cc60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc62:	4413      	add	r3, r2
 800cc64:	42b3      	cmp	r3, r6
 800cc66:	d871      	bhi.n	800cd4c <__gxx_personality_v0+0x23c>
 800cc68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc6a:	42ab      	cmp	r3, r5
 800cc6c:	d8a3      	bhi.n	800cbb6 <__gxx_personality_v0+0xa6>
 800cc6e:	e7da      	b.n	800cc26 <__gxx_personality_v0+0x116>
 800cc70:	0702      	lsls	r2, r0, #28
 800cc72:	f53f af5a 	bmi.w	800cb2a <__gxx_personality_v0+0x1a>
 800cc76:	2301      	movs	r3, #1
 800cc78:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cc7c:	9302      	str	r3, [sp, #8]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	220c      	movs	r2, #12
 800cc82:	4638      	mov	r0, r7
 800cc84:	4619      	mov	r1, r3
 800cc86:	f8cd b000 	str.w	fp, [sp]
 800cc8a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800cc8e:	f7fa fbf5 	bl	800747c <_Unwind_VRS_Set>
 800cc92:	e76d      	b.n	800cb70 <__gxx_personality_v0+0x60>
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	071a      	lsls	r2, r3, #28
 800cc98:	d555      	bpl.n	800cd46 <__gxx_personality_v0+0x236>
 800cc9a:	f000 f99f 	bl	800cfdc <_ZSt9terminatev>
 800cc9e:	f8cd b000 	str.w	fp, [sp]
 800cca2:	6a0d      	ldr	r5, [r1, #32]
 800cca4:	4623      	mov	r3, r4
 800cca6:	220d      	movs	r2, #13
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7fa fbc0 	bl	8007430 <_Unwind_VRS_Get>
 800ccb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccb2:	429d      	cmp	r5, r3
 800ccb4:	d002      	beq.n	800ccbc <__gxx_personality_v0+0x1ac>
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	9302      	str	r3, [sp, #8]
 800ccba:	e7e0      	b.n	800cc7e <__gxx_personality_v0+0x16e>
 800ccbc:	4623      	mov	r3, r4
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	220c      	movs	r2, #12
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	f8cd b000 	str.w	fp, [sp]
 800ccc8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800cccc:	f7fa fbd6 	bl	800747c <_Unwind_VRS_Set>
 800ccd0:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	b3b3      	cbz	r3, 800cd46 <__gxx_personality_v0+0x236>
 800ccd8:	e9d8 430a 	ldrd	r4, r3, [r8, #40]	; 0x28
 800ccdc:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800cce0:	9303      	str	r3, [sp, #12]
 800cce2:	2c00      	cmp	r4, #0
 800cce4:	db4e      	blt.n	800cd84 <__gxx_personality_v0+0x274>
 800cce6:	2503      	movs	r5, #3
 800cce8:	2300      	movs	r3, #0
 800ccea:	4638      	mov	r0, r7
 800ccec:	461a      	mov	r2, r3
 800ccee:	4619      	mov	r1, r3
 800ccf0:	f8cd 9000 	str.w	r9, [sp]
 800ccf4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800ccf8:	f7fa fbc0 	bl	800747c <_Unwind_VRS_Set>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	2201      	movs	r2, #1
 800cd00:	4619      	mov	r1, r3
 800cd02:	4638      	mov	r0, r7
 800cd04:	f8cd 9000 	str.w	r9, [sp]
 800cd08:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd0a:	f7fa fbb7 	bl	800747c <_Unwind_VRS_Set>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	220f      	movs	r2, #15
 800cd12:	4619      	mov	r1, r3
 800cd14:	4638      	mov	r0, r7
 800cd16:	f8cd 9000 	str.w	r9, [sp]
 800cd1a:	f7fa fb89 	bl	8007430 <_Unwind_VRS_Get>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd22:	9904      	ldr	r1, [sp, #16]
 800cd24:	f002 0201 	and.w	r2, r2, #1
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	220f      	movs	r2, #15
 800cd30:	4619      	mov	r1, r3
 800cd32:	f8cd 9000 	str.w	r9, [sp]
 800cd36:	f7fa fba1 	bl	800747c <_Unwind_VRS_Set>
 800cd3a:	2d02      	cmp	r5, #2
 800cd3c:	d01d      	beq.n	800cd7a <__gxx_personality_v0+0x26a>
 800cd3e:	2007      	movs	r0, #7
 800cd40:	b013      	add	sp, #76	; 0x4c
 800cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	4640      	mov	r0, r8
 800cd48:	f000 fcf6 	bl	800d738 <__cxa_call_terminate>
 800cd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f43f aeeb 	beq.w	800cb2a <__gxx_personality_v0+0x1a>
 800cd54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd56:	4413      	add	r3, r2
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	2c00      	cmp	r4, #0
 800cd5c:	d138      	bne.n	800cdd0 <__gxx_personality_v0+0x2c0>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f43f aee3 	beq.w	800cb2a <__gxx_personality_v0+0x1a>
 800cd64:	9b02      	ldr	r3, [sp, #8]
 800cd66:	07dd      	lsls	r5, r3, #31
 800cd68:	f53f aedf 	bmi.w	800cb2a <__gxx_personality_v0+0x1a>
 800cd6c:	9b02      	ldr	r3, [sp, #8]
 800cd6e:	071b      	lsls	r3, r3, #28
 800cd70:	f140 811b 	bpl.w	800cfaa <__gxx_personality_v0+0x49a>
 800cd74:	2400      	movs	r4, #0
 800cd76:	2502      	movs	r5, #2
 800cd78:	e7b6      	b.n	800cce8 <__gxx_personality_v0+0x1d8>
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	f7ff fd78 	bl	800c870 <__cxa_begin_cleanup>
 800cd80:	2007      	movs	r0, #7
 800cd82:	e6d8      	b.n	800cb36 <__gxx_personality_v0+0x26>
 800cd84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cd88:	1b1b      	subs	r3, r3, r4
 800cd8a:	461d      	mov	r5, r3
 800cd8c:	465a      	mov	r2, fp
 800cd8e:	9903      	ldr	r1, [sp, #12]
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff fe73 	bl	800ca7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800cd96:	4639      	mov	r1, r7
 800cd98:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cd9c:	f7ff fe4a 	bl	800ca34 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800cda0:	462a      	mov	r2, r5
 800cda2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cda4:	900e      	str	r0, [sp, #56]	; 0x38
 800cda6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdae:	b133      	cbz	r3, 800cdbe <__gxx_personality_v0+0x2ae>
 800cdb0:	462a      	mov	r2, r5
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800cdb8:	3301      	adds	r3, #1
 800cdba:	2900      	cmp	r1, #0
 800cdbc:	d1fa      	bne.n	800cdb4 <__gxx_personality_v0+0x2a4>
 800cdbe:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 800cdc2:	2304      	movs	r3, #4
 800cdc4:	f8c8 5034 	str.w	r5, [r8, #52]	; 0x34
 800cdc8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 800cdcc:	2503      	movs	r5, #3
 800cdce:	e78b      	b.n	800cce8 <__gxx_personality_v0+0x1d8>
 800cdd0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800cdd2:	9b04      	ldr	r3, [sp, #16]
 800cdd4:	3c01      	subs	r4, #1
 800cdd6:	4426      	add	r6, r4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f43f aea6 	beq.w	800cb2a <__gxx_personality_v0+0x1a>
 800cdde:	9b02      	ldr	r3, [sp, #8]
 800cde0:	2e00      	cmp	r6, #0
 800cde2:	f000 80da 	beq.w	800cf9a <__gxx_personality_v0+0x48a>
 800cde6:	f013 0308 	ands.w	r3, r3, #8
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	f000 80c1 	beq.w	800cf72 <__gxx_personality_v0+0x462>
 800cdf0:	2347      	movs	r3, #71	; 0x47
 800cdf2:	f888 3000 	strb.w	r3, [r8]
 800cdf6:	234e      	movs	r3, #78	; 0x4e
 800cdf8:	f888 3001 	strb.w	r3, [r8, #1]
 800cdfc:	2355      	movs	r3, #85	; 0x55
 800cdfe:	f888 3002 	strb.w	r3, [r8, #2]
 800ce02:	2343      	movs	r3, #67	; 0x43
 800ce04:	f888 3003 	strb.w	r3, [r8, #3]
 800ce08:	2346      	movs	r3, #70	; 0x46
 800ce0a:	f888 3004 	strb.w	r3, [r8, #4]
 800ce0e:	234f      	movs	r3, #79	; 0x4f
 800ce10:	f888 3005 	strb.w	r3, [r8, #5]
 800ce14:	2352      	movs	r3, #82	; 0x52
 800ce16:	f888 3006 	strb.w	r3, [r8, #6]
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f888 3007 	strb.w	r3, [r8, #7]
 800ce20:	2300      	movs	r3, #0
 800ce22:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 800ce26:	469b      	mov	fp, r3
 800ce28:	2400      	movs	r4, #0
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	f816 1b01 	ldrb.w	r1, [r6], #1
 800ce30:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800ce34:	4093      	lsls	r3, r2
 800ce36:	0608      	lsls	r0, r1, #24
 800ce38:	ea44 0403 	orr.w	r4, r4, r3
 800ce3c:	f102 0207 	add.w	r2, r2, #7
 800ce40:	d4f4      	bmi.n	800ce2c <__gxx_personality_v0+0x31c>
 800ce42:	2a1f      	cmp	r2, #31
 800ce44:	d805      	bhi.n	800ce52 <__gxx_personality_v0+0x342>
 800ce46:	064b      	lsls	r3, r1, #25
 800ce48:	d503      	bpl.n	800ce52 <__gxx_personality_v0+0x342>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4093      	lsls	r3, r2
 800ce4e:	425b      	negs	r3, r3
 800ce50:	431c      	orrs	r4, r3
 800ce52:	2500      	movs	r5, #0
 800ce54:	4630      	mov	r0, r6
 800ce56:	462a      	mov	r2, r5
 800ce58:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ce5c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800ce60:	4093      	lsls	r3, r2
 800ce62:	060f      	lsls	r7, r1, #24
 800ce64:	ea45 0503 	orr.w	r5, r5, r3
 800ce68:	f102 0207 	add.w	r2, r2, #7
 800ce6c:	d4f4      	bmi.n	800ce58 <__gxx_personality_v0+0x348>
 800ce6e:	2a1f      	cmp	r2, #31
 800ce70:	d805      	bhi.n	800ce7e <__gxx_personality_v0+0x36e>
 800ce72:	0649      	lsls	r1, r1, #25
 800ce74:	d503      	bpl.n	800ce7e <__gxx_personality_v0+0x36e>
 800ce76:	2301      	movs	r3, #1
 800ce78:	4093      	lsls	r3, r2
 800ce7a:	425b      	negs	r3, r3
 800ce7c:	431d      	orrs	r5, r3
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	d035      	beq.n	800ceee <__gxx_personality_v0+0x3de>
 800ce82:	dc37      	bgt.n	800cef4 <__gxx_personality_v0+0x3e4>
 800ce84:	f1b8 0f00 	cmp.w	r8, #0
 800ce88:	d002      	beq.n	800ce90 <__gxx_personality_v0+0x380>
 800ce8a:	9b05      	ldr	r3, [sp, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d04d      	beq.n	800cf2c <__gxx_personality_v0+0x41c>
 800ce90:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 800ce94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce96:	ebaa 0a04 	sub.w	sl, sl, r4
 800ce9a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800ce9e:	b1bb      	cbz	r3, 800ced0 <__gxx_personality_v0+0x3c0>
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	d070      	beq.n	800cf86 <__gxx_personality_v0+0x476>
 800cea4:	442e      	add	r6, r5
 800cea6:	e7bf      	b.n	800ce28 <__gxx_personality_v0+0x318>
 800cea8:	00a3      	lsls	r3, r4, #2
 800ceaa:	425b      	negs	r3, r3
 800ceac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ceae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ceb0:	441a      	add	r2, r3
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	f7ff fd5e 	bl	800c974 <_ZL28read_encoded_value_with_basehjPKhPj>
 800ceb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ceba:	b149      	cbz	r1, 800ced0 <__gxx_personality_v0+0x3c0>
 800cebc:	f1b8 0f00 	cmp.w	r8, #0
 800cec0:	d0ee      	beq.n	800cea0 <__gxx_personality_v0+0x390>
 800cec2:	2200      	movs	r2, #0
 800cec4:	4640      	mov	r0, r8
 800cec6:	ab08      	add	r3, sp, #32
 800cec8:	f7ff fc78 	bl	800c7bc <__cxa_type_match>
 800cecc:	2800      	cmp	r0, #0
 800cece:	d0e7      	beq.n	800cea0 <__gxx_personality_v0+0x390>
 800ced0:	9b02      	ldr	r3, [sp, #8]
 800ced2:	e9dd 7b06 	ldrd	r7, fp, [sp, #24]
 800ced6:	07d9      	lsls	r1, r3, #31
 800ced8:	f53f aeaa 	bmi.w	800cc30 <__gxx_personality_v0+0x120>
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f43f aeff 	beq.w	800cce2 <__gxx_personality_v0+0x1d2>
 800cee4:	2c00      	cmp	r4, #0
 800cee6:	f6bf aefe 	bge.w	800cce6 <__gxx_personality_v0+0x1d6>
 800ceea:	f000 f885 	bl	800cff8 <_ZSt10unexpectedv>
 800ceee:	f04f 0b01 	mov.w	fp, #1
 800cef2:	e7d5      	b.n	800cea0 <__gxx_personality_v0+0x390>
 800cef4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800cef8:	28ff      	cmp	r0, #255	; 0xff
 800cefa:	d030      	beq.n	800cf5e <__gxx_personality_v0+0x44e>
 800cefc:	f000 0307 	and.w	r3, r0, #7
 800cf00:	2b04      	cmp	r3, #4
 800cf02:	f63f ae1e 	bhi.w	800cb42 <__gxx_personality_v0+0x32>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <__gxx_personality_v0+0x3fc>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cea9 	.word	0x0800cea9
 800cf10:	0800cb43 	.word	0x0800cb43
 800cf14:	0800cf27 	.word	0x0800cf27
 800cf18:	0800cea9 	.word	0x0800cea9
 800cf1c:	0800cf21 	.word	0x0800cf21
 800cf20:	00e3      	lsls	r3, r4, #3
 800cf22:	425b      	negs	r3, r3
 800cf24:	e7c2      	b.n	800ceac <__gxx_personality_v0+0x39c>
 800cf26:	0063      	lsls	r3, r4, #1
 800cf28:	425b      	negs	r3, r3
 800cf2a:	e7bf      	b.n	800ceac <__gxx_personality_v0+0x39c>
 800cf2c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 800cf30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cf32:	ebaa 0a04 	sub.w	sl, sl, r4
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
 800cf3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf3e:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 800cf42:	b919      	cbnz	r1, 800cf4c <__gxx_personality_v0+0x43c>
 800cf44:	e00d      	b.n	800cf62 <__gxx_personality_v0+0x452>
 800cf46:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800cf4a:	b151      	cbz	r1, 800cf62 <__gxx_personality_v0+0x452>
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	2200      	movs	r2, #0
 800cf50:	4640      	mov	r0, r8
 800cf52:	4439      	add	r1, r7
 800cf54:	f7ff fc32 	bl	800c7bc <__cxa_type_match>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d0f4      	beq.n	800cf46 <__gxx_personality_v0+0x436>
 800cf5c:	e7a0      	b.n	800cea0 <__gxx_personality_v0+0x390>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e7a4      	b.n	800ceac <__gxx_personality_v0+0x39c>
 800cf62:	9b02      	ldr	r3, [sp, #8]
 800cf64:	4655      	mov	r5, sl
 800cf66:	e9dd 7b06 	ldrd	r7, fp, [sp, #24]
 800cf6a:	07da      	lsls	r2, r3, #31
 800cf6c:	f53f ae60 	bmi.w	800cc30 <__gxx_personality_v0+0x120>
 800cf70:	e70c      	b.n	800cd8c <__gxx_personality_v0+0x27c>
 800cf72:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	bf0c      	ite	eq
 800cf7a:	f858 3c20 	ldreq.w	r3, [r8, #-32]
 800cf7e:	f108 0358 	addne.w	r3, r8, #88	; 0x58
 800cf82:	9308      	str	r3, [sp, #32]
 800cf84:	e74c      	b.n	800ce20 <__gxx_personality_v0+0x310>
 800cf86:	465b      	mov	r3, fp
 800cf88:	9f06      	ldr	r7, [sp, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f43f adcd 	beq.w	800cb2a <__gxx_personality_v0+0x1a>
 800cf90:	9b02      	ldr	r3, [sp, #8]
 800cf92:	07db      	lsls	r3, r3, #31
 800cf94:	f53f adc9 	bmi.w	800cb2a <__gxx_personality_v0+0x1a>
 800cf98:	e6ec      	b.n	800cd74 <__gxx_personality_v0+0x264>
 800cf9a:	07de      	lsls	r6, r3, #31
 800cf9c:	f53f adc5 	bmi.w	800cb2a <__gxx_personality_v0+0x1a>
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	f013 0408 	ands.w	r4, r3, #8
 800cfa6:	f47f aee5 	bne.w	800cd74 <__gxx_personality_v0+0x264>
 800cfaa:	2502      	movs	r5, #2
 800cfac:	e69c      	b.n	800cce8 <__gxx_personality_v0+0x1d8>
 800cfae:	f000 fc47 	bl	800d840 <__cxa_begin_catch>
 800cfb2:	e672      	b.n	800cc9a <__gxx_personality_v0+0x18a>

0800cfb4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cfb4:	b508      	push	{r3, lr}
 800cfb6:	4780      	blx	r0
 800cfb8:	f000 fcd4 	bl	800d964 <abort>
 800cfbc:	f000 fc40 	bl	800d840 <__cxa_begin_catch>
 800cfc0:	f000 fcd0 	bl	800d964 <abort>
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	f000 fc7a 	bl	800d8c0 <__cxa_end_catch>
 800cfcc:	3401      	adds	r4, #1
 800cfce:	d102      	bne.n	800cfd6 <_ZN10__cxxabiv111__terminateEPFvvE+0x22>
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f000 fbc1 	bl	800d758 <__cxa_call_unexpected>
 800cfd6:	f7ff fbeb 	bl	800c7b0 <__cxa_end_cleanup>
 800cfda:	bf00      	nop

0800cfdc <_ZSt9terminatev>:
 800cfdc:	b508      	push	{r3, lr}
 800cfde:	4b03      	ldr	r3, [pc, #12]	; (800cfec <_ZSt9terminatev+0x10>)
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	f3bf 8f5b 	dmb	ish
 800cfe6:	f7ff ffe5 	bl	800cfb4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800cfea:	bf00      	nop
 800cfec:	2000000c 	.word	0x2000000c

0800cff0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800cff0:	b508      	push	{r3, lr}
 800cff2:	4780      	blx	r0
 800cff4:	f7ff fff2 	bl	800cfdc <_ZSt9terminatev>

0800cff8 <_ZSt10unexpectedv>:
 800cff8:	b508      	push	{r3, lr}
 800cffa:	4b03      	ldr	r3, [pc, #12]	; (800d008 <_ZSt10unexpectedv+0x10>)
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	f3bf 8f5b 	dmb	ish
 800d002:	f7ff fff5 	bl	800cff0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800d006:	bf00      	nop
 800d008:	20000008 	.word	0x20000008

0800d00c <_ZSt13get_terminatev>:
 800d00c:	4b02      	ldr	r3, [pc, #8]	; (800d018 <_ZSt13get_terminatev+0xc>)
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	f3bf 8f5b 	dmb	ish
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	2000000c 	.word	0x2000000c

0800d01c <_ZSt14get_unexpectedv>:
 800d01c:	4b02      	ldr	r3, [pc, #8]	; (800d028 <_ZSt14get_unexpectedv+0xc>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	f3bf 8f5b 	dmb	ish
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000008 	.word	0x20000008

0800d02c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800d02c:	2801      	cmp	r0, #1
 800d02e:	b510      	push	{r4, lr}
 800d030:	d81a      	bhi.n	800d068 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800d032:	f3bf 8f5b 	dmb	ish
 800d036:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800d03a:	e853 2f00 	ldrex	r2, [r3]
 800d03e:	3a01      	subs	r2, #1
 800d040:	e843 2000 	strex	r0, r2, [r3]
 800d044:	2800      	cmp	r0, #0
 800d046:	d1f8      	bne.n	800d03a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800d048:	f3bf 8f5b 	dmb	ish
 800d04c:	b95a      	cbnz	r2, 800d066 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800d04e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800d052:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800d056:	b10b      	cbz	r3, 800d05c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800d058:	4620      	mov	r0, r4
 800d05a:	4798      	blx	r3
 800d05c:	4620      	mov	r0, r4
 800d05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d062:	f7ff bb81 	b.w	800c768 <__cxa_free_exception>
 800d066:	bd10      	pop	{r4, pc}
 800d068:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800d06c:	f7ff ffa2 	bl	800cfb4 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d070 <__cxa_init_primary_exception>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	2500      	movs	r5, #0
 800d074:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800d078:	f840 5c80 	str.w	r5, [r0, #-128]
 800d07c:	4604      	mov	r4, r0
 800d07e:	f7ff ffcd 	bl	800d01c <_ZSt14get_unexpectedv>
 800d082:	f844 0c70 	str.w	r0, [r4, #-112]
 800d086:	f7ff ffc1 	bl	800d00c <_ZSt13get_terminatev>
 800d08a:	232b      	movs	r3, #43	; 0x2b
 800d08c:	2147      	movs	r1, #71	; 0x47
 800d08e:	2243      	movs	r2, #67	; 0x43
 800d090:	f804 1c58 	strb.w	r1, [r4, #-88]
 800d094:	f804 3c53 	strb.w	r3, [r4, #-83]
 800d098:	214e      	movs	r1, #78	; 0x4e
 800d09a:	f804 3c52 	strb.w	r3, [r4, #-82]
 800d09e:	2355      	movs	r3, #85	; 0x55
 800d0a0:	f804 2c55 	strb.w	r2, [r4, #-85]
 800d0a4:	f804 2c54 	strb.w	r2, [r4, #-84]
 800d0a8:	4a06      	ldr	r2, [pc, #24]	; (800d0c4 <__cxa_init_primary_exception+0x54>)
 800d0aa:	f804 5c51 	strb.w	r5, [r4, #-81]
 800d0ae:	f804 1c57 	strb.w	r1, [r4, #-87]
 800d0b2:	f804 3c56 	strb.w	r3, [r4, #-86]
 800d0b6:	f844 0c6c 	str.w	r0, [r4, #-108]
 800d0ba:	f844 2c50 	str.w	r2, [r4, #-80]
 800d0be:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	0800d02d 	.word	0x0800d02d

0800d0c8 <__cxa_throw>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	460e      	mov	r6, r1
 800d0ce:	4615      	mov	r5, r2
 800d0d0:	f7ff fc4c 	bl	800c96c <__cxa_get_globals>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	685c      	ldr	r4, [r3, #4]
 800d0da:	4631      	mov	r1, r6
 800d0dc:	3401      	adds	r4, #1
 800d0de:	462a      	mov	r2, r5
 800d0e0:	605c      	str	r4, [r3, #4]
 800d0e2:	f7ff ffc5 	bl	800d070 <__cxa_init_primary_exception>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	f844 3b28 	str.w	r3, [r4], #40
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f7fa fd38 	bl	8007b64 <_Unwind_RaiseException>
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fba3 	bl	800d840 <__cxa_begin_catch>
 800d0fa:	f7ff ff6f 	bl	800cfdc <_ZSt9terminatev>
 800d0fe:	bf00      	nop

0800d100 <__cxa_rethrow>:
 800d100:	b510      	push	{r4, lr}
 800d102:	f7ff fc33 	bl	800c96c <__cxa_get_globals>
 800d106:	e9d0 4200 	ldrd	r4, r2, [r0]
 800d10a:	3201      	adds	r2, #1
 800d10c:	6042      	str	r2, [r0, #4]
 800d10e:	b164      	cbz	r4, 800d12a <__cxa_rethrow+0x2a>
 800d110:	f894 2020 	ldrb.w	r2, [r4, #32]
 800d114:	2a47      	cmp	r2, #71	; 0x47
 800d116:	d00a      	beq.n	800d12e <__cxa_rethrow+0x2e>
 800d118:	2200      	movs	r2, #0
 800d11a:	6002      	str	r2, [r0, #0]
 800d11c:	3420      	adds	r4, #32
 800d11e:	4620      	mov	r0, r4
 800d120:	f7fa fd44 	bl	8007bac <_Unwind_Resume_or_Rethrow>
 800d124:	4620      	mov	r0, r4
 800d126:	f000 fb8b 	bl	800d840 <__cxa_begin_catch>
 800d12a:	f7ff ff57 	bl	800cfdc <_ZSt9terminatev>
 800d12e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800d132:	2a4e      	cmp	r2, #78	; 0x4e
 800d134:	d1f0      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d136:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800d13a:	2a55      	cmp	r2, #85	; 0x55
 800d13c:	d1ec      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d13e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800d142:	2a43      	cmp	r2, #67	; 0x43
 800d144:	d1e8      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d146:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800d14a:	2a43      	cmp	r2, #67	; 0x43
 800d14c:	d1e4      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d14e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800d152:	2a2b      	cmp	r2, #43	; 0x2b
 800d154:	d1e0      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d156:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800d15a:	2a2b      	cmp	r2, #43	; 0x2b
 800d15c:	d1dc      	bne.n	800d118 <__cxa_rethrow+0x18>
 800d15e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800d162:	2a01      	cmp	r2, #1
 800d164:	d8d8      	bhi.n	800d118 <__cxa_rethrow+0x18>
 800d166:	6962      	ldr	r2, [r4, #20]
 800d168:	4252      	negs	r2, r2
 800d16a:	6162      	str	r2, [r4, #20]
 800d16c:	e7d6      	b.n	800d11c <__cxa_rethrow+0x1c>
 800d16e:	bf00      	nop

0800d170 <_ZSt15get_new_handlerv>:
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <_ZSt15get_new_handlerv+0xc>)
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	f3bf 8f5b 	dmb	ish
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	20000a84 	.word	0x20000a84

0800d180 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800d180:	b510      	push	{r4, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800d186:	6003      	str	r3, [r0, #0]
 800d188:	f000 fa5a 	bl	800d640 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800d18c:	4620      	mov	r0, r4
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	0800f7b4 	.word	0x0800f7b4

0800d194 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800d194:	b510      	push	{r4, lr}
 800d196:	4604      	mov	r4, r0
 800d198:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800d19a:	6003      	str	r3, [r0, #0]
 800d19c:	f000 fa50 	bl	800d640 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	210c      	movs	r1, #12
 800d1a4:	f7ff f9ca 	bl	800c53c <_ZdlPvj>
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	bd10      	pop	{r4, pc}
 800d1ac:	0800f7b4 	.word	0x0800f7b4

0800d1b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	9e06      	ldr	r6, [sp, #24]
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4296      	cmp	r6, r2
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	d009      	beq.n	800d1d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800d1be:	68a0      	ldr	r0, [r4, #8]
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	6804      	ldr	r4, [r0, #0]
 800d1c4:	9606      	str	r6, [sp, #24]
 800d1c6:	6a24      	ldr	r4, [r4, #32]
 800d1c8:	46a4      	mov	ip, r4
 800d1ca:	b002      	add	sp, #8
 800d1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1d0:	4760      	bx	ip
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	9201      	str	r2, [sp, #4]
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	f000 f864 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d1dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d0ec      	beq.n	800d1be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800d1e4:	2006      	movs	r0, #6
 800d1e6:	b002      	add	sp, #8
 800d1e8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ea:	bf00      	nop

0800d1ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	b081      	sub	sp, #4
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 800d1fa:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 800d1fe:	461c      	mov	r4, r3
 800d200:	4606      	mov	r6, r0
 800d202:	4693      	mov	fp, r2
 800d204:	f000 f84e 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d208:	b980      	cbnz	r0, 800d22c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800d20a:	454f      	cmp	r7, r9
 800d20c:	d027      	beq.n	800d25e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
 800d20e:	68b0      	ldr	r0, [r6, #8]
 800d210:	4623      	mov	r3, r4
 800d212:	6804      	ldr	r4, [r0, #0]
 800d214:	e9cd 980c 	strd	r9, r8, [sp, #48]	; 0x30
 800d218:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 800d21c:	69e4      	ldr	r4, [r4, #28]
 800d21e:	465a      	mov	r2, fp
 800d220:	4629      	mov	r1, r5
 800d222:	46a4      	mov	ip, r4
 800d224:	b001      	add	sp, #4
 800d226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d22a:	4760      	bx	ip
 800d22c:	2d00      	cmp	r5, #0
 800d22e:	f8c8 7000 	str.w	r7, [r8]
 800d232:	f888 b004 	strb.w	fp, [r8, #4]
 800d236:	db0c      	blt.n	800d252 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
 800d238:	443d      	add	r5, r7
 800d23a:	45a9      	cmp	r9, r5
 800d23c:	bf0c      	ite	eq
 800d23e:	f04f 0906 	moveq.w	r9, #6
 800d242:	f04f 0901 	movne.w	r9, #1
 800d246:	f888 9006 	strb.w	r9, [r8, #6]
 800d24a:	2000      	movs	r0, #0
 800d24c:	b001      	add	sp, #4
 800d24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d252:	3502      	adds	r5, #2
 800d254:	d1f9      	bne.n	800d24a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 800d256:	2301      	movs	r3, #1
 800d258:	f888 3006 	strb.w	r3, [r8, #6]
 800d25c:	e7f5      	b.n	800d24a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 800d25e:	4651      	mov	r1, sl
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f81f 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d266:	2800      	cmp	r0, #0
 800d268:	d0d1      	beq.n	800d20e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
 800d26a:	f888 b005 	strb.w	fp, [r8, #5]
 800d26e:	e7ec      	b.n	800d24a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>

0800d270 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	4614      	mov	r4, r2
 800d27a:	461d      	mov	r5, r3
 800d27c:	f000 fa1a 	bl	800d6b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800d280:	b948      	cbnz	r0, 800d296 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800d282:	68b0      	ldr	r0, [r6, #8]
 800d284:	462b      	mov	r3, r5
 800d286:	6805      	ldr	r5, [r0, #0]
 800d288:	4622      	mov	r2, r4
 800d28a:	69ac      	ldr	r4, [r5, #24]
 800d28c:	4639      	mov	r1, r7
 800d28e:	46a4      	mov	ip, r4
 800d290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d294:	4760      	bx	ip
 800d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29a:	bf00      	nop

0800d29c <_ZNSt9type_infoD1Ev>:
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop

0800d2a0 <_ZNKSt9type_info14__is_pointer_pEv>:
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	4770      	bx	lr

0800d2a4 <_ZNKSt9type_infoeqERKS_>:
 800d2a4:	4281      	cmp	r1, r0
 800d2a6:	d011      	beq.n	800d2cc <_ZNKSt9type_infoeqERKS_+0x28>
 800d2a8:	b508      	push	{r3, lr}
 800d2aa:	6840      	ldr	r0, [r0, #4]
 800d2ac:	7803      	ldrb	r3, [r0, #0]
 800d2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b0:	d00a      	beq.n	800d2c8 <_ZNKSt9type_infoeqERKS_+0x24>
 800d2b2:	6849      	ldr	r1, [r1, #4]
 800d2b4:	780b      	ldrb	r3, [r1, #0]
 800d2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b8:	bf08      	it	eq
 800d2ba:	3101      	addeq	r1, #1
 800d2bc:	f7f8 ff32 	bl	8006124 <strcmp>
 800d2c0:	fab0 f080 	clz	r0, r0
 800d2c4:	0940      	lsrs	r0, r0, #5
 800d2c6:	bd08      	pop	{r3, pc}
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	bd08      	pop	{r3, pc}
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	4770      	bx	lr

0800d2d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	4b3b      	ldr	r3, [pc, #236]	; (800d3c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
 800d2d4:	b082      	sub	sp, #8
 800d2d6:	781a      	ldrb	r2, [r3, #0]
 800d2d8:	2a00      	cmp	r2, #0
 800d2da:	d141      	bne.n	800d360 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
 800d2dc:	2401      	movs	r4, #1
 800d2de:	701c      	strb	r4, [r3, #0]
 800d2e0:	f000 fb32 	bl	800d948 <__cxa_current_exception_type>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d031      	beq.n	800d34c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f04f 36ff 	mov.w	r6, #4294967295
 800d2ee:	6844      	ldr	r4, [r0, #4]
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	7823      	ldrb	r3, [r4, #0]
 800d2f4:	9601      	str	r6, [sp, #4]
 800d2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f8:	bf08      	it	eq
 800d2fa:	3401      	addeq	r4, #1
 800d2fc:	ab01      	add	r3, sp, #4
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7f8 fe9c 	bl	800603c <__cxa_demangle>
 800d304:	4d2f      	ldr	r5, [pc, #188]	; (800d3c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800d306:	4606      	mov	r6, r0
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	2230      	movs	r2, #48	; 0x30
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	2101      	movs	r1, #1
 800d310:	482d      	ldr	r0, [pc, #180]	; (800d3c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800d312:	f7fe fdb1 	bl	800be78 <fwrite>
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	b193      	cbz	r3, 800d340 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	4620      	mov	r0, r4
 800d31e:	68d9      	ldr	r1, [r3, #12]
 800d320:	f7fe fd8e 	bl	800be40 <fputs>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	2202      	movs	r2, #2
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	2101      	movs	r1, #1
 800d32c:	4827      	ldr	r0, [pc, #156]	; (800d3cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800d32e:	f7fe fda3 	bl	800be78 <fwrite>
 800d332:	9b01      	ldr	r3, [sp, #4]
 800d334:	b913      	cbnz	r3, 800d33c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 800d336:	4630      	mov	r0, r6
 800d338:	f000 fb7e 	bl	800da38 <free>
 800d33c:	f7ff fee0 	bl	800d100 <__cxa_rethrow>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	4630      	mov	r0, r6
 800d344:	68d9      	ldr	r1, [r3, #12]
 800d346:	f7fe fd7b 	bl	800be40 <fputs>
 800d34a:	e7eb      	b.n	800d324 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
 800d34c:	4b1d      	ldr	r3, [pc, #116]	; (800d3c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800d34e:	222d      	movs	r2, #45	; 0x2d
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4621      	mov	r1, r4
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	481e      	ldr	r0, [pc, #120]	; (800d3d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800d358:	f7fe fd8e 	bl	800be78 <fwrite>
 800d35c:	f000 fb02 	bl	800d964 <abort>
 800d360:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800d362:	221d      	movs	r2, #29
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2101      	movs	r1, #1
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	481a      	ldr	r0, [pc, #104]	; (800d3d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800d36c:	f7fe fd84 	bl	800be78 <fwrite>
 800d370:	f000 faf8 	bl	800d964 <abort>
 800d374:	2901      	cmp	r1, #1
 800d376:	460c      	mov	r4, r1
 800d378:	d119      	bne.n	800d3ae <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
 800d37a:	f000 fa61 	bl	800d840 <__cxa_begin_catch>
 800d37e:	6803      	ldr	r3, [r0, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	4798      	blx	r3
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	4606      	mov	r6, r0
 800d388:	220b      	movs	r2, #11
 800d38a:	4621      	mov	r1, r4
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	4812      	ldr	r0, [pc, #72]	; (800d3d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800d390:	f7fe fd72 	bl	800be78 <fwrite>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	4630      	mov	r0, r6
 800d398:	68d9      	ldr	r1, [r3, #12]
 800d39a:	f7fe fd51 	bl	800be40 <fputs>
 800d39e:	682b      	ldr	r3, [r5, #0]
 800d3a0:	200a      	movs	r0, #10
 800d3a2:	68d9      	ldr	r1, [r3, #12]
 800d3a4:	f000 fb10 	bl	800d9c8 <fputc>
 800d3a8:	f000 fa8a 	bl	800d8c0 <__cxa_end_catch>
 800d3ac:	e7d6      	b.n	800d35c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 800d3ae:	f000 fa47 	bl	800d840 <__cxa_begin_catch>
 800d3b2:	f000 fa85 	bl	800d8c0 <__cxa_end_catch>
 800d3b6:	e7d1      	b.n	800d35c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 800d3b8:	f000 fa82 	bl	800d8c0 <__cxa_end_catch>
 800d3bc:	f7ff f9f8 	bl	800c7b0 <__cxa_end_cleanup>
 800d3c0:	20000a88 	.word	0x20000a88
 800d3c4:	20000010 	.word	0x20000010
 800d3c8:	0800f810 	.word	0x0800f810
 800d3cc:	0800f844 	.word	0x0800f844
 800d3d0:	0800f848 	.word	0x0800f848
 800d3d4:	0800f7f0 	.word	0x0800f7f0
 800d3d8:	0800f878 	.word	0x0800f878

0800d3dc <_ZNKSt11logic_error4whatEv>:
 800d3dc:	6840      	ldr	r0, [r0, #4]
 800d3de:	4770      	bx	lr

0800d3e0 <_ZNSt11logic_errorD1Ev>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	490d      	ldr	r1, [pc, #52]	; (800d418 <_ZNSt11logic_errorD1Ev+0x38>)
 800d3e4:	6843      	ldr	r3, [r0, #4]
 800d3e6:	4a0d      	ldr	r2, [pc, #52]	; (800d41c <_ZNSt11logic_errorD1Ev+0x3c>)
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	6001      	str	r1, [r0, #0]
 800d3ec:	f1a3 000c 	sub.w	r0, r3, #12
 800d3f0:	4290      	cmp	r0, r2
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	d105      	bne.n	800d402 <_ZNSt11logic_errorD1Ev+0x22>
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f7ff faa4 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	b002      	add	sp, #8
 800d400:	bd10      	pop	{r4, pc}
 800d402:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d406:	1e51      	subs	r1, r2, #1
 800d408:	2a00      	cmp	r2, #0
 800d40a:	f843 1c04 	str.w	r1, [r3, #-4]
 800d40e:	dcf2      	bgt.n	800d3f6 <_ZNSt11logic_errorD1Ev+0x16>
 800d410:	a901      	add	r1, sp, #4
 800d412:	f000 f8f3 	bl	800d5fc <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800d416:	e7ee      	b.n	800d3f6 <_ZNSt11logic_errorD1Ev+0x16>
 800d418:	0800f8c8 	.word	0x0800f8c8
 800d41c:	20000a8c 	.word	0x20000a8c

0800d420 <_ZNSt12length_errorD1Ev>:
 800d420:	b510      	push	{r4, lr}
 800d422:	490d      	ldr	r1, [pc, #52]	; (800d458 <_ZNSt12length_errorD1Ev+0x38>)
 800d424:	6843      	ldr	r3, [r0, #4]
 800d426:	4a0d      	ldr	r2, [pc, #52]	; (800d45c <_ZNSt12length_errorD1Ev+0x3c>)
 800d428:	4604      	mov	r4, r0
 800d42a:	6001      	str	r1, [r0, #0]
 800d42c:	f1a3 000c 	sub.w	r0, r3, #12
 800d430:	4290      	cmp	r0, r2
 800d432:	b082      	sub	sp, #8
 800d434:	d105      	bne.n	800d442 <_ZNSt12length_errorD1Ev+0x22>
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff fa84 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800d43c:	4620      	mov	r0, r4
 800d43e:	b002      	add	sp, #8
 800d440:	bd10      	pop	{r4, pc}
 800d442:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d446:	1e51      	subs	r1, r2, #1
 800d448:	2a00      	cmp	r2, #0
 800d44a:	f843 1c04 	str.w	r1, [r3, #-4]
 800d44e:	dcf2      	bgt.n	800d436 <_ZNSt12length_errorD1Ev+0x16>
 800d450:	a901      	add	r1, sp, #4
 800d452:	f000 f8d3 	bl	800d5fc <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800d456:	e7ee      	b.n	800d436 <_ZNSt12length_errorD1Ev+0x16>
 800d458:	0800f8c8 	.word	0x0800f8c8
 800d45c:	20000a8c 	.word	0x20000a8c

0800d460 <_ZNSt11logic_errorD0Ev>:
 800d460:	b510      	push	{r4, lr}
 800d462:	490f      	ldr	r1, [pc, #60]	; (800d4a0 <_ZNSt11logic_errorD0Ev+0x40>)
 800d464:	6843      	ldr	r3, [r0, #4]
 800d466:	4a0f      	ldr	r2, [pc, #60]	; (800d4a4 <_ZNSt11logic_errorD0Ev+0x44>)
 800d468:	4604      	mov	r4, r0
 800d46a:	6001      	str	r1, [r0, #0]
 800d46c:	f1a3 000c 	sub.w	r0, r3, #12
 800d470:	4290      	cmp	r0, r2
 800d472:	b082      	sub	sp, #8
 800d474:	d108      	bne.n	800d488 <_ZNSt11logic_errorD0Ev+0x28>
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff fa64 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800d47c:	4620      	mov	r0, r4
 800d47e:	f7ff f8e7 	bl	800c650 <_ZdlPv>
 800d482:	4620      	mov	r0, r4
 800d484:	b002      	add	sp, #8
 800d486:	bd10      	pop	{r4, pc}
 800d488:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d48c:	1e51      	subs	r1, r2, #1
 800d48e:	2a00      	cmp	r2, #0
 800d490:	f843 1c04 	str.w	r1, [r3, #-4]
 800d494:	dcef      	bgt.n	800d476 <_ZNSt11logic_errorD0Ev+0x16>
 800d496:	a901      	add	r1, sp, #4
 800d498:	f000 f8b0 	bl	800d5fc <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800d49c:	e7eb      	b.n	800d476 <_ZNSt11logic_errorD0Ev+0x16>
 800d49e:	bf00      	nop
 800d4a0:	0800f8c8 	.word	0x0800f8c8
 800d4a4:	20000a8c 	.word	0x20000a8c

0800d4a8 <_ZNSt12length_errorD0Ev>:
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	490f      	ldr	r1, [pc, #60]	; (800d4e8 <_ZNSt12length_errorD0Ev+0x40>)
 800d4ac:	6843      	ldr	r3, [r0, #4]
 800d4ae:	4a0f      	ldr	r2, [pc, #60]	; (800d4ec <_ZNSt12length_errorD0Ev+0x44>)
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	6001      	str	r1, [r0, #0]
 800d4b4:	f1a3 000c 	sub.w	r0, r3, #12
 800d4b8:	4290      	cmp	r0, r2
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	d108      	bne.n	800d4d0 <_ZNSt12length_errorD0Ev+0x28>
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f7ff fa40 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7ff f8c3 	bl	800c650 <_ZdlPv>
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	b002      	add	sp, #8
 800d4ce:	bd10      	pop	{r4, pc}
 800d4d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d4d4:	1e51      	subs	r1, r2, #1
 800d4d6:	2a00      	cmp	r2, #0
 800d4d8:	f843 1c04 	str.w	r1, [r3, #-4]
 800d4dc:	dcef      	bgt.n	800d4be <_ZNSt12length_errorD0Ev+0x16>
 800d4de:	a901      	add	r1, sp, #4
 800d4e0:	f000 f88c 	bl	800d5fc <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800d4e4:	e7eb      	b.n	800d4be <_ZNSt12length_errorD0Ev+0x16>
 800d4e6:	bf00      	nop
 800d4e8:	0800f8c8 	.word	0x0800f8c8
 800d4ec:	20000a8c 	.word	0x20000a8c

0800d4f0 <_ZNSt11logic_errorC1EPKc>:
 800d4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4f2:	4b1b      	ldr	r3, [pc, #108]	; (800d560 <_ZNSt11logic_errorC1EPKc+0x70>)
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	6003      	str	r3, [r0, #0]
 800d4fa:	b349      	cbz	r1, 800d550 <_ZNSt11logic_errorC1EPKc+0x60>
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	460d      	mov	r5, r1
 800d500:	f7f8 fe1a 	bl	8006138 <strlen>
 800d504:	4606      	mov	r6, r0
 800d506:	b1a8      	cbz	r0, 800d534 <_ZNSt11logic_errorC1EPKc+0x44>
 800d508:	2100      	movs	r1, #0
 800d50a:	aa01      	add	r2, sp, #4
 800d50c:	f000 f83a 	bl	800d584 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 800d510:	2e01      	cmp	r6, #1
 800d512:	4607      	mov	r7, r0
 800d514:	f100 030c 	add.w	r3, r0, #12
 800d518:	d011      	beq.n	800d53e <_ZNSt11logic_errorC1EPKc+0x4e>
 800d51a:	4618      	mov	r0, r3
 800d51c:	4629      	mov	r1, r5
 800d51e:	4632      	mov	r2, r6
 800d520:	f000 fcde 	bl	800dee0 <memcpy>
 800d524:	4603      	mov	r3, r0
 800d526:	4a0f      	ldr	r2, [pc, #60]	; (800d564 <_ZNSt11logic_errorC1EPKc+0x74>)
 800d528:	4297      	cmp	r7, r2
 800d52a:	d10b      	bne.n	800d544 <_ZNSt11logic_errorC1EPKc+0x54>
 800d52c:	4620      	mov	r0, r4
 800d52e:	6063      	str	r3, [r4, #4]
 800d530:	b003      	add	sp, #12
 800d532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d534:	4620      	mov	r0, r4
 800d536:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <_ZNSt11logic_errorC1EPKc+0x78>)
 800d538:	6063      	str	r3, [r4, #4]
 800d53a:	b003      	add	sp, #12
 800d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53e:	782a      	ldrb	r2, [r5, #0]
 800d540:	7302      	strb	r2, [r0, #12]
 800d542:	e7f0      	b.n	800d526 <_ZNSt11logic_errorC1EPKc+0x36>
 800d544:	2200      	movs	r2, #0
 800d546:	603e      	str	r6, [r7, #0]
 800d548:	443e      	add	r6, r7
 800d54a:	60ba      	str	r2, [r7, #8]
 800d54c:	7332      	strb	r2, [r6, #12]
 800d54e:	e7ed      	b.n	800d52c <_ZNSt11logic_errorC1EPKc+0x3c>
 800d550:	4806      	ldr	r0, [pc, #24]	; (800d56c <_ZNSt11logic_errorC1EPKc+0x7c>)
 800d552:	f7ff f831 	bl	800c5b8 <_ZSt19__throw_logic_errorPKc>
 800d556:	4620      	mov	r0, r4
 800d558:	f7ff f9f4 	bl	800c944 <_ZNSt9exceptionD1Ev>
 800d55c:	f7ff f928 	bl	800c7b0 <__cxa_end_cleanup>
 800d560:	0800f8c8 	.word	0x0800f8c8
 800d564:	20000a8c 	.word	0x20000a8c
 800d568:	20000a98 	.word	0x20000a98
 800d56c:	0800f8e8 	.word	0x0800f8e8

0800d570 <_ZNSt12length_errorC1EPKc>:
 800d570:	b510      	push	{r4, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	f7ff ffbc 	bl	800d4f0 <_ZNSt11logic_errorC1EPKc>
 800d578:	4b01      	ldr	r3, [pc, #4]	; (800d580 <_ZNSt12length_errorC1EPKc+0x10>)
 800d57a:	4620      	mov	r0, r4
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd10      	pop	{r4, pc}
 800d580:	0800f8dc 	.word	0x0800f8dc

0800d584 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 800d584:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x70>)
 800d586:	b510      	push	{r4, lr}
 800d588:	4298      	cmp	r0, r3
 800d58a:	d830      	bhi.n	800d5ee <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x6a>
 800d58c:	4288      	cmp	r0, r1
 800d58e:	4604      	mov	r4, r0
 800d590:	d91c      	bls.n	800d5cc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 800d592:	004a      	lsls	r2, r1, #1
 800d594:	4290      	cmp	r0, r2
 800d596:	bf38      	it	cc
 800d598:	4614      	movcc	r4, r2
 800d59a:	f104 021d 	add.w	r2, r4, #29
 800d59e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800d5a2:	f104 000d 	add.w	r0, r4, #13
 800d5a6:	d918      	bls.n	800d5da <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
 800d5a8:	428c      	cmp	r4, r1
 800d5aa:	d916      	bls.n	800d5da <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x56>
 800d5ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d5b0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800d5b4:	1aa4      	subs	r4, r4, r2
 800d5b6:	429c      	cmp	r4, r3
 800d5b8:	bf28      	it	cs
 800d5ba:	461c      	movcs	r4, r3
 800d5bc:	f104 000d 	add.w	r0, r4, #13
 800d5c0:	f7fe ffbe 	bl	800c540 <_Znwj>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800d5ca:	bd10      	pop	{r4, pc}
 800d5cc:	f100 031d 	add.w	r3, r0, #29
 800d5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d4:	f100 000d 	add.w	r0, r0, #13
 800d5d8:	d901      	bls.n	800d5de <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5a>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	db05      	blt.n	800d5ea <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x66>
 800d5de:	f7fe ffaf 	bl	800c540 <_Znwj>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800d5e8:	bd10      	pop	{r4, pc}
 800d5ea:	f7fe ffd5 	bl	800c598 <_ZSt17__throw_bad_allocv>
 800d5ee:	4802      	ldr	r0, [pc, #8]	; (800d5f8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x74>)
 800d5f0:	f7fe fffa 	bl	800c5e8 <_ZSt20__throw_length_errorPKc>
 800d5f4:	3ffffffc 	.word	0x3ffffffc
 800d5f8:	0800f914 	.word	0x0800f914

0800d5fc <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 800d5fc:	f7ff b828 	b.w	800c650 <_ZdlPv>

0800d600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800d600:	2310      	movs	r3, #16
 800d602:	b570      	push	{r4, r5, r6, lr}
 800d604:	2400      	movs	r4, #0
 800d606:	b084      	sub	sp, #16
 800d608:	9302      	str	r3, [sp, #8]
 800d60a:	6803      	ldr	r3, [r0, #0]
 800d60c:	4615      	mov	r5, r2
 800d60e:	699e      	ldr	r6, [r3, #24]
 800d610:	6812      	ldr	r2, [r2, #0]
 800d612:	466b      	mov	r3, sp
 800d614:	9400      	str	r4, [sp, #0]
 800d616:	9401      	str	r4, [sp, #4]
 800d618:	9403      	str	r4, [sp, #12]
 800d61a:	47b0      	blx	r6
 800d61c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d620:	f003 0306 	and.w	r3, r3, #6
 800d624:	2b06      	cmp	r3, #6
 800d626:	bf09      	itett	eq
 800d628:	2001      	moveq	r0, #1
 800d62a:	4620      	movne	r0, r4
 800d62c:	9b00      	ldreq	r3, [sp, #0]
 800d62e:	602b      	streq	r3, [r5, #0]
 800d630:	b004      	add	sp, #16
 800d632:	bd70      	pop	{r4, r5, r6, pc}

0800d634 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800d634:	9800      	ldr	r0, [sp, #0]
 800d636:	4290      	cmp	r0, r2
 800d638:	bf14      	ite	ne
 800d63a:	2001      	movne	r0, #1
 800d63c:	2006      	moveq	r0, #6
 800d63e:	4770      	bx	lr

0800d640 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800d640:	b510      	push	{r4, lr}
 800d642:	4604      	mov	r4, r0
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800d646:	6003      	str	r3, [r0, #0]
 800d648:	f7ff fe28 	bl	800d29c <_ZNSt9type_infoD1Ev>
 800d64c:	4620      	mov	r0, r4
 800d64e:	bd10      	pop	{r4, pc}
 800d650:	0800f964 	.word	0x0800f964

0800d654 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800d654:	b510      	push	{r4, lr}
 800d656:	4604      	mov	r4, r0
 800d658:	4b04      	ldr	r3, [pc, #16]	; (800d66c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800d65a:	6003      	str	r3, [r0, #0]
 800d65c:	f7ff fe1e 	bl	800d29c <_ZNSt9type_infoD1Ev>
 800d660:	4620      	mov	r0, r4
 800d662:	2108      	movs	r1, #8
 800d664:	f7fe ff6a 	bl	800c53c <_ZdlPvj>
 800d668:	4620      	mov	r0, r4
 800d66a:	bd10      	pop	{r4, pc}
 800d66c:	0800f964 	.word	0x0800f964

0800d670 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d674:	9f06      	ldr	r7, [sp, #24]
 800d676:	e9dd 1508 	ldrd	r1, r5, [sp, #32]
 800d67a:	428f      	cmp	r7, r1
 800d67c:	4604      	mov	r4, r0
 800d67e:	4690      	mov	r8, r2
 800d680:	461e      	mov	r6, r3
 800d682:	d00c      	beq.n	800d69e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800d684:	4631      	mov	r1, r6
 800d686:	4620      	mov	r0, r4
 800d688:	f7ff fe0c 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d68c:	b120      	cbz	r0, 800d698 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 800d68e:	2301      	movs	r3, #1
 800d690:	602f      	str	r7, [r5, #0]
 800d692:	f885 8004 	strb.w	r8, [r5, #4]
 800d696:	71ab      	strb	r3, [r5, #6]
 800d698:	2000      	movs	r0, #0
 800d69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69e:	9907      	ldr	r1, [sp, #28]
 800d6a0:	f7ff fe00 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d0ed      	beq.n	800d684 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f885 8005 	strb.w	r8, [r5, #5]
 800d6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b2:	bf00      	nop

0800d6b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	4615      	mov	r5, r2
 800d6b8:	461c      	mov	r4, r3
 800d6ba:	f7ff fdf3 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d6be:	b900      	cbnz	r0, 800d6c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
 800d6c0:	bd38      	pop	{r3, r4, r5, pc}
 800d6c2:	2208      	movs	r2, #8
 800d6c4:	2306      	movs	r3, #6
 800d6c6:	6025      	str	r5, [r4, #0]
 800d6c8:	60e2      	str	r2, [r4, #12]
 800d6ca:	7123      	strb	r3, [r4, #4]
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	bf00      	nop

0800d6d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	4617      	mov	r7, r2
 800d6d8:	461d      	mov	r5, r3
 800d6da:	460c      	mov	r4, r1
 800d6dc:	f7ff fde2 	bl	800d2a4 <_ZNKSt9type_infoeqERKS_>
 800d6e0:	b948      	cbnz	r0, 800d6f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800d6e2:	2d03      	cmp	r5, #3
 800d6e4:	d807      	bhi.n	800d6f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	463a      	mov	r2, r7
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	4718      	bx	r3
 800d6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fa:	bf00      	nop

0800d6fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800d6fc:	7803      	ldrb	r3, [r0, #0]
 800d6fe:	2b47      	cmp	r3, #71	; 0x47
 800d700:	d001      	beq.n	800d706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800d702:	2000      	movs	r0, #0
 800d704:	4770      	bx	lr
 800d706:	7843      	ldrb	r3, [r0, #1]
 800d708:	2b4e      	cmp	r3, #78	; 0x4e
 800d70a:	d1fa      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d70c:	7883      	ldrb	r3, [r0, #2]
 800d70e:	2b55      	cmp	r3, #85	; 0x55
 800d710:	d1f7      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d712:	78c3      	ldrb	r3, [r0, #3]
 800d714:	2b43      	cmp	r3, #67	; 0x43
 800d716:	d1f4      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d718:	7903      	ldrb	r3, [r0, #4]
 800d71a:	2b43      	cmp	r3, #67	; 0x43
 800d71c:	d1f1      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d71e:	7943      	ldrb	r3, [r0, #5]
 800d720:	2b2b      	cmp	r3, #43	; 0x2b
 800d722:	d1ee      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d724:	7983      	ldrb	r3, [r0, #6]
 800d726:	2b2b      	cmp	r3, #43	; 0x2b
 800d728:	d1eb      	bne.n	800d702 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800d72a:	79c0      	ldrb	r0, [r0, #7]
 800d72c:	2801      	cmp	r0, #1
 800d72e:	bf8c      	ite	hi
 800d730:	2000      	movhi	r0, #0
 800d732:	2001      	movls	r0, #1
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop

0800d738 <__cxa_call_terminate>:
 800d738:	b510      	push	{r4, lr}
 800d73a:	b130      	cbz	r0, 800d74a <__cxa_call_terminate+0x12>
 800d73c:	4604      	mov	r4, r0
 800d73e:	f000 f87f 	bl	800d840 <__cxa_begin_catch>
 800d742:	4620      	mov	r0, r4
 800d744:	f7ff ffda 	bl	800d6fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800d748:	b908      	cbnz	r0, 800d74e <__cxa_call_terminate+0x16>
 800d74a:	f7ff fc47 	bl	800cfdc <_ZSt9terminatev>
 800d74e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800d752:	f7ff fc2f 	bl	800cfb4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800d756:	bf00      	nop

0800d758 <__cxa_call_unexpected>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	b085      	sub	sp, #20
 800d75e:	4602      	mov	r2, r0
 800d760:	f7ff ffcc 	bl	800d6fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800d764:	b140      	cbz	r0, 800d778 <__cxa_call_unexpected+0x20>
 800d766:	e952 7406 	ldrd	r7, r4, [r2, #-24]
 800d76a:	2600      	movs	r6, #0
 800d76c:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800d770:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800d774:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d776:	e005      	b.n	800d784 <__cxa_call_unexpected+0x2c>
 800d778:	4604      	mov	r4, r0
 800d77a:	2601      	movs	r6, #1
 800d77c:	4607      	mov	r7, r0
 800d77e:	4605      	mov	r5, r0
 800d780:	4680      	mov	r8, r0
 800d782:	4682      	mov	sl, r0
 800d784:	4610      	mov	r0, r2
 800d786:	f000 f85b 	bl	800d840 <__cxa_begin_catch>
 800d78a:	b10e      	cbz	r6, 800d790 <__cxa_call_unexpected+0x38>
 800d78c:	f7ff fc34 	bl	800cff8 <_ZSt10unexpectedv>
 800d790:	4638      	mov	r0, r7
 800d792:	f7ff fc2d 	bl	800cff0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800d796:	f000 f853 	bl	800d840 <__cxa_begin_catch>
 800d79a:	b10e      	cbz	r6, 800d7a0 <__cxa_call_unexpected+0x48>
 800d79c:	f7ff fc1e 	bl	800cfdc <_ZSt9terminatev>
 800d7a0:	f7ff f8e0 	bl	800c964 <__cxa_get_globals_fast>
 800d7a4:	f04f 0900 	mov.w	r9, #0
 800d7a8:	6807      	ldr	r7, [r0, #0]
 800d7aa:	f8df b088 	ldr.w	fp, [pc, #136]	; 800d834 <__cxa_call_unexpected+0xdc>
 800d7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	bf0c      	ite	eq
 800d7b6:	683b      	ldreq	r3, [r7, #0]
 800d7b8:	f107 0378 	addne.w	r3, r7, #120	; 0x78
 800d7bc:	9302      	str	r3, [sp, #8]
 800d7be:	f028 0303 	bic.w	r3, r8, #3
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	45ca      	cmp	sl, r9
 800d7c8:	dd20      	ble.n	800d80c <__cxa_call_unexpected+0xb4>
 800d7ca:	f8d5 8000 	ldr.w	r8, [r5]
 800d7ce:	f1b8 0f00 	cmp.w	r8, #0
 800d7d2:	d000      	beq.n	800d7d6 <__cxa_call_unexpected+0x7e>
 800d7d4:	44a8      	add	r8, r5
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4641      	mov	r1, r8
 800d7da:	4638      	mov	r0, r7
 800d7dc:	ab02      	add	r3, sp, #8
 800d7de:	f7fe ffed 	bl	800c7bc <__cxa_type_match>
 800d7e2:	b108      	cbz	r0, 800d7e8 <__cxa_call_unexpected+0x90>
 800d7e4:	f7ff fc8c 	bl	800d100 <__cxa_rethrow>
 800d7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ec:	9003      	str	r0, [sp, #12]
 800d7ee:	4659      	mov	r1, fp
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	aa03      	add	r2, sp, #12
 800d7f4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	47c0      	blx	r8
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	2800      	cmp	r0, #0
 800d800:	bf18      	it	ne
 800d802:	4606      	movne	r6, r0
 800d804:	f109 0901 	add.w	r9, r9, #1
 800d808:	441d      	add	r5, r3
 800d80a:	e7dc      	b.n	800d7c6 <__cxa_call_unexpected+0x6e>
 800d80c:	b146      	cbz	r6, 800d820 <__cxa_call_unexpected+0xc8>
 800d80e:	2004      	movs	r0, #4
 800d810:	f7fe ff92 	bl	800c738 <__cxa_allocate_exception>
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <__cxa_call_unexpected+0xe0>)
 800d816:	4a09      	ldr	r2, [pc, #36]	; (800d83c <__cxa_call_unexpected+0xe4>)
 800d818:	4906      	ldr	r1, [pc, #24]	; (800d834 <__cxa_call_unexpected+0xdc>)
 800d81a:	6003      	str	r3, [r0, #0]
 800d81c:	f7ff fc54 	bl	800d0c8 <__cxa_throw>
 800d820:	4620      	mov	r0, r4
 800d822:	f7ff fbc7 	bl	800cfb4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800d826:	f000 f84b 	bl	800d8c0 <__cxa_end_catch>
 800d82a:	f000 f849 	bl	800d8c0 <__cxa_end_catch>
 800d82e:	f7fe ffbf 	bl	800c7b0 <__cxa_end_cleanup>
 800d832:	bf00      	nop
 800d834:	0800f6e8 	.word	0x0800f6e8
 800d838:	0800f76c 	.word	0x0800f76c
 800d83c:	0800c949 	.word	0x0800c949

0800d840 <__cxa_begin_catch>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4604      	mov	r4, r0
 800d844:	f7ff f892 	bl	800c96c <__cxa_get_globals>
 800d848:	4622      	mov	r2, r4
 800d84a:	f812 3920 	ldrb.w	r3, [r2], #-32
 800d84e:	6805      	ldr	r5, [r0, #0]
 800d850:	2b47      	cmp	r3, #71	; 0x47
 800d852:	d003      	beq.n	800d85c <__cxa_begin_catch+0x1c>
 800d854:	bb8d      	cbnz	r5, 800d8ba <__cxa_begin_catch+0x7a>
 800d856:	6002      	str	r2, [r0, #0]
 800d858:	4628      	mov	r0, r5
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	7863      	ldrb	r3, [r4, #1]
 800d85e:	2b4e      	cmp	r3, #78	; 0x4e
 800d860:	d1f8      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d862:	78a3      	ldrb	r3, [r4, #2]
 800d864:	2b55      	cmp	r3, #85	; 0x55
 800d866:	d1f5      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d868:	78e3      	ldrb	r3, [r4, #3]
 800d86a:	2b43      	cmp	r3, #67	; 0x43
 800d86c:	d1f2      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d86e:	7923      	ldrb	r3, [r4, #4]
 800d870:	2b43      	cmp	r3, #67	; 0x43
 800d872:	d1ef      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d874:	7963      	ldrb	r3, [r4, #5]
 800d876:	2b2b      	cmp	r3, #43	; 0x2b
 800d878:	d1ec      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d87a:	79a3      	ldrb	r3, [r4, #6]
 800d87c:	2b2b      	cmp	r3, #43	; 0x2b
 800d87e:	d1e9      	bne.n	800d854 <__cxa_begin_catch+0x14>
 800d880:	79e3      	ldrb	r3, [r4, #7]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d8e6      	bhi.n	800d854 <__cxa_begin_catch+0x14>
 800d886:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	db12      	blt.n	800d8b4 <__cxa_begin_catch+0x74>
 800d88e:	3301      	adds	r3, #1
 800d890:	f844 3c0c 	str.w	r3, [r4, #-12]
 800d894:	6843      	ldr	r3, [r0, #4]
 800d896:	4295      	cmp	r5, r2
 800d898:	f103 33ff 	add.w	r3, r3, #4294967295
 800d89c:	6043      	str	r3, [r0, #4]
 800d89e:	bf18      	it	ne
 800d8a0:	f844 5c10 	strne.w	r5, [r4, #-16]
 800d8a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8a6:	bf18      	it	ne
 800d8a8:	6002      	strne	r2, [r0, #0]
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7f9 fdb8 	bl	8007420 <_Unwind_Complete>
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	f1c3 0301 	rsb	r3, r3, #1
 800d8b8:	e7ea      	b.n	800d890 <__cxa_begin_catch+0x50>
 800d8ba:	f7ff fb8f 	bl	800cfdc <_ZSt9terminatev>
 800d8be:	bf00      	nop

0800d8c0 <__cxa_end_catch>:
 800d8c0:	b508      	push	{r3, lr}
 800d8c2:	f7ff f84f 	bl	800c964 <__cxa_get_globals_fast>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	6800      	ldr	r0, [r0, #0]
 800d8ca:	b370      	cbz	r0, 800d92a <__cxa_end_catch+0x6a>
 800d8cc:	f890 1020 	ldrb.w	r1, [r0, #32]
 800d8d0:	2947      	cmp	r1, #71	; 0x47
 800d8d2:	d006      	beq.n	800d8e2 <__cxa_end_catch+0x22>
 800d8d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d8d8:	2100      	movs	r1, #0
 800d8da:	3020      	adds	r0, #32
 800d8dc:	6011      	str	r1, [r2, #0]
 800d8de:	f7f9 bda1 	b.w	8007424 <_Unwind_DeleteException>
 800d8e2:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 800d8e6:	294e      	cmp	r1, #78	; 0x4e
 800d8e8:	d1f4      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d8ea:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 800d8ee:	2955      	cmp	r1, #85	; 0x55
 800d8f0:	d1f0      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d8f2:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
 800d8f6:	2943      	cmp	r1, #67	; 0x43
 800d8f8:	d1ec      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d8fa:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 800d8fe:	2943      	cmp	r1, #67	; 0x43
 800d900:	d1e8      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d902:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 800d906:	292b      	cmp	r1, #43	; 0x2b
 800d908:	d1e4      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d90a:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 800d90e:	292b      	cmp	r1, #43	; 0x2b
 800d910:	d1e0      	bne.n	800d8d4 <__cxa_end_catch+0x14>
 800d912:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
 800d916:	2901      	cmp	r1, #1
 800d918:	d8dc      	bhi.n	800d8d4 <__cxa_end_catch+0x14>
 800d91a:	6941      	ldr	r1, [r0, #20]
 800d91c:	2900      	cmp	r1, #0
 800d91e:	db05      	blt.n	800d92c <__cxa_end_catch+0x6c>
 800d920:	3901      	subs	r1, #1
 800d922:	d008      	beq.n	800d936 <__cxa_end_catch+0x76>
 800d924:	1c4b      	adds	r3, r1, #1
 800d926:	d00d      	beq.n	800d944 <__cxa_end_catch+0x84>
 800d928:	6141      	str	r1, [r0, #20]
 800d92a:	bd08      	pop	{r3, pc}
 800d92c:	3101      	adds	r1, #1
 800d92e:	d1fb      	bne.n	800d928 <__cxa_end_catch+0x68>
 800d930:	6903      	ldr	r3, [r0, #16]
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	e7f8      	b.n	800d928 <__cxa_end_catch+0x68>
 800d936:	6901      	ldr	r1, [r0, #16]
 800d938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d93c:	3020      	adds	r0, #32
 800d93e:	6011      	str	r1, [r2, #0]
 800d940:	f7f9 bd70 	b.w	8007424 <_Unwind_DeleteException>
 800d944:	f7ff fb4a 	bl	800cfdc <_ZSt9terminatev>

0800d948 <__cxa_current_exception_type>:
 800d948:	b508      	push	{r3, lr}
 800d94a:	f7ff f80f 	bl	800c96c <__cxa_get_globals>
 800d94e:	6800      	ldr	r0, [r0, #0]
 800d950:	b130      	cbz	r0, 800d960 <__cxa_current_exception_type+0x18>
 800d952:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800d956:	2b01      	cmp	r3, #1
 800d958:	bf04      	itt	eq
 800d95a:	6800      	ldreq	r0, [r0, #0]
 800d95c:	3878      	subeq	r0, #120	; 0x78
 800d95e:	6800      	ldr	r0, [r0, #0]
 800d960:	bd08      	pop	{r3, pc}
 800d962:	bf00      	nop

0800d964 <abort>:
 800d964:	2006      	movs	r0, #6
 800d966:	b508      	push	{r3, lr}
 800d968:	f000 fd14 	bl	800e394 <raise>
 800d96c:	2001      	movs	r0, #1
 800d96e:	f001 fa63 	bl	800ee38 <_exit>
	...

0800d974 <__errno>:
 800d974:	4b01      	ldr	r3, [pc, #4]	; (800d97c <__errno+0x8>)
 800d976:	6818      	ldr	r0, [r3, #0]
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20000010 	.word	0x20000010

0800d980 <_fputc_r>:
 800d980:	b570      	push	{r4, r5, r6, lr}
 800d982:	460e      	mov	r6, r1
 800d984:	4614      	mov	r4, r2
 800d986:	4605      	mov	r5, r0
 800d988:	b118      	cbz	r0, 800d992 <_fputc_r+0x12>
 800d98a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d98c:	b90b      	cbnz	r3, 800d992 <_fputc_r+0x12>
 800d98e:	f000 ff07 	bl	800e7a0 <__sinit>
 800d992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d994:	07d8      	lsls	r0, r3, #31
 800d996:	d405      	bmi.n	800d9a4 <_fputc_r+0x24>
 800d998:	89a3      	ldrh	r3, [r4, #12]
 800d99a:	0599      	lsls	r1, r3, #22
 800d99c:	d402      	bmi.n	800d9a4 <_fputc_r+0x24>
 800d99e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9a0:	f000 f840 	bl	800da24 <__retarget_lock_acquire_recursive>
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	f000 fad5 	bl	800df58 <_putc_r>
 800d9ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	07da      	lsls	r2, r3, #31
 800d9b4:	d405      	bmi.n	800d9c2 <_fputc_r+0x42>
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	059b      	lsls	r3, r3, #22
 800d9ba:	d402      	bmi.n	800d9c2 <_fputc_r+0x42>
 800d9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9be:	f000 f832 	bl	800da26 <__retarget_lock_release_recursive>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9c8 <fputc>:
 800d9c8:	4b02      	ldr	r3, [pc, #8]	; (800d9d4 <fputc+0xc>)
 800d9ca:	460a      	mov	r2, r1
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	6818      	ldr	r0, [r3, #0]
 800d9d0:	f7ff bfd6 	b.w	800d980 <_fputc_r>
 800d9d4:	20000010 	.word	0x20000010

0800d9d8 <__libc_init_array>:
 800d9d8:	b570      	push	{r4, r5, r6, lr}
 800d9da:	2600      	movs	r6, #0
 800d9dc:	4d0c      	ldr	r5, [pc, #48]	; (800da10 <__libc_init_array+0x38>)
 800d9de:	4c0d      	ldr	r4, [pc, #52]	; (800da14 <__libc_init_array+0x3c>)
 800d9e0:	1b64      	subs	r4, r4, r5
 800d9e2:	10a4      	asrs	r4, r4, #2
 800d9e4:	42a6      	cmp	r6, r4
 800d9e6:	d109      	bne.n	800d9fc <__libc_init_array+0x24>
 800d9e8:	f001 fa28 	bl	800ee3c <_init>
 800d9ec:	2600      	movs	r6, #0
 800d9ee:	4d0a      	ldr	r5, [pc, #40]	; (800da18 <__libc_init_array+0x40>)
 800d9f0:	4c0a      	ldr	r4, [pc, #40]	; (800da1c <__libc_init_array+0x44>)
 800d9f2:	1b64      	subs	r4, r4, r5
 800d9f4:	10a4      	asrs	r4, r4, #2
 800d9f6:	42a6      	cmp	r6, r4
 800d9f8:	d105      	bne.n	800da06 <__libc_init_array+0x2e>
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}
 800d9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800da00:	4798      	blx	r3
 800da02:	3601      	adds	r6, #1
 800da04:	e7ee      	b.n	800d9e4 <__libc_init_array+0xc>
 800da06:	f855 3b04 	ldr.w	r3, [r5], #4
 800da0a:	4798      	blx	r3
 800da0c:	3601      	adds	r6, #1
 800da0e:	e7f2      	b.n	800d9f6 <__libc_init_array+0x1e>
 800da10:	08010528 	.word	0x08010528
 800da14:	08010528 	.word	0x08010528
 800da18:	08010528 	.word	0x08010528
 800da1c:	0801053c 	.word	0x0801053c

0800da20 <__retarget_lock_init_recursive>:
 800da20:	4770      	bx	lr

0800da22 <__retarget_lock_close_recursive>:
 800da22:	4770      	bx	lr

0800da24 <__retarget_lock_acquire_recursive>:
 800da24:	4770      	bx	lr

0800da26 <__retarget_lock_release_recursive>:
 800da26:	4770      	bx	lr

0800da28 <malloc>:
 800da28:	4b02      	ldr	r3, [pc, #8]	; (800da34 <malloc+0xc>)
 800da2a:	4601      	mov	r1, r0
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	f000 b80b 	b.w	800da48 <_malloc_r>
 800da32:	bf00      	nop
 800da34:	20000010 	.word	0x20000010

0800da38 <free>:
 800da38:	4b02      	ldr	r3, [pc, #8]	; (800da44 <free+0xc>)
 800da3a:	4601      	mov	r1, r0
 800da3c:	6818      	ldr	r0, [r3, #0]
 800da3e:	f000 bf3f 	b.w	800e8c0 <_free_r>
 800da42:	bf00      	nop
 800da44:	20000010 	.word	0x20000010

0800da48 <_malloc_r>:
 800da48:	f101 030b 	add.w	r3, r1, #11
 800da4c:	2b16      	cmp	r3, #22
 800da4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da52:	4605      	mov	r5, r0
 800da54:	d906      	bls.n	800da64 <_malloc_r+0x1c>
 800da56:	f033 0707 	bics.w	r7, r3, #7
 800da5a:	d504      	bpl.n	800da66 <_malloc_r+0x1e>
 800da5c:	230c      	movs	r3, #12
 800da5e:	602b      	str	r3, [r5, #0]
 800da60:	2400      	movs	r4, #0
 800da62:	e1a3      	b.n	800ddac <_malloc_r+0x364>
 800da64:	2710      	movs	r7, #16
 800da66:	42b9      	cmp	r1, r7
 800da68:	d8f8      	bhi.n	800da5c <_malloc_r+0x14>
 800da6a:	4628      	mov	r0, r5
 800da6c:	f000 fa68 	bl	800df40 <__malloc_lock>
 800da70:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800da74:	4eaf      	ldr	r6, [pc, #700]	; (800dd34 <_malloc_r+0x2ec>)
 800da76:	d237      	bcs.n	800dae8 <_malloc_r+0xa0>
 800da78:	f107 0208 	add.w	r2, r7, #8
 800da7c:	4432      	add	r2, r6
 800da7e:	6854      	ldr	r4, [r2, #4]
 800da80:	f1a2 0108 	sub.w	r1, r2, #8
 800da84:	428c      	cmp	r4, r1
 800da86:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800da8a:	d102      	bne.n	800da92 <_malloc_r+0x4a>
 800da8c:	68d4      	ldr	r4, [r2, #12]
 800da8e:	42a2      	cmp	r2, r4
 800da90:	d010      	beq.n	800dab4 <_malloc_r+0x6c>
 800da92:	6863      	ldr	r3, [r4, #4]
 800da94:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	60ca      	str	r2, [r1, #12]
 800da9e:	4423      	add	r3, r4
 800daa0:	6091      	str	r1, [r2, #8]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	f042 0201 	orr.w	r2, r2, #1
 800daa8:	605a      	str	r2, [r3, #4]
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 fa4e 	bl	800df4c <__malloc_unlock>
 800dab0:	3408      	adds	r4, #8
 800dab2:	e17b      	b.n	800ddac <_malloc_r+0x364>
 800dab4:	3302      	adds	r3, #2
 800dab6:	6934      	ldr	r4, [r6, #16]
 800dab8:	499f      	ldr	r1, [pc, #636]	; (800dd38 <_malloc_r+0x2f0>)
 800daba:	428c      	cmp	r4, r1
 800dabc:	d077      	beq.n	800dbae <_malloc_r+0x166>
 800dabe:	6862      	ldr	r2, [r4, #4]
 800dac0:	f022 0c03 	bic.w	ip, r2, #3
 800dac4:	ebac 0007 	sub.w	r0, ip, r7
 800dac8:	280f      	cmp	r0, #15
 800daca:	dd48      	ble.n	800db5e <_malloc_r+0x116>
 800dacc:	19e2      	adds	r2, r4, r7
 800dace:	f040 0301 	orr.w	r3, r0, #1
 800dad2:	f047 0701 	orr.w	r7, r7, #1
 800dad6:	6067      	str	r7, [r4, #4]
 800dad8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800dadc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800dae0:	6053      	str	r3, [r2, #4]
 800dae2:	f844 000c 	str.w	r0, [r4, ip]
 800dae6:	e7e0      	b.n	800daaa <_malloc_r+0x62>
 800dae8:	0a7b      	lsrs	r3, r7, #9
 800daea:	d02a      	beq.n	800db42 <_malloc_r+0xfa>
 800daec:	2b04      	cmp	r3, #4
 800daee:	d812      	bhi.n	800db16 <_malloc_r+0xce>
 800daf0:	09bb      	lsrs	r3, r7, #6
 800daf2:	3338      	adds	r3, #56	; 0x38
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800dafa:	6854      	ldr	r4, [r2, #4]
 800dafc:	f1a2 0c08 	sub.w	ip, r2, #8
 800db00:	4564      	cmp	r4, ip
 800db02:	d006      	beq.n	800db12 <_malloc_r+0xca>
 800db04:	6862      	ldr	r2, [r4, #4]
 800db06:	f022 0203 	bic.w	r2, r2, #3
 800db0a:	1bd0      	subs	r0, r2, r7
 800db0c:	280f      	cmp	r0, #15
 800db0e:	dd1c      	ble.n	800db4a <_malloc_r+0x102>
 800db10:	3b01      	subs	r3, #1
 800db12:	3301      	adds	r3, #1
 800db14:	e7cf      	b.n	800dab6 <_malloc_r+0x6e>
 800db16:	2b14      	cmp	r3, #20
 800db18:	d801      	bhi.n	800db1e <_malloc_r+0xd6>
 800db1a:	335b      	adds	r3, #91	; 0x5b
 800db1c:	e7ea      	b.n	800daf4 <_malloc_r+0xac>
 800db1e:	2b54      	cmp	r3, #84	; 0x54
 800db20:	d802      	bhi.n	800db28 <_malloc_r+0xe0>
 800db22:	0b3b      	lsrs	r3, r7, #12
 800db24:	336e      	adds	r3, #110	; 0x6e
 800db26:	e7e5      	b.n	800daf4 <_malloc_r+0xac>
 800db28:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800db2c:	d802      	bhi.n	800db34 <_malloc_r+0xec>
 800db2e:	0bfb      	lsrs	r3, r7, #15
 800db30:	3377      	adds	r3, #119	; 0x77
 800db32:	e7df      	b.n	800daf4 <_malloc_r+0xac>
 800db34:	f240 5254 	movw	r2, #1364	; 0x554
 800db38:	4293      	cmp	r3, r2
 800db3a:	d804      	bhi.n	800db46 <_malloc_r+0xfe>
 800db3c:	0cbb      	lsrs	r3, r7, #18
 800db3e:	337c      	adds	r3, #124	; 0x7c
 800db40:	e7d8      	b.n	800daf4 <_malloc_r+0xac>
 800db42:	233f      	movs	r3, #63	; 0x3f
 800db44:	e7d6      	b.n	800daf4 <_malloc_r+0xac>
 800db46:	237e      	movs	r3, #126	; 0x7e
 800db48:	e7d4      	b.n	800daf4 <_malloc_r+0xac>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	68e1      	ldr	r1, [r4, #12]
 800db4e:	db04      	blt.n	800db5a <_malloc_r+0x112>
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	60d9      	str	r1, [r3, #12]
 800db54:	608b      	str	r3, [r1, #8]
 800db56:	18a3      	adds	r3, r4, r2
 800db58:	e7a3      	b.n	800daa2 <_malloc_r+0x5a>
 800db5a:	460c      	mov	r4, r1
 800db5c:	e7d0      	b.n	800db00 <_malloc_r+0xb8>
 800db5e:	2800      	cmp	r0, #0
 800db60:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800db64:	db07      	blt.n	800db76 <_malloc_r+0x12e>
 800db66:	44a4      	add	ip, r4
 800db68:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800db6c:	f043 0301 	orr.w	r3, r3, #1
 800db70:	f8cc 3004 	str.w	r3, [ip, #4]
 800db74:	e799      	b.n	800daaa <_malloc_r+0x62>
 800db76:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800db7a:	6870      	ldr	r0, [r6, #4]
 800db7c:	f080 8094 	bcs.w	800dca8 <_malloc_r+0x260>
 800db80:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800db84:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800db88:	f04f 0c01 	mov.w	ip, #1
 800db8c:	fa0c fc0e 	lsl.w	ip, ip, lr
 800db90:	ea4c 0000 	orr.w	r0, ip, r0
 800db94:	3201      	adds	r2, #1
 800db96:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800db9a:	6070      	str	r0, [r6, #4]
 800db9c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800dba0:	3808      	subs	r0, #8
 800dba2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800dba6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800dbaa:	f8cc 400c 	str.w	r4, [ip, #12]
 800dbae:	2001      	movs	r0, #1
 800dbb0:	109a      	asrs	r2, r3, #2
 800dbb2:	fa00 f202 	lsl.w	r2, r0, r2
 800dbb6:	6870      	ldr	r0, [r6, #4]
 800dbb8:	4290      	cmp	r0, r2
 800dbba:	d326      	bcc.n	800dc0a <_malloc_r+0x1c2>
 800dbbc:	4210      	tst	r0, r2
 800dbbe:	d106      	bne.n	800dbce <_malloc_r+0x186>
 800dbc0:	f023 0303 	bic.w	r3, r3, #3
 800dbc4:	0052      	lsls	r2, r2, #1
 800dbc6:	4210      	tst	r0, r2
 800dbc8:	f103 0304 	add.w	r3, r3, #4
 800dbcc:	d0fa      	beq.n	800dbc4 <_malloc_r+0x17c>
 800dbce:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800dbd2:	46c1      	mov	r9, r8
 800dbd4:	469e      	mov	lr, r3
 800dbd6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800dbda:	454c      	cmp	r4, r9
 800dbdc:	f040 80b8 	bne.w	800dd50 <_malloc_r+0x308>
 800dbe0:	f10e 0e01 	add.w	lr, lr, #1
 800dbe4:	f01e 0f03 	tst.w	lr, #3
 800dbe8:	f109 0908 	add.w	r9, r9, #8
 800dbec:	d1f3      	bne.n	800dbd6 <_malloc_r+0x18e>
 800dbee:	0798      	lsls	r0, r3, #30
 800dbf0:	f040 80e2 	bne.w	800ddb8 <_malloc_r+0x370>
 800dbf4:	6873      	ldr	r3, [r6, #4]
 800dbf6:	ea23 0302 	bic.w	r3, r3, r2
 800dbfa:	6073      	str	r3, [r6, #4]
 800dbfc:	6870      	ldr	r0, [r6, #4]
 800dbfe:	0052      	lsls	r2, r2, #1
 800dc00:	4290      	cmp	r0, r2
 800dc02:	d302      	bcc.n	800dc0a <_malloc_r+0x1c2>
 800dc04:	2a00      	cmp	r2, #0
 800dc06:	f040 80e3 	bne.w	800ddd0 <_malloc_r+0x388>
 800dc0a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800dc0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dc12:	f023 0903 	bic.w	r9, r3, #3
 800dc16:	45b9      	cmp	r9, r7
 800dc18:	d304      	bcc.n	800dc24 <_malloc_r+0x1dc>
 800dc1a:	eba9 0207 	sub.w	r2, r9, r7
 800dc1e:	2a0f      	cmp	r2, #15
 800dc20:	f300 8141 	bgt.w	800dea6 <_malloc_r+0x45e>
 800dc24:	4b45      	ldr	r3, [pc, #276]	; (800dd3c <_malloc_r+0x2f4>)
 800dc26:	2008      	movs	r0, #8
 800dc28:	6819      	ldr	r1, [r3, #0]
 800dc2a:	eb0a 0b09 	add.w	fp, sl, r9
 800dc2e:	3110      	adds	r1, #16
 800dc30:	4439      	add	r1, r7
 800dc32:	9101      	str	r1, [sp, #4]
 800dc34:	f000 fbde 	bl	800e3f4 <sysconf>
 800dc38:	4a41      	ldr	r2, [pc, #260]	; (800dd40 <_malloc_r+0x2f8>)
 800dc3a:	9901      	ldr	r1, [sp, #4]
 800dc3c:	6813      	ldr	r3, [r2, #0]
 800dc3e:	4680      	mov	r8, r0
 800dc40:	3301      	adds	r3, #1
 800dc42:	bf1f      	itttt	ne
 800dc44:	f101 31ff 	addne.w	r1, r1, #4294967295
 800dc48:	1809      	addne	r1, r1, r0
 800dc4a:	4243      	negne	r3, r0
 800dc4c:	4019      	andne	r1, r3
 800dc4e:	4628      	mov	r0, r5
 800dc50:	9101      	str	r1, [sp, #4]
 800dc52:	f000 fb65 	bl	800e320 <_sbrk_r>
 800dc56:	1c42      	adds	r2, r0, #1
 800dc58:	4604      	mov	r4, r0
 800dc5a:	f000 80f7 	beq.w	800de4c <_malloc_r+0x404>
 800dc5e:	4583      	cmp	fp, r0
 800dc60:	9901      	ldr	r1, [sp, #4]
 800dc62:	4a37      	ldr	r2, [pc, #220]	; (800dd40 <_malloc_r+0x2f8>)
 800dc64:	d902      	bls.n	800dc6c <_malloc_r+0x224>
 800dc66:	45b2      	cmp	sl, r6
 800dc68:	f040 80f0 	bne.w	800de4c <_malloc_r+0x404>
 800dc6c:	4b35      	ldr	r3, [pc, #212]	; (800dd44 <_malloc_r+0x2fc>)
 800dc6e:	45a3      	cmp	fp, r4
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	f108 3cff 	add.w	ip, r8, #4294967295
 800dc76:	4408      	add	r0, r1
 800dc78:	6018      	str	r0, [r3, #0]
 800dc7a:	f040 80ab 	bne.w	800ddd4 <_malloc_r+0x38c>
 800dc7e:	ea1b 0f0c 	tst.w	fp, ip
 800dc82:	f040 80a7 	bne.w	800ddd4 <_malloc_r+0x38c>
 800dc86:	68b2      	ldr	r2, [r6, #8]
 800dc88:	4449      	add	r1, r9
 800dc8a:	f041 0101 	orr.w	r1, r1, #1
 800dc8e:	6051      	str	r1, [r2, #4]
 800dc90:	4a2d      	ldr	r2, [pc, #180]	; (800dd48 <_malloc_r+0x300>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6811      	ldr	r1, [r2, #0]
 800dc96:	428b      	cmp	r3, r1
 800dc98:	bf88      	it	hi
 800dc9a:	6013      	strhi	r3, [r2, #0]
 800dc9c:	4a2b      	ldr	r2, [pc, #172]	; (800dd4c <_malloc_r+0x304>)
 800dc9e:	6811      	ldr	r1, [r2, #0]
 800dca0:	428b      	cmp	r3, r1
 800dca2:	bf88      	it	hi
 800dca4:	6013      	strhi	r3, [r2, #0]
 800dca6:	e0d1      	b.n	800de4c <_malloc_r+0x404>
 800dca8:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800dcac:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800dcb0:	d218      	bcs.n	800dce4 <_malloc_r+0x29c>
 800dcb2:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800dcb6:	3238      	adds	r2, #56	; 0x38
 800dcb8:	f102 0e01 	add.w	lr, r2, #1
 800dcbc:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800dcc0:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800dcc4:	45f0      	cmp	r8, lr
 800dcc6:	d12b      	bne.n	800dd20 <_malloc_r+0x2d8>
 800dcc8:	f04f 0c01 	mov.w	ip, #1
 800dccc:	1092      	asrs	r2, r2, #2
 800dcce:	fa0c f202 	lsl.w	r2, ip, r2
 800dcd2:	4310      	orrs	r0, r2
 800dcd4:	6070      	str	r0, [r6, #4]
 800dcd6:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800dcda:	f8c8 4008 	str.w	r4, [r8, #8]
 800dcde:	f8ce 400c 	str.w	r4, [lr, #12]
 800dce2:	e764      	b.n	800dbae <_malloc_r+0x166>
 800dce4:	2a14      	cmp	r2, #20
 800dce6:	d801      	bhi.n	800dcec <_malloc_r+0x2a4>
 800dce8:	325b      	adds	r2, #91	; 0x5b
 800dcea:	e7e5      	b.n	800dcb8 <_malloc_r+0x270>
 800dcec:	2a54      	cmp	r2, #84	; 0x54
 800dcee:	d803      	bhi.n	800dcf8 <_malloc_r+0x2b0>
 800dcf0:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800dcf4:	326e      	adds	r2, #110	; 0x6e
 800dcf6:	e7df      	b.n	800dcb8 <_malloc_r+0x270>
 800dcf8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dcfc:	d803      	bhi.n	800dd06 <_malloc_r+0x2be>
 800dcfe:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800dd02:	3277      	adds	r2, #119	; 0x77
 800dd04:	e7d8      	b.n	800dcb8 <_malloc_r+0x270>
 800dd06:	f240 5e54 	movw	lr, #1364	; 0x554
 800dd0a:	4572      	cmp	r2, lr
 800dd0c:	bf96      	itet	ls
 800dd0e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800dd12:	227e      	movhi	r2, #126	; 0x7e
 800dd14:	327c      	addls	r2, #124	; 0x7c
 800dd16:	e7cf      	b.n	800dcb8 <_malloc_r+0x270>
 800dd18:	f8de e008 	ldr.w	lr, [lr, #8]
 800dd1c:	45f0      	cmp	r8, lr
 800dd1e:	d005      	beq.n	800dd2c <_malloc_r+0x2e4>
 800dd20:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dd24:	f022 0203 	bic.w	r2, r2, #3
 800dd28:	4562      	cmp	r2, ip
 800dd2a:	d8f5      	bhi.n	800dd18 <_malloc_r+0x2d0>
 800dd2c:	f8de 800c 	ldr.w	r8, [lr, #12]
 800dd30:	e7d1      	b.n	800dcd6 <_malloc_r+0x28e>
 800dd32:	bf00      	nop
 800dd34:	20000440 	.word	0x20000440
 800dd38:	20000448 	.word	0x20000448
 800dd3c:	20000ad0 	.word	0x20000ad0
 800dd40:	20000848 	.word	0x20000848
 800dd44:	20000aa0 	.word	0x20000aa0
 800dd48:	20000ac8 	.word	0x20000ac8
 800dd4c:	20000acc 	.word	0x20000acc
 800dd50:	6860      	ldr	r0, [r4, #4]
 800dd52:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800dd56:	f020 0003 	bic.w	r0, r0, #3
 800dd5a:	eba0 0a07 	sub.w	sl, r0, r7
 800dd5e:	f1ba 0f0f 	cmp.w	sl, #15
 800dd62:	dd12      	ble.n	800dd8a <_malloc_r+0x342>
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	19e2      	adds	r2, r4, r7
 800dd68:	f047 0701 	orr.w	r7, r7, #1
 800dd6c:	6067      	str	r7, [r4, #4]
 800dd6e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dd72:	f8cc 3008 	str.w	r3, [ip, #8]
 800dd76:	f04a 0301 	orr.w	r3, sl, #1
 800dd7a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800dd7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800dd82:	6053      	str	r3, [r2, #4]
 800dd84:	f844 a000 	str.w	sl, [r4, r0]
 800dd88:	e68f      	b.n	800daaa <_malloc_r+0x62>
 800dd8a:	f1ba 0f00 	cmp.w	sl, #0
 800dd8e:	db11      	blt.n	800ddb4 <_malloc_r+0x36c>
 800dd90:	4420      	add	r0, r4
 800dd92:	6843      	ldr	r3, [r0, #4]
 800dd94:	f043 0301 	orr.w	r3, r3, #1
 800dd98:	6043      	str	r3, [r0, #4]
 800dd9a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dda4:	f8cc 3008 	str.w	r3, [ip, #8]
 800dda8:	f000 f8d0 	bl	800df4c <__malloc_unlock>
 800ddac:	4620      	mov	r0, r4
 800ddae:	b003      	add	sp, #12
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	4664      	mov	r4, ip
 800ddb6:	e710      	b.n	800dbda <_malloc_r+0x192>
 800ddb8:	f858 0908 	ldr.w	r0, [r8], #-8
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4540      	cmp	r0, r8
 800ddc0:	f43f af15 	beq.w	800dbee <_malloc_r+0x1a6>
 800ddc4:	e71a      	b.n	800dbfc <_malloc_r+0x1b4>
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	0052      	lsls	r2, r2, #1
 800ddca:	4210      	tst	r0, r2
 800ddcc:	d0fb      	beq.n	800ddc6 <_malloc_r+0x37e>
 800ddce:	e6fe      	b.n	800dbce <_malloc_r+0x186>
 800ddd0:	4673      	mov	r3, lr
 800ddd2:	e7fa      	b.n	800ddca <_malloc_r+0x382>
 800ddd4:	f8d2 e000 	ldr.w	lr, [r2]
 800ddd8:	f1be 3fff 	cmp.w	lr, #4294967295
 800dddc:	bf1b      	ittet	ne
 800ddde:	eba4 0b0b 	subne.w	fp, r4, fp
 800dde2:	eb0b 0200 	addne.w	r2, fp, r0
 800dde6:	6014      	streq	r4, [r2, #0]
 800dde8:	601a      	strne	r2, [r3, #0]
 800ddea:	f014 0b07 	ands.w	fp, r4, #7
 800ddee:	bf0e      	itee	eq
 800ddf0:	4658      	moveq	r0, fp
 800ddf2:	f1cb 0008 	rsbne	r0, fp, #8
 800ddf6:	1824      	addne	r4, r4, r0
 800ddf8:	1862      	adds	r2, r4, r1
 800ddfa:	ea02 010c 	and.w	r1, r2, ip
 800ddfe:	4480      	add	r8, r0
 800de00:	eba8 0801 	sub.w	r8, r8, r1
 800de04:	ea08 080c 	and.w	r8, r8, ip
 800de08:	4641      	mov	r1, r8
 800de0a:	4628      	mov	r0, r5
 800de0c:	9201      	str	r2, [sp, #4]
 800de0e:	f000 fa87 	bl	800e320 <_sbrk_r>
 800de12:	1c43      	adds	r3, r0, #1
 800de14:	9a01      	ldr	r2, [sp, #4]
 800de16:	4b29      	ldr	r3, [pc, #164]	; (800debc <_malloc_r+0x474>)
 800de18:	d107      	bne.n	800de2a <_malloc_r+0x3e2>
 800de1a:	f1bb 0f00 	cmp.w	fp, #0
 800de1e:	d023      	beq.n	800de68 <_malloc_r+0x420>
 800de20:	f04f 0800 	mov.w	r8, #0
 800de24:	f1ab 0008 	sub.w	r0, fp, #8
 800de28:	4410      	add	r0, r2
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	1b00      	subs	r0, r0, r4
 800de2e:	4440      	add	r0, r8
 800de30:	4442      	add	r2, r8
 800de32:	f040 0001 	orr.w	r0, r0, #1
 800de36:	45b2      	cmp	sl, r6
 800de38:	60b4      	str	r4, [r6, #8]
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	6060      	str	r0, [r4, #4]
 800de3e:	f43f af27 	beq.w	800dc90 <_malloc_r+0x248>
 800de42:	f1b9 0f0f 	cmp.w	r9, #15
 800de46:	d812      	bhi.n	800de6e <_malloc_r+0x426>
 800de48:	2301      	movs	r3, #1
 800de4a:	6063      	str	r3, [r4, #4]
 800de4c:	68b3      	ldr	r3, [r6, #8]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	42bb      	cmp	r3, r7
 800de56:	eba3 0207 	sub.w	r2, r3, r7
 800de5a:	d301      	bcc.n	800de60 <_malloc_r+0x418>
 800de5c:	2a0f      	cmp	r2, #15
 800de5e:	dc22      	bgt.n	800dea6 <_malloc_r+0x45e>
 800de60:	4628      	mov	r0, r5
 800de62:	f000 f873 	bl	800df4c <__malloc_unlock>
 800de66:	e5fb      	b.n	800da60 <_malloc_r+0x18>
 800de68:	4610      	mov	r0, r2
 800de6a:	46d8      	mov	r8, fp
 800de6c:	e7dd      	b.n	800de2a <_malloc_r+0x3e2>
 800de6e:	2105      	movs	r1, #5
 800de70:	f8da 2004 	ldr.w	r2, [sl, #4]
 800de74:	f1a9 090c 	sub.w	r9, r9, #12
 800de78:	f029 0907 	bic.w	r9, r9, #7
 800de7c:	f002 0201 	and.w	r2, r2, #1
 800de80:	ea42 0209 	orr.w	r2, r2, r9
 800de84:	f8ca 2004 	str.w	r2, [sl, #4]
 800de88:	f1b9 0f0f 	cmp.w	r9, #15
 800de8c:	eb0a 0209 	add.w	r2, sl, r9
 800de90:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800de94:	f67f aefc 	bls.w	800dc90 <_malloc_r+0x248>
 800de98:	4628      	mov	r0, r5
 800de9a:	f10a 0108 	add.w	r1, sl, #8
 800de9e:	f000 fd0f 	bl	800e8c0 <_free_r>
 800dea2:	4b06      	ldr	r3, [pc, #24]	; (800debc <_malloc_r+0x474>)
 800dea4:	e6f4      	b.n	800dc90 <_malloc_r+0x248>
 800dea6:	68b4      	ldr	r4, [r6, #8]
 800dea8:	f047 0301 	orr.w	r3, r7, #1
 800deac:	f042 0201 	orr.w	r2, r2, #1
 800deb0:	4427      	add	r7, r4
 800deb2:	6063      	str	r3, [r4, #4]
 800deb4:	60b7      	str	r7, [r6, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	e5f7      	b.n	800daaa <_malloc_r+0x62>
 800deba:	bf00      	nop
 800debc:	20000aa0 	.word	0x20000aa0

0800dec0 <memcmp>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	3901      	subs	r1, #1
 800dec4:	4402      	add	r2, r0
 800dec6:	4290      	cmp	r0, r2
 800dec8:	d101      	bne.n	800dece <memcmp+0xe>
 800deca:	2000      	movs	r0, #0
 800decc:	e005      	b.n	800deda <memcmp+0x1a>
 800dece:	7803      	ldrb	r3, [r0, #0]
 800ded0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	d001      	beq.n	800dedc <memcmp+0x1c>
 800ded8:	1b18      	subs	r0, r3, r4
 800deda:	bd10      	pop	{r4, pc}
 800dedc:	3001      	adds	r0, #1
 800dede:	e7f2      	b.n	800dec6 <memcmp+0x6>

0800dee0 <memcpy>:
 800dee0:	440a      	add	r2, r1
 800dee2:	4291      	cmp	r1, r2
 800dee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee8:	d100      	bne.n	800deec <memcpy+0xc>
 800deea:	4770      	bx	lr
 800deec:	b510      	push	{r4, lr}
 800deee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def2:	4291      	cmp	r1, r2
 800def4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def8:	d1f9      	bne.n	800deee <memcpy+0xe>
 800defa:	bd10      	pop	{r4, pc}

0800defc <memmove>:
 800defc:	4288      	cmp	r0, r1
 800defe:	b510      	push	{r4, lr}
 800df00:	eb01 0402 	add.w	r4, r1, r2
 800df04:	d902      	bls.n	800df0c <memmove+0x10>
 800df06:	4284      	cmp	r4, r0
 800df08:	4623      	mov	r3, r4
 800df0a:	d807      	bhi.n	800df1c <memmove+0x20>
 800df0c:	1e43      	subs	r3, r0, #1
 800df0e:	42a1      	cmp	r1, r4
 800df10:	d008      	beq.n	800df24 <memmove+0x28>
 800df12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df1a:	e7f8      	b.n	800df0e <memmove+0x12>
 800df1c:	4601      	mov	r1, r0
 800df1e:	4402      	add	r2, r0
 800df20:	428a      	cmp	r2, r1
 800df22:	d100      	bne.n	800df26 <memmove+0x2a>
 800df24:	bd10      	pop	{r4, pc}
 800df26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df2e:	e7f7      	b.n	800df20 <memmove+0x24>

0800df30 <memset>:
 800df30:	4603      	mov	r3, r0
 800df32:	4402      	add	r2, r0
 800df34:	4293      	cmp	r3, r2
 800df36:	d100      	bne.n	800df3a <memset+0xa>
 800df38:	4770      	bx	lr
 800df3a:	f803 1b01 	strb.w	r1, [r3], #1
 800df3e:	e7f9      	b.n	800df34 <memset+0x4>

0800df40 <__malloc_lock>:
 800df40:	4801      	ldr	r0, [pc, #4]	; (800df48 <__malloc_lock+0x8>)
 800df42:	f7ff bd6f 	b.w	800da24 <__retarget_lock_acquire_recursive>
 800df46:	bf00      	nop
 800df48:	20000a9d 	.word	0x20000a9d

0800df4c <__malloc_unlock>:
 800df4c:	4801      	ldr	r0, [pc, #4]	; (800df54 <__malloc_unlock+0x8>)
 800df4e:	f7ff bd6a 	b.w	800da26 <__retarget_lock_release_recursive>
 800df52:	bf00      	nop
 800df54:	20000a9d 	.word	0x20000a9d

0800df58 <_putc_r>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	460d      	mov	r5, r1
 800df5c:	4614      	mov	r4, r2
 800df5e:	4606      	mov	r6, r0
 800df60:	b118      	cbz	r0, 800df6a <_putc_r+0x12>
 800df62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800df64:	b90b      	cbnz	r3, 800df6a <_putc_r+0x12>
 800df66:	f000 fc1b 	bl	800e7a0 <__sinit>
 800df6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df6c:	07d8      	lsls	r0, r3, #31
 800df6e:	d405      	bmi.n	800df7c <_putc_r+0x24>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	0599      	lsls	r1, r3, #22
 800df74:	d402      	bmi.n	800df7c <_putc_r+0x24>
 800df76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df78:	f7ff fd54 	bl	800da24 <__retarget_lock_acquire_recursive>
 800df7c:	68a3      	ldr	r3, [r4, #8]
 800df7e:	3b01      	subs	r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	da05      	bge.n	800df92 <_putc_r+0x3a>
 800df86:	69a2      	ldr	r2, [r4, #24]
 800df88:	4293      	cmp	r3, r2
 800df8a:	db12      	blt.n	800dfb2 <_putc_r+0x5a>
 800df8c:	b2eb      	uxtb	r3, r5
 800df8e:	2b0a      	cmp	r3, #10
 800df90:	d00f      	beq.n	800dfb2 <_putc_r+0x5a>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	6022      	str	r2, [r4, #0]
 800df98:	701d      	strb	r5, [r3, #0]
 800df9a:	b2ed      	uxtb	r5, r5
 800df9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df9e:	07da      	lsls	r2, r3, #31
 800dfa0:	d405      	bmi.n	800dfae <_putc_r+0x56>
 800dfa2:	89a3      	ldrh	r3, [r4, #12]
 800dfa4:	059b      	lsls	r3, r3, #22
 800dfa6:	d402      	bmi.n	800dfae <_putc_r+0x56>
 800dfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfaa:	f7ff fd3c 	bl	800da26 <__retarget_lock_release_recursive>
 800dfae:	4628      	mov	r0, r5
 800dfb0:	bd70      	pop	{r4, r5, r6, pc}
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f000 fa29 	bl	800e40e <__swbuf_r>
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	e7ed      	b.n	800df9c <_putc_r+0x44>

0800dfc0 <realloc>:
 800dfc0:	4b02      	ldr	r3, [pc, #8]	; (800dfcc <realloc+0xc>)
 800dfc2:	460a      	mov	r2, r1
 800dfc4:	4601      	mov	r1, r0
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	f000 b802 	b.w	800dfd0 <_realloc_r>
 800dfcc:	20000010 	.word	0x20000010

0800dfd0 <_realloc_r>:
 800dfd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	460c      	mov	r4, r1
 800dfd6:	4681      	mov	r9, r0
 800dfd8:	4611      	mov	r1, r2
 800dfda:	b924      	cbnz	r4, 800dfe6 <_realloc_r+0x16>
 800dfdc:	b003      	add	sp, #12
 800dfde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe2:	f7ff bd31 	b.w	800da48 <_malloc_r>
 800dfe6:	9201      	str	r2, [sp, #4]
 800dfe8:	f7ff ffaa 	bl	800df40 <__malloc_lock>
 800dfec:	9901      	ldr	r1, [sp, #4]
 800dfee:	f101 080b 	add.w	r8, r1, #11
 800dff2:	f1b8 0f16 	cmp.w	r8, #22
 800dff6:	d90b      	bls.n	800e010 <_realloc_r+0x40>
 800dff8:	f038 0807 	bics.w	r8, r8, #7
 800dffc:	d50a      	bpl.n	800e014 <_realloc_r+0x44>
 800dffe:	230c      	movs	r3, #12
 800e000:	f04f 0b00 	mov.w	fp, #0
 800e004:	f8c9 3000 	str.w	r3, [r9]
 800e008:	4658      	mov	r0, fp
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e010:	f04f 0810 	mov.w	r8, #16
 800e014:	4588      	cmp	r8, r1
 800e016:	d3f2      	bcc.n	800dffe <_realloc_r+0x2e>
 800e018:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800e01c:	f1a4 0a08 	sub.w	sl, r4, #8
 800e020:	f025 0603 	bic.w	r6, r5, #3
 800e024:	45b0      	cmp	r8, r6
 800e026:	f340 8171 	ble.w	800e30c <_realloc_r+0x33c>
 800e02a:	4a9c      	ldr	r2, [pc, #624]	; (800e29c <_realloc_r+0x2cc>)
 800e02c:	eb0a 0306 	add.w	r3, sl, r6
 800e030:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	459c      	cmp	ip, r3
 800e038:	d005      	beq.n	800e046 <_realloc_r+0x76>
 800e03a:	f022 0001 	bic.w	r0, r2, #1
 800e03e:	4418      	add	r0, r3
 800e040:	6840      	ldr	r0, [r0, #4]
 800e042:	07c7      	lsls	r7, r0, #31
 800e044:	d427      	bmi.n	800e096 <_realloc_r+0xc6>
 800e046:	f022 0203 	bic.w	r2, r2, #3
 800e04a:	459c      	cmp	ip, r3
 800e04c:	eb06 0702 	add.w	r7, r6, r2
 800e050:	d119      	bne.n	800e086 <_realloc_r+0xb6>
 800e052:	f108 0010 	add.w	r0, r8, #16
 800e056:	42b8      	cmp	r0, r7
 800e058:	dc1f      	bgt.n	800e09a <_realloc_r+0xca>
 800e05a:	4a90      	ldr	r2, [pc, #576]	; (800e29c <_realloc_r+0x2cc>)
 800e05c:	eba7 0708 	sub.w	r7, r7, r8
 800e060:	eb0a 0308 	add.w	r3, sl, r8
 800e064:	f047 0701 	orr.w	r7, r7, #1
 800e068:	6093      	str	r3, [r2, #8]
 800e06a:	605f      	str	r7, [r3, #4]
 800e06c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e070:	4648      	mov	r0, r9
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	ea43 0308 	orr.w	r3, r3, r8
 800e07a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e07e:	f7ff ff65 	bl	800df4c <__malloc_unlock>
 800e082:	46a3      	mov	fp, r4
 800e084:	e7c0      	b.n	800e008 <_realloc_r+0x38>
 800e086:	45b8      	cmp	r8, r7
 800e088:	dc07      	bgt.n	800e09a <_realloc_r+0xca>
 800e08a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800e08e:	60da      	str	r2, [r3, #12]
 800e090:	6093      	str	r3, [r2, #8]
 800e092:	4655      	mov	r5, sl
 800e094:	e080      	b.n	800e198 <_realloc_r+0x1c8>
 800e096:	2200      	movs	r2, #0
 800e098:	4613      	mov	r3, r2
 800e09a:	07e8      	lsls	r0, r5, #31
 800e09c:	f100 80e8 	bmi.w	800e270 <_realloc_r+0x2a0>
 800e0a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800e0a4:	ebaa 0505 	sub.w	r5, sl, r5
 800e0a8:	6868      	ldr	r0, [r5, #4]
 800e0aa:	f020 0003 	bic.w	r0, r0, #3
 800e0ae:	eb00 0b06 	add.w	fp, r0, r6
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 80a7 	beq.w	800e206 <_realloc_r+0x236>
 800e0b8:	459c      	cmp	ip, r3
 800e0ba:	eb02 070b 	add.w	r7, r2, fp
 800e0be:	d14b      	bne.n	800e158 <_realloc_r+0x188>
 800e0c0:	f108 0310 	add.w	r3, r8, #16
 800e0c4:	42bb      	cmp	r3, r7
 800e0c6:	f300 809e 	bgt.w	800e206 <_realloc_r+0x236>
 800e0ca:	46ab      	mov	fp, r5
 800e0cc:	68eb      	ldr	r3, [r5, #12]
 800e0ce:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800e0d2:	60d3      	str	r3, [r2, #12]
 800e0d4:	609a      	str	r2, [r3, #8]
 800e0d6:	1f32      	subs	r2, r6, #4
 800e0d8:	2a24      	cmp	r2, #36	; 0x24
 800e0da:	d838      	bhi.n	800e14e <_realloc_r+0x17e>
 800e0dc:	2a13      	cmp	r2, #19
 800e0de:	d934      	bls.n	800e14a <_realloc_r+0x17a>
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	2a1b      	cmp	r2, #27
 800e0e4:	60ab      	str	r3, [r5, #8]
 800e0e6:	6863      	ldr	r3, [r4, #4]
 800e0e8:	60eb      	str	r3, [r5, #12]
 800e0ea:	d81b      	bhi.n	800e124 <_realloc_r+0x154>
 800e0ec:	3408      	adds	r4, #8
 800e0ee:	f105 0310 	add.w	r3, r5, #16
 800e0f2:	6822      	ldr	r2, [r4, #0]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	6862      	ldr	r2, [r4, #4]
 800e0f8:	605a      	str	r2, [r3, #4]
 800e0fa:	68a2      	ldr	r2, [r4, #8]
 800e0fc:	609a      	str	r2, [r3, #8]
 800e0fe:	4a67      	ldr	r2, [pc, #412]	; (800e29c <_realloc_r+0x2cc>)
 800e100:	eba7 0708 	sub.w	r7, r7, r8
 800e104:	eb05 0308 	add.w	r3, r5, r8
 800e108:	f047 0701 	orr.w	r7, r7, #1
 800e10c:	6093      	str	r3, [r2, #8]
 800e10e:	605f      	str	r7, [r3, #4]
 800e110:	686b      	ldr	r3, [r5, #4]
 800e112:	f003 0301 	and.w	r3, r3, #1
 800e116:	ea43 0308 	orr.w	r3, r3, r8
 800e11a:	606b      	str	r3, [r5, #4]
 800e11c:	4648      	mov	r0, r9
 800e11e:	f7ff ff15 	bl	800df4c <__malloc_unlock>
 800e122:	e771      	b.n	800e008 <_realloc_r+0x38>
 800e124:	68a3      	ldr	r3, [r4, #8]
 800e126:	2a24      	cmp	r2, #36	; 0x24
 800e128:	612b      	str	r3, [r5, #16]
 800e12a:	68e3      	ldr	r3, [r4, #12]
 800e12c:	bf18      	it	ne
 800e12e:	3410      	addne	r4, #16
 800e130:	616b      	str	r3, [r5, #20]
 800e132:	bf09      	itett	eq
 800e134:	6923      	ldreq	r3, [r4, #16]
 800e136:	f105 0318 	addne.w	r3, r5, #24
 800e13a:	61ab      	streq	r3, [r5, #24]
 800e13c:	6962      	ldreq	r2, [r4, #20]
 800e13e:	bf02      	ittt	eq
 800e140:	f105 0320 	addeq.w	r3, r5, #32
 800e144:	61ea      	streq	r2, [r5, #28]
 800e146:	3418      	addeq	r4, #24
 800e148:	e7d3      	b.n	800e0f2 <_realloc_r+0x122>
 800e14a:	465b      	mov	r3, fp
 800e14c:	e7d1      	b.n	800e0f2 <_realloc_r+0x122>
 800e14e:	4621      	mov	r1, r4
 800e150:	4658      	mov	r0, fp
 800e152:	f7ff fed3 	bl	800defc <memmove>
 800e156:	e7d2      	b.n	800e0fe <_realloc_r+0x12e>
 800e158:	45b8      	cmp	r8, r7
 800e15a:	dc54      	bgt.n	800e206 <_realloc_r+0x236>
 800e15c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800e160:	4628      	mov	r0, r5
 800e162:	60da      	str	r2, [r3, #12]
 800e164:	6093      	str	r3, [r2, #8]
 800e166:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e16a:	68eb      	ldr	r3, [r5, #12]
 800e16c:	60d3      	str	r3, [r2, #12]
 800e16e:	609a      	str	r2, [r3, #8]
 800e170:	1f32      	subs	r2, r6, #4
 800e172:	2a24      	cmp	r2, #36	; 0x24
 800e174:	d843      	bhi.n	800e1fe <_realloc_r+0x22e>
 800e176:	2a13      	cmp	r2, #19
 800e178:	d908      	bls.n	800e18c <_realloc_r+0x1bc>
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	2a1b      	cmp	r2, #27
 800e17e:	60ab      	str	r3, [r5, #8]
 800e180:	6863      	ldr	r3, [r4, #4]
 800e182:	60eb      	str	r3, [r5, #12]
 800e184:	d828      	bhi.n	800e1d8 <_realloc_r+0x208>
 800e186:	3408      	adds	r4, #8
 800e188:	f105 0010 	add.w	r0, r5, #16
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	6003      	str	r3, [r0, #0]
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	6043      	str	r3, [r0, #4]
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	6083      	str	r3, [r0, #8]
 800e198:	686b      	ldr	r3, [r5, #4]
 800e19a:	eba7 0008 	sub.w	r0, r7, r8
 800e19e:	280f      	cmp	r0, #15
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	eb05 0207 	add.w	r2, r5, r7
 800e1a8:	f240 80b2 	bls.w	800e310 <_realloc_r+0x340>
 800e1ac:	eb05 0108 	add.w	r1, r5, r8
 800e1b0:	ea48 0303 	orr.w	r3, r8, r3
 800e1b4:	f040 0001 	orr.w	r0, r0, #1
 800e1b8:	606b      	str	r3, [r5, #4]
 800e1ba:	6048      	str	r0, [r1, #4]
 800e1bc:	6853      	ldr	r3, [r2, #4]
 800e1be:	4648      	mov	r0, r9
 800e1c0:	f043 0301 	orr.w	r3, r3, #1
 800e1c4:	6053      	str	r3, [r2, #4]
 800e1c6:	3108      	adds	r1, #8
 800e1c8:	f000 fb7a 	bl	800e8c0 <_free_r>
 800e1cc:	4648      	mov	r0, r9
 800e1ce:	f7ff febd 	bl	800df4c <__malloc_unlock>
 800e1d2:	f105 0b08 	add.w	fp, r5, #8
 800e1d6:	e717      	b.n	800e008 <_realloc_r+0x38>
 800e1d8:	68a3      	ldr	r3, [r4, #8]
 800e1da:	2a24      	cmp	r2, #36	; 0x24
 800e1dc:	612b      	str	r3, [r5, #16]
 800e1de:	68e3      	ldr	r3, [r4, #12]
 800e1e0:	bf18      	it	ne
 800e1e2:	f105 0018 	addne.w	r0, r5, #24
 800e1e6:	616b      	str	r3, [r5, #20]
 800e1e8:	bf09      	itett	eq
 800e1ea:	6923      	ldreq	r3, [r4, #16]
 800e1ec:	3410      	addne	r4, #16
 800e1ee:	61ab      	streq	r3, [r5, #24]
 800e1f0:	6963      	ldreq	r3, [r4, #20]
 800e1f2:	bf02      	ittt	eq
 800e1f4:	f105 0020 	addeq.w	r0, r5, #32
 800e1f8:	61eb      	streq	r3, [r5, #28]
 800e1fa:	3418      	addeq	r4, #24
 800e1fc:	e7c6      	b.n	800e18c <_realloc_r+0x1bc>
 800e1fe:	4621      	mov	r1, r4
 800e200:	f7ff fe7c 	bl	800defc <memmove>
 800e204:	e7c8      	b.n	800e198 <_realloc_r+0x1c8>
 800e206:	45d8      	cmp	r8, fp
 800e208:	dc32      	bgt.n	800e270 <_realloc_r+0x2a0>
 800e20a:	4628      	mov	r0, r5
 800e20c:	68eb      	ldr	r3, [r5, #12]
 800e20e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e212:	60d3      	str	r3, [r2, #12]
 800e214:	609a      	str	r2, [r3, #8]
 800e216:	1f32      	subs	r2, r6, #4
 800e218:	2a24      	cmp	r2, #36	; 0x24
 800e21a:	d825      	bhi.n	800e268 <_realloc_r+0x298>
 800e21c:	2a13      	cmp	r2, #19
 800e21e:	d908      	bls.n	800e232 <_realloc_r+0x262>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	2a1b      	cmp	r2, #27
 800e224:	60ab      	str	r3, [r5, #8]
 800e226:	6863      	ldr	r3, [r4, #4]
 800e228:	60eb      	str	r3, [r5, #12]
 800e22a:	d80a      	bhi.n	800e242 <_realloc_r+0x272>
 800e22c:	3408      	adds	r4, #8
 800e22e:	f105 0010 	add.w	r0, r5, #16
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	6003      	str	r3, [r0, #0]
 800e236:	6863      	ldr	r3, [r4, #4]
 800e238:	6043      	str	r3, [r0, #4]
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	6083      	str	r3, [r0, #8]
 800e23e:	465f      	mov	r7, fp
 800e240:	e7aa      	b.n	800e198 <_realloc_r+0x1c8>
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	2a24      	cmp	r2, #36	; 0x24
 800e246:	612b      	str	r3, [r5, #16]
 800e248:	68e3      	ldr	r3, [r4, #12]
 800e24a:	bf18      	it	ne
 800e24c:	f105 0018 	addne.w	r0, r5, #24
 800e250:	616b      	str	r3, [r5, #20]
 800e252:	bf09      	itett	eq
 800e254:	6923      	ldreq	r3, [r4, #16]
 800e256:	3410      	addne	r4, #16
 800e258:	61ab      	streq	r3, [r5, #24]
 800e25a:	6963      	ldreq	r3, [r4, #20]
 800e25c:	bf02      	ittt	eq
 800e25e:	f105 0020 	addeq.w	r0, r5, #32
 800e262:	61eb      	streq	r3, [r5, #28]
 800e264:	3418      	addeq	r4, #24
 800e266:	e7e4      	b.n	800e232 <_realloc_r+0x262>
 800e268:	4621      	mov	r1, r4
 800e26a:	f7ff fe47 	bl	800defc <memmove>
 800e26e:	e7e6      	b.n	800e23e <_realloc_r+0x26e>
 800e270:	4648      	mov	r0, r9
 800e272:	f7ff fbe9 	bl	800da48 <_malloc_r>
 800e276:	4683      	mov	fp, r0
 800e278:	2800      	cmp	r0, #0
 800e27a:	f43f af4f 	beq.w	800e11c <_realloc_r+0x14c>
 800e27e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e282:	f1a0 0208 	sub.w	r2, r0, #8
 800e286:	f023 0301 	bic.w	r3, r3, #1
 800e28a:	4453      	add	r3, sl
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d107      	bne.n	800e2a0 <_realloc_r+0x2d0>
 800e290:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800e294:	f027 0703 	bic.w	r7, r7, #3
 800e298:	4437      	add	r7, r6
 800e29a:	e6fa      	b.n	800e092 <_realloc_r+0xc2>
 800e29c:	20000440 	.word	0x20000440
 800e2a0:	1f32      	subs	r2, r6, #4
 800e2a2:	2a24      	cmp	r2, #36	; 0x24
 800e2a4:	d82e      	bhi.n	800e304 <_realloc_r+0x334>
 800e2a6:	2a13      	cmp	r2, #19
 800e2a8:	d929      	bls.n	800e2fe <_realloc_r+0x32e>
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	2a1b      	cmp	r2, #27
 800e2ae:	6003      	str	r3, [r0, #0]
 800e2b0:	6863      	ldr	r3, [r4, #4]
 800e2b2:	6043      	str	r3, [r0, #4]
 800e2b4:	d80e      	bhi.n	800e2d4 <_realloc_r+0x304>
 800e2b6:	f104 0208 	add.w	r2, r4, #8
 800e2ba:	f100 0308 	add.w	r3, r0, #8
 800e2be:	6811      	ldr	r1, [r2, #0]
 800e2c0:	6019      	str	r1, [r3, #0]
 800e2c2:	6851      	ldr	r1, [r2, #4]
 800e2c4:	6059      	str	r1, [r3, #4]
 800e2c6:	6892      	ldr	r2, [r2, #8]
 800e2c8:	609a      	str	r2, [r3, #8]
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	f000 faf7 	bl	800e8c0 <_free_r>
 800e2d2:	e723      	b.n	800e11c <_realloc_r+0x14c>
 800e2d4:	68a3      	ldr	r3, [r4, #8]
 800e2d6:	2a24      	cmp	r2, #36	; 0x24
 800e2d8:	6083      	str	r3, [r0, #8]
 800e2da:	68e3      	ldr	r3, [r4, #12]
 800e2dc:	bf18      	it	ne
 800e2de:	f104 0210 	addne.w	r2, r4, #16
 800e2e2:	60c3      	str	r3, [r0, #12]
 800e2e4:	bf09      	itett	eq
 800e2e6:	6923      	ldreq	r3, [r4, #16]
 800e2e8:	f100 0310 	addne.w	r3, r0, #16
 800e2ec:	6103      	streq	r3, [r0, #16]
 800e2ee:	6961      	ldreq	r1, [r4, #20]
 800e2f0:	bf02      	ittt	eq
 800e2f2:	f104 0218 	addeq.w	r2, r4, #24
 800e2f6:	f100 0318 	addeq.w	r3, r0, #24
 800e2fa:	6141      	streq	r1, [r0, #20]
 800e2fc:	e7df      	b.n	800e2be <_realloc_r+0x2ee>
 800e2fe:	4603      	mov	r3, r0
 800e300:	4622      	mov	r2, r4
 800e302:	e7dc      	b.n	800e2be <_realloc_r+0x2ee>
 800e304:	4621      	mov	r1, r4
 800e306:	f7ff fdf9 	bl	800defc <memmove>
 800e30a:	e7de      	b.n	800e2ca <_realloc_r+0x2fa>
 800e30c:	4637      	mov	r7, r6
 800e30e:	e6c0      	b.n	800e092 <_realloc_r+0xc2>
 800e310:	431f      	orrs	r7, r3
 800e312:	606f      	str	r7, [r5, #4]
 800e314:	6853      	ldr	r3, [r2, #4]
 800e316:	f043 0301 	orr.w	r3, r3, #1
 800e31a:	6053      	str	r3, [r2, #4]
 800e31c:	e756      	b.n	800e1cc <_realloc_r+0x1fc>
 800e31e:	bf00      	nop

0800e320 <_sbrk_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	2300      	movs	r3, #0
 800e324:	4d05      	ldr	r5, [pc, #20]	; (800e33c <_sbrk_r+0x1c>)
 800e326:	4604      	mov	r4, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	602b      	str	r3, [r5, #0]
 800e32c:	f000 fd76 	bl	800ee1c <_sbrk>
 800e330:	1c43      	adds	r3, r0, #1
 800e332:	d102      	bne.n	800e33a <_sbrk_r+0x1a>
 800e334:	682b      	ldr	r3, [r5, #0]
 800e336:	b103      	cbz	r3, 800e33a <_sbrk_r+0x1a>
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	bd38      	pop	{r3, r4, r5, pc}
 800e33c:	20000ad4 	.word	0x20000ad4

0800e340 <_raise_r>:
 800e340:	291f      	cmp	r1, #31
 800e342:	b538      	push	{r3, r4, r5, lr}
 800e344:	4604      	mov	r4, r0
 800e346:	460d      	mov	r5, r1
 800e348:	d904      	bls.n	800e354 <_raise_r+0x14>
 800e34a:	2316      	movs	r3, #22
 800e34c:	6003      	str	r3, [r0, #0]
 800e34e:	f04f 30ff 	mov.w	r0, #4294967295
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800e358:	b112      	cbz	r2, 800e360 <_raise_r+0x20>
 800e35a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e35e:	b94b      	cbnz	r3, 800e374 <_raise_r+0x34>
 800e360:	4620      	mov	r0, r4
 800e362:	f000 f831 	bl	800e3c8 <_getpid_r>
 800e366:	462a      	mov	r2, r5
 800e368:	4601      	mov	r1, r0
 800e36a:	4620      	mov	r0, r4
 800e36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e370:	f000 b818 	b.w	800e3a4 <_kill_r>
 800e374:	2b01      	cmp	r3, #1
 800e376:	d00a      	beq.n	800e38e <_raise_r+0x4e>
 800e378:	1c59      	adds	r1, r3, #1
 800e37a:	d103      	bne.n	800e384 <_raise_r+0x44>
 800e37c:	2316      	movs	r3, #22
 800e37e:	6003      	str	r3, [r0, #0]
 800e380:	2001      	movs	r0, #1
 800e382:	e7e6      	b.n	800e352 <_raise_r+0x12>
 800e384:	2400      	movs	r4, #0
 800e386:	4628      	mov	r0, r5
 800e388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e38c:	4798      	blx	r3
 800e38e:	2000      	movs	r0, #0
 800e390:	e7df      	b.n	800e352 <_raise_r+0x12>
	...

0800e394 <raise>:
 800e394:	4b02      	ldr	r3, [pc, #8]	; (800e3a0 <raise+0xc>)
 800e396:	4601      	mov	r1, r0
 800e398:	6818      	ldr	r0, [r3, #0]
 800e39a:	f7ff bfd1 	b.w	800e340 <_raise_r>
 800e39e:	bf00      	nop
 800e3a0:	20000010 	.word	0x20000010

0800e3a4 <_kill_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4d06      	ldr	r5, [pc, #24]	; (800e3c4 <_kill_r+0x20>)
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	602b      	str	r3, [r5, #0]
 800e3b2:	f000 fd1b 	bl	800edec <_kill>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d102      	bne.n	800e3c0 <_kill_r+0x1c>
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	b103      	cbz	r3, 800e3c0 <_kill_r+0x1c>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000ad4 	.word	0x20000ad4

0800e3c8 <_getpid_r>:
 800e3c8:	f000 bd00 	b.w	800edcc <_getpid>

0800e3cc <strncmp>:
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	b510      	push	{r4, lr}
 800e3d0:	b172      	cbz	r2, 800e3f0 <strncmp+0x24>
 800e3d2:	3901      	subs	r1, #1
 800e3d4:	1884      	adds	r4, r0, r2
 800e3d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e3da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e3de:	4290      	cmp	r0, r2
 800e3e0:	d101      	bne.n	800e3e6 <strncmp+0x1a>
 800e3e2:	42a3      	cmp	r3, r4
 800e3e4:	d101      	bne.n	800e3ea <strncmp+0x1e>
 800e3e6:	1a80      	subs	r0, r0, r2
 800e3e8:	bd10      	pop	{r4, pc}
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d1f3      	bne.n	800e3d6 <strncmp+0xa>
 800e3ee:	e7fa      	b.n	800e3e6 <strncmp+0x1a>
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	e7f9      	b.n	800e3e8 <strncmp+0x1c>

0800e3f4 <sysconf>:
 800e3f4:	2808      	cmp	r0, #8
 800e3f6:	b508      	push	{r3, lr}
 800e3f8:	d006      	beq.n	800e408 <sysconf+0x14>
 800e3fa:	f7ff fabb 	bl	800d974 <__errno>
 800e3fe:	2316      	movs	r3, #22
 800e400:	6003      	str	r3, [r0, #0]
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	bd08      	pop	{r3, pc}
 800e408:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e40c:	e7fb      	b.n	800e406 <sysconf+0x12>

0800e40e <__swbuf_r>:
 800e40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e410:	460e      	mov	r6, r1
 800e412:	4614      	mov	r4, r2
 800e414:	4605      	mov	r5, r0
 800e416:	b118      	cbz	r0, 800e420 <__swbuf_r+0x12>
 800e418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e41a:	b90b      	cbnz	r3, 800e420 <__swbuf_r+0x12>
 800e41c:	f000 f9c0 	bl	800e7a0 <__sinit>
 800e420:	69a3      	ldr	r3, [r4, #24]
 800e422:	60a3      	str	r3, [r4, #8]
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	0719      	lsls	r1, r3, #28
 800e428:	d529      	bpl.n	800e47e <__swbuf_r+0x70>
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	b33b      	cbz	r3, 800e47e <__swbuf_r+0x70>
 800e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e432:	b2f6      	uxtb	r6, r6
 800e434:	049a      	lsls	r2, r3, #18
 800e436:	4637      	mov	r7, r6
 800e438:	d52a      	bpl.n	800e490 <__swbuf_r+0x82>
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	6920      	ldr	r0, [r4, #16]
 800e43e:	1a18      	subs	r0, r3, r0
 800e440:	6963      	ldr	r3, [r4, #20]
 800e442:	4283      	cmp	r3, r0
 800e444:	dc04      	bgt.n	800e450 <__swbuf_r+0x42>
 800e446:	4621      	mov	r1, r4
 800e448:	4628      	mov	r0, r5
 800e44a:	f000 f93d 	bl	800e6c8 <_fflush_r>
 800e44e:	b9e0      	cbnz	r0, 800e48a <__swbuf_r+0x7c>
 800e450:	68a3      	ldr	r3, [r4, #8]
 800e452:	3b01      	subs	r3, #1
 800e454:	60a3      	str	r3, [r4, #8]
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	6022      	str	r2, [r4, #0]
 800e45c:	701e      	strb	r6, [r3, #0]
 800e45e:	6962      	ldr	r2, [r4, #20]
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	429a      	cmp	r2, r3
 800e464:	d004      	beq.n	800e470 <__swbuf_r+0x62>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	07db      	lsls	r3, r3, #31
 800e46a:	d506      	bpl.n	800e47a <__swbuf_r+0x6c>
 800e46c:	2e0a      	cmp	r6, #10
 800e46e:	d104      	bne.n	800e47a <__swbuf_r+0x6c>
 800e470:	4621      	mov	r1, r4
 800e472:	4628      	mov	r0, r5
 800e474:	f000 f928 	bl	800e6c8 <_fflush_r>
 800e478:	b938      	cbnz	r0, 800e48a <__swbuf_r+0x7c>
 800e47a:	4638      	mov	r0, r7
 800e47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e47e:	4621      	mov	r1, r4
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f81f 	bl	800e4c4 <__swsetup_r>
 800e486:	2800      	cmp	r0, #0
 800e488:	d0d1      	beq.n	800e42e <__swbuf_r+0x20>
 800e48a:	f04f 37ff 	mov.w	r7, #4294967295
 800e48e:	e7f4      	b.n	800e47a <__swbuf_r+0x6c>
 800e490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e494:	81a3      	strh	r3, [r4, #12]
 800e496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e49c:	6663      	str	r3, [r4, #100]	; 0x64
 800e49e:	e7cc      	b.n	800e43a <__swbuf_r+0x2c>

0800e4a0 <_write_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	4608      	mov	r0, r1
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4d05      	ldr	r5, [pc, #20]	; (800e4c0 <_write_r+0x20>)
 800e4ac:	602a      	str	r2, [r5, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7fd fb4e 	bl	800bb50 <_write>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_write_r+0x1e>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_write_r+0x1e>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20000ad4 	.word	0x20000ad4

0800e4c4 <__swsetup_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4b2a      	ldr	r3, [pc, #168]	; (800e570 <__swsetup_r+0xac>)
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	b118      	cbz	r0, 800e4d8 <__swsetup_r+0x14>
 800e4d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e4d2:	b90b      	cbnz	r3, 800e4d8 <__swsetup_r+0x14>
 800e4d4:	f000 f964 	bl	800e7a0 <__sinit>
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4de:	0718      	lsls	r0, r3, #28
 800e4e0:	d422      	bmi.n	800e528 <__swsetup_r+0x64>
 800e4e2:	06d9      	lsls	r1, r3, #27
 800e4e4:	d407      	bmi.n	800e4f6 <__swsetup_r+0x32>
 800e4e6:	2309      	movs	r3, #9
 800e4e8:	602b      	str	r3, [r5, #0]
 800e4ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f2:	81a3      	strh	r3, [r4, #12]
 800e4f4:	e034      	b.n	800e560 <__swsetup_r+0x9c>
 800e4f6:	0758      	lsls	r0, r3, #29
 800e4f8:	d512      	bpl.n	800e520 <__swsetup_r+0x5c>
 800e4fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e4fc:	b141      	cbz	r1, 800e510 <__swsetup_r+0x4c>
 800e4fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e502:	4299      	cmp	r1, r3
 800e504:	d002      	beq.n	800e50c <__swsetup_r+0x48>
 800e506:	4628      	mov	r0, r5
 800e508:	f000 f9da 	bl	800e8c0 <_free_r>
 800e50c:	2300      	movs	r3, #0
 800e50e:	6323      	str	r3, [r4, #48]	; 0x30
 800e510:	89a3      	ldrh	r3, [r4, #12]
 800e512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	2300      	movs	r3, #0
 800e51a:	6063      	str	r3, [r4, #4]
 800e51c:	6923      	ldr	r3, [r4, #16]
 800e51e:	6023      	str	r3, [r4, #0]
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	f043 0308 	orr.w	r3, r3, #8
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	b94b      	cbnz	r3, 800e540 <__swsetup_r+0x7c>
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e536:	d003      	beq.n	800e540 <__swsetup_r+0x7c>
 800e538:	4621      	mov	r1, r4
 800e53a:	4628      	mov	r0, r5
 800e53c:	f000 facc 	bl	800ead8 <__smakebuf_r>
 800e540:	89a0      	ldrh	r0, [r4, #12]
 800e542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e546:	f010 0301 	ands.w	r3, r0, #1
 800e54a:	d00a      	beq.n	800e562 <__swsetup_r+0x9e>
 800e54c:	2300      	movs	r3, #0
 800e54e:	60a3      	str	r3, [r4, #8]
 800e550:	6963      	ldr	r3, [r4, #20]
 800e552:	425b      	negs	r3, r3
 800e554:	61a3      	str	r3, [r4, #24]
 800e556:	6923      	ldr	r3, [r4, #16]
 800e558:	b943      	cbnz	r3, 800e56c <__swsetup_r+0xa8>
 800e55a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e55e:	d1c4      	bne.n	800e4ea <__swsetup_r+0x26>
 800e560:	bd38      	pop	{r3, r4, r5, pc}
 800e562:	0781      	lsls	r1, r0, #30
 800e564:	bf58      	it	pl
 800e566:	6963      	ldrpl	r3, [r4, #20]
 800e568:	60a3      	str	r3, [r4, #8]
 800e56a:	e7f4      	b.n	800e556 <__swsetup_r+0x92>
 800e56c:	2000      	movs	r0, #0
 800e56e:	e7f7      	b.n	800e560 <__swsetup_r+0x9c>
 800e570:	20000010 	.word	0x20000010

0800e574 <register_fini>:
 800e574:	4b02      	ldr	r3, [pc, #8]	; (800e580 <register_fini+0xc>)
 800e576:	b113      	cbz	r3, 800e57e <register_fini+0xa>
 800e578:	4802      	ldr	r0, [pc, #8]	; (800e584 <register_fini+0x10>)
 800e57a:	f000 b805 	b.w	800e588 <atexit>
 800e57e:	4770      	bx	lr
 800e580:	00000000 	.word	0x00000000
 800e584:	0800e7f1 	.word	0x0800e7f1

0800e588 <atexit>:
 800e588:	2300      	movs	r3, #0
 800e58a:	4601      	mov	r1, r0
 800e58c:	461a      	mov	r2, r3
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 bb26 	b.w	800ebe0 <__register_exitproc>

0800e594 <_close_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	2300      	movs	r3, #0
 800e598:	4d05      	ldr	r5, [pc, #20]	; (800e5b0 <_close_r+0x1c>)
 800e59a:	4604      	mov	r4, r0
 800e59c:	4608      	mov	r0, r1
 800e59e:	602b      	str	r3, [r5, #0]
 800e5a0:	f000 fc04 	bl	800edac <_close>
 800e5a4:	1c43      	adds	r3, r0, #1
 800e5a6:	d102      	bne.n	800e5ae <_close_r+0x1a>
 800e5a8:	682b      	ldr	r3, [r5, #0]
 800e5aa:	b103      	cbz	r3, 800e5ae <_close_r+0x1a>
 800e5ac:	6023      	str	r3, [r4, #0]
 800e5ae:	bd38      	pop	{r3, r4, r5, pc}
 800e5b0:	20000ad4 	.word	0x20000ad4

0800e5b4 <__sflush_r>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	898b      	ldrh	r3, [r1, #12]
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	0718      	lsls	r0, r3, #28
 800e5bc:	460c      	mov	r4, r1
 800e5be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5c2:	d45e      	bmi.n	800e682 <__sflush_r+0xce>
 800e5c4:	684b      	ldr	r3, [r1, #4]
 800e5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	818a      	strh	r2, [r1, #12]
 800e5ce:	dc04      	bgt.n	800e5da <__sflush_r+0x26>
 800e5d0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dc01      	bgt.n	800e5da <__sflush_r+0x26>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5dc:	2e00      	cmp	r6, #0
 800e5de:	d0fa      	beq.n	800e5d6 <__sflush_r+0x22>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5e6:	682f      	ldr	r7, [r5, #0]
 800e5e8:	602b      	str	r3, [r5, #0]
 800e5ea:	d036      	beq.n	800e65a <__sflush_r+0xa6>
 800e5ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e5ee:	89a3      	ldrh	r3, [r4, #12]
 800e5f0:	075a      	lsls	r2, r3, #29
 800e5f2:	d505      	bpl.n	800e600 <__sflush_r+0x4c>
 800e5f4:	6863      	ldr	r3, [r4, #4]
 800e5f6:	1ac0      	subs	r0, r0, r3
 800e5f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5fa:	b10b      	cbz	r3, 800e600 <__sflush_r+0x4c>
 800e5fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e5fe:	1ac0      	subs	r0, r0, r3
 800e600:	2300      	movs	r3, #0
 800e602:	4602      	mov	r2, r0
 800e604:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e606:	4628      	mov	r0, r5
 800e608:	69e1      	ldr	r1, [r4, #28]
 800e60a:	47b0      	blx	r6
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	d106      	bne.n	800e620 <__sflush_r+0x6c>
 800e612:	6829      	ldr	r1, [r5, #0]
 800e614:	291d      	cmp	r1, #29
 800e616:	d830      	bhi.n	800e67a <__sflush_r+0xc6>
 800e618:	4a2a      	ldr	r2, [pc, #168]	; (800e6c4 <__sflush_r+0x110>)
 800e61a:	40ca      	lsrs	r2, r1
 800e61c:	07d6      	lsls	r6, r2, #31
 800e61e:	d52c      	bpl.n	800e67a <__sflush_r+0xc6>
 800e620:	2200      	movs	r2, #0
 800e622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e626:	b21b      	sxth	r3, r3
 800e628:	6062      	str	r2, [r4, #4]
 800e62a:	6922      	ldr	r2, [r4, #16]
 800e62c:	04d9      	lsls	r1, r3, #19
 800e62e:	81a3      	strh	r3, [r4, #12]
 800e630:	6022      	str	r2, [r4, #0]
 800e632:	d504      	bpl.n	800e63e <__sflush_r+0x8a>
 800e634:	1c42      	adds	r2, r0, #1
 800e636:	d101      	bne.n	800e63c <__sflush_r+0x88>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	b903      	cbnz	r3, 800e63e <__sflush_r+0x8a>
 800e63c:	6520      	str	r0, [r4, #80]	; 0x50
 800e63e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e640:	602f      	str	r7, [r5, #0]
 800e642:	2900      	cmp	r1, #0
 800e644:	d0c7      	beq.n	800e5d6 <__sflush_r+0x22>
 800e646:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e64a:	4299      	cmp	r1, r3
 800e64c:	d002      	beq.n	800e654 <__sflush_r+0xa0>
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 f936 	bl	800e8c0 <_free_r>
 800e654:	2000      	movs	r0, #0
 800e656:	6320      	str	r0, [r4, #48]	; 0x30
 800e658:	e7be      	b.n	800e5d8 <__sflush_r+0x24>
 800e65a:	69e1      	ldr	r1, [r4, #28]
 800e65c:	2301      	movs	r3, #1
 800e65e:	4628      	mov	r0, r5
 800e660:	47b0      	blx	r6
 800e662:	1c41      	adds	r1, r0, #1
 800e664:	d1c3      	bne.n	800e5ee <__sflush_r+0x3a>
 800e666:	682b      	ldr	r3, [r5, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d0c0      	beq.n	800e5ee <__sflush_r+0x3a>
 800e66c:	2b1d      	cmp	r3, #29
 800e66e:	d001      	beq.n	800e674 <__sflush_r+0xc0>
 800e670:	2b16      	cmp	r3, #22
 800e672:	d101      	bne.n	800e678 <__sflush_r+0xc4>
 800e674:	602f      	str	r7, [r5, #0]
 800e676:	e7ae      	b.n	800e5d6 <__sflush_r+0x22>
 800e678:	89a3      	ldrh	r3, [r4, #12]
 800e67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e67e:	81a3      	strh	r3, [r4, #12]
 800e680:	e7aa      	b.n	800e5d8 <__sflush_r+0x24>
 800e682:	690f      	ldr	r7, [r1, #16]
 800e684:	2f00      	cmp	r7, #0
 800e686:	d0a6      	beq.n	800e5d6 <__sflush_r+0x22>
 800e688:	079b      	lsls	r3, r3, #30
 800e68a:	bf18      	it	ne
 800e68c:	2300      	movne	r3, #0
 800e68e:	680e      	ldr	r6, [r1, #0]
 800e690:	bf08      	it	eq
 800e692:	694b      	ldreq	r3, [r1, #20]
 800e694:	1bf6      	subs	r6, r6, r7
 800e696:	600f      	str	r7, [r1, #0]
 800e698:	608b      	str	r3, [r1, #8]
 800e69a:	2e00      	cmp	r6, #0
 800e69c:	dd9b      	ble.n	800e5d6 <__sflush_r+0x22>
 800e69e:	4633      	mov	r3, r6
 800e6a0:	463a      	mov	r2, r7
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	69e1      	ldr	r1, [r4, #28]
 800e6a6:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e6aa:	47e0      	blx	ip
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	dc06      	bgt.n	800e6be <__sflush_r+0x10a>
 800e6b0:	89a3      	ldrh	r3, [r4, #12]
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ba:	81a3      	strh	r3, [r4, #12]
 800e6bc:	e78c      	b.n	800e5d8 <__sflush_r+0x24>
 800e6be:	4407      	add	r7, r0
 800e6c0:	1a36      	subs	r6, r6, r0
 800e6c2:	e7ea      	b.n	800e69a <__sflush_r+0xe6>
 800e6c4:	20400001 	.word	0x20400001

0800e6c8 <_fflush_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b118      	cbz	r0, 800e6d8 <_fflush_r+0x10>
 800e6d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e6d2:	b90b      	cbnz	r3, 800e6d8 <_fflush_r+0x10>
 800e6d4:	f000 f864 	bl	800e7a0 <__sinit>
 800e6d8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800e6dc:	b1b8      	cbz	r0, 800e70e <_fflush_r+0x46>
 800e6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6e0:	07db      	lsls	r3, r3, #31
 800e6e2:	d404      	bmi.n	800e6ee <_fflush_r+0x26>
 800e6e4:	0581      	lsls	r1, r0, #22
 800e6e6:	d402      	bmi.n	800e6ee <_fflush_r+0x26>
 800e6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ea:	f7ff f99b 	bl	800da24 <__retarget_lock_acquire_recursive>
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	f7ff ff5f 	bl	800e5b4 <__sflush_r>
 800e6f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	07da      	lsls	r2, r3, #31
 800e6fc:	d405      	bmi.n	800e70a <_fflush_r+0x42>
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	059b      	lsls	r3, r3, #22
 800e702:	d402      	bmi.n	800e70a <_fflush_r+0x42>
 800e704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e706:	f7ff f98e 	bl	800da26 <__retarget_lock_release_recursive>
 800e70a:	4628      	mov	r0, r5
 800e70c:	bd38      	pop	{r3, r4, r5, pc}
 800e70e:	4605      	mov	r5, r0
 800e710:	e7fb      	b.n	800e70a <_fflush_r+0x42>
	...

0800e714 <std>:
 800e714:	2300      	movs	r3, #0
 800e716:	b510      	push	{r4, lr}
 800e718:	4604      	mov	r4, r0
 800e71a:	e9c0 3300 	strd	r3, r3, [r0]
 800e71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e722:	6083      	str	r3, [r0, #8]
 800e724:	8181      	strh	r1, [r0, #12]
 800e726:	6643      	str	r3, [r0, #100]	; 0x64
 800e728:	81c2      	strh	r2, [r0, #14]
 800e72a:	6183      	str	r3, [r0, #24]
 800e72c:	4619      	mov	r1, r3
 800e72e:	2208      	movs	r2, #8
 800e730:	305c      	adds	r0, #92	; 0x5c
 800e732:	f7ff fbfd 	bl	800df30 <memset>
 800e736:	4b07      	ldr	r3, [pc, #28]	; (800e754 <std+0x40>)
 800e738:	61e4      	str	r4, [r4, #28]
 800e73a:	6223      	str	r3, [r4, #32]
 800e73c:	4b06      	ldr	r3, [pc, #24]	; (800e758 <std+0x44>)
 800e73e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e742:	6263      	str	r3, [r4, #36]	; 0x24
 800e744:	4b05      	ldr	r3, [pc, #20]	; (800e75c <std+0x48>)
 800e746:	62a3      	str	r3, [r4, #40]	; 0x28
 800e748:	4b05      	ldr	r3, [pc, #20]	; (800e760 <std+0x4c>)
 800e74a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e750:	f7ff b966 	b.w	800da20 <__retarget_lock_init_recursive>
 800e754:	0800eb59 	.word	0x0800eb59
 800e758:	0800eb7b 	.word	0x0800eb7b
 800e75c:	0800ebb3 	.word	0x0800ebb3
 800e760:	0800ebd7 	.word	0x0800ebd7

0800e764 <_cleanup_r>:
 800e764:	4901      	ldr	r1, [pc, #4]	; (800e76c <_cleanup_r+0x8>)
 800e766:	f000 b96b 	b.w	800ea40 <_fwalk_reent>
 800e76a:	bf00      	nop
 800e76c:	0800ec65 	.word	0x0800ec65

0800e770 <__sfp_lock_acquire>:
 800e770:	4801      	ldr	r0, [pc, #4]	; (800e778 <__sfp_lock_acquire+0x8>)
 800e772:	f7ff b957 	b.w	800da24 <__retarget_lock_acquire_recursive>
 800e776:	bf00      	nop
 800e778:	20000a9e 	.word	0x20000a9e

0800e77c <__sfp_lock_release>:
 800e77c:	4801      	ldr	r0, [pc, #4]	; (800e784 <__sfp_lock_release+0x8>)
 800e77e:	f7ff b952 	b.w	800da26 <__retarget_lock_release_recursive>
 800e782:	bf00      	nop
 800e784:	20000a9e 	.word	0x20000a9e

0800e788 <__sinit_lock_acquire>:
 800e788:	4801      	ldr	r0, [pc, #4]	; (800e790 <__sinit_lock_acquire+0x8>)
 800e78a:	f7ff b94b 	b.w	800da24 <__retarget_lock_acquire_recursive>
 800e78e:	bf00      	nop
 800e790:	20000a9f 	.word	0x20000a9f

0800e794 <__sinit_lock_release>:
 800e794:	4801      	ldr	r0, [pc, #4]	; (800e79c <__sinit_lock_release+0x8>)
 800e796:	f7ff b946 	b.w	800da26 <__retarget_lock_release_recursive>
 800e79a:	bf00      	nop
 800e79c:	20000a9f 	.word	0x20000a9f

0800e7a0 <__sinit>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	f7ff fff0 	bl	800e788 <__sinit_lock_acquire>
 800e7a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e7aa:	b11a      	cbz	r2, 800e7b4 <__sinit+0x14>
 800e7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7b0:	f7ff bff0 	b.w	800e794 <__sinit_lock_release>
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <__sinit+0x4c>)
 800e7b6:	2104      	movs	r1, #4
 800e7b8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e7c0:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e7c4:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e7c8:	6860      	ldr	r0, [r4, #4]
 800e7ca:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e7ce:	f7ff ffa1 	bl	800e714 <std>
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	2109      	movs	r1, #9
 800e7d6:	68a0      	ldr	r0, [r4, #8]
 800e7d8:	f7ff ff9c 	bl	800e714 <std>
 800e7dc:	2202      	movs	r2, #2
 800e7de:	2112      	movs	r1, #18
 800e7e0:	68e0      	ldr	r0, [r4, #12]
 800e7e2:	f7ff ff97 	bl	800e714 <std>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7ea:	e7df      	b.n	800e7ac <__sinit+0xc>
 800e7ec:	0800e765 	.word	0x0800e765

0800e7f0 <__libc_fini_array>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d07      	ldr	r5, [pc, #28]	; (800e810 <__libc_fini_array+0x20>)
 800e7f4:	4c07      	ldr	r4, [pc, #28]	; (800e814 <__libc_fini_array+0x24>)
 800e7f6:	1b64      	subs	r4, r4, r5
 800e7f8:	10a4      	asrs	r4, r4, #2
 800e7fa:	b91c      	cbnz	r4, 800e804 <__libc_fini_array+0x14>
 800e7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e800:	f000 bb22 	b.w	800ee48 <_fini>
 800e804:	3c01      	subs	r4, #1
 800e806:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e80a:	4798      	blx	r3
 800e80c:	e7f5      	b.n	800e7fa <__libc_fini_array+0xa>
 800e80e:	bf00      	nop
 800e810:	0801053c 	.word	0x0801053c
 800e814:	08010544 	.word	0x08010544

0800e818 <_malloc_trim_r>:
 800e818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e81c:	4606      	mov	r6, r0
 800e81e:	2008      	movs	r0, #8
 800e820:	460c      	mov	r4, r1
 800e822:	f7ff fde7 	bl	800e3f4 <sysconf>
 800e826:	4680      	mov	r8, r0
 800e828:	4f22      	ldr	r7, [pc, #136]	; (800e8b4 <_malloc_trim_r+0x9c>)
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7ff fb88 	bl	800df40 <__malloc_lock>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	685d      	ldr	r5, [r3, #4]
 800e834:	f025 0503 	bic.w	r5, r5, #3
 800e838:	1b2c      	subs	r4, r5, r4
 800e83a:	3c11      	subs	r4, #17
 800e83c:	4444      	add	r4, r8
 800e83e:	fbb4 f4f8 	udiv	r4, r4, r8
 800e842:	3c01      	subs	r4, #1
 800e844:	fb08 f404 	mul.w	r4, r8, r4
 800e848:	45a0      	cmp	r8, r4
 800e84a:	dd05      	ble.n	800e858 <_malloc_trim_r+0x40>
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7ff fb7d 	bl	800df4c <__malloc_unlock>
 800e852:	2000      	movs	r0, #0
 800e854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e858:	2100      	movs	r1, #0
 800e85a:	4630      	mov	r0, r6
 800e85c:	f7ff fd60 	bl	800e320 <_sbrk_r>
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	442b      	add	r3, r5
 800e864:	4298      	cmp	r0, r3
 800e866:	d1f1      	bne.n	800e84c <_malloc_trim_r+0x34>
 800e868:	4630      	mov	r0, r6
 800e86a:	4261      	negs	r1, r4
 800e86c:	f7ff fd58 	bl	800e320 <_sbrk_r>
 800e870:	3001      	adds	r0, #1
 800e872:	d110      	bne.n	800e896 <_malloc_trim_r+0x7e>
 800e874:	2100      	movs	r1, #0
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff fd52 	bl	800e320 <_sbrk_r>
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	1a83      	subs	r3, r0, r2
 800e880:	2b0f      	cmp	r3, #15
 800e882:	dde3      	ble.n	800e84c <_malloc_trim_r+0x34>
 800e884:	490c      	ldr	r1, [pc, #48]	; (800e8b8 <_malloc_trim_r+0xa0>)
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	6809      	ldr	r1, [r1, #0]
 800e88c:	6053      	str	r3, [r2, #4]
 800e88e:	1a40      	subs	r0, r0, r1
 800e890:	490a      	ldr	r1, [pc, #40]	; (800e8bc <_malloc_trim_r+0xa4>)
 800e892:	6008      	str	r0, [r1, #0]
 800e894:	e7da      	b.n	800e84c <_malloc_trim_r+0x34>
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <_malloc_trim_r+0xa4>)
 800e89a:	1b2d      	subs	r5, r5, r4
 800e89c:	f045 0501 	orr.w	r5, r5, #1
 800e8a0:	605d      	str	r5, [r3, #4]
 800e8a2:	6813      	ldr	r3, [r2, #0]
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	1b1b      	subs	r3, r3, r4
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	f7ff fb4f 	bl	800df4c <__malloc_unlock>
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7d0      	b.n	800e854 <_malloc_trim_r+0x3c>
 800e8b2:	bf00      	nop
 800e8b4:	20000440 	.word	0x20000440
 800e8b8:	20000848 	.word	0x20000848
 800e8bc:	20000aa0 	.word	0x20000aa0

0800e8c0 <_free_r>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	460f      	mov	r7, r1
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	f000 80b1 	beq.w	800ea2e <_free_r+0x16e>
 800e8cc:	f7ff fb38 	bl	800df40 <__malloc_lock>
 800e8d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e8d4:	4856      	ldr	r0, [pc, #344]	; (800ea30 <_free_r+0x170>)
 800e8d6:	f022 0401 	bic.w	r4, r2, #1
 800e8da:	f1a7 0308 	sub.w	r3, r7, #8
 800e8de:	eb03 0c04 	add.w	ip, r3, r4
 800e8e2:	6881      	ldr	r1, [r0, #8]
 800e8e4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800e8e8:	4561      	cmp	r1, ip
 800e8ea:	f026 0603 	bic.w	r6, r6, #3
 800e8ee:	f002 0201 	and.w	r2, r2, #1
 800e8f2:	d11b      	bne.n	800e92c <_free_r+0x6c>
 800e8f4:	4434      	add	r4, r6
 800e8f6:	b93a      	cbnz	r2, 800e908 <_free_r+0x48>
 800e8f8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	4414      	add	r4, r2
 800e900:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e904:	60ca      	str	r2, [r1, #12]
 800e906:	6091      	str	r1, [r2, #8]
 800e908:	f044 0201 	orr.w	r2, r4, #1
 800e90c:	605a      	str	r2, [r3, #4]
 800e90e:	6083      	str	r3, [r0, #8]
 800e910:	4b48      	ldr	r3, [pc, #288]	; (800ea34 <_free_r+0x174>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	42a3      	cmp	r3, r4
 800e916:	d804      	bhi.n	800e922 <_free_r+0x62>
 800e918:	4b47      	ldr	r3, [pc, #284]	; (800ea38 <_free_r+0x178>)
 800e91a:	4628      	mov	r0, r5
 800e91c:	6819      	ldr	r1, [r3, #0]
 800e91e:	f7ff ff7b 	bl	800e818 <_malloc_trim_r>
 800e922:	4628      	mov	r0, r5
 800e924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e928:	f7ff bb10 	b.w	800df4c <__malloc_unlock>
 800e92c:	f8cc 6004 	str.w	r6, [ip, #4]
 800e930:	2a00      	cmp	r2, #0
 800e932:	d138      	bne.n	800e9a6 <_free_r+0xe6>
 800e934:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800e938:	f100 0708 	add.w	r7, r0, #8
 800e93c:	1a5b      	subs	r3, r3, r1
 800e93e:	440c      	add	r4, r1
 800e940:	6899      	ldr	r1, [r3, #8]
 800e942:	42b9      	cmp	r1, r7
 800e944:	d031      	beq.n	800e9aa <_free_r+0xea>
 800e946:	68df      	ldr	r7, [r3, #12]
 800e948:	60cf      	str	r7, [r1, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	eb0c 0106 	add.w	r1, ip, r6
 800e950:	6849      	ldr	r1, [r1, #4]
 800e952:	07c9      	lsls	r1, r1, #31
 800e954:	d40b      	bmi.n	800e96e <_free_r+0xae>
 800e956:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e95a:	4434      	add	r4, r6
 800e95c:	bb3a      	cbnz	r2, 800e9ae <_free_r+0xee>
 800e95e:	4e37      	ldr	r6, [pc, #220]	; (800ea3c <_free_r+0x17c>)
 800e960:	42b1      	cmp	r1, r6
 800e962:	d124      	bne.n	800e9ae <_free_r+0xee>
 800e964:	2201      	movs	r2, #1
 800e966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e96a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e96e:	f044 0101 	orr.w	r1, r4, #1
 800e972:	6059      	str	r1, [r3, #4]
 800e974:	511c      	str	r4, [r3, r4]
 800e976:	2a00      	cmp	r2, #0
 800e978:	d1d3      	bne.n	800e922 <_free_r+0x62>
 800e97a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800e97e:	d21b      	bcs.n	800e9b8 <_free_r+0xf8>
 800e980:	0961      	lsrs	r1, r4, #5
 800e982:	08e2      	lsrs	r2, r4, #3
 800e984:	2401      	movs	r4, #1
 800e986:	408c      	lsls	r4, r1
 800e988:	6841      	ldr	r1, [r0, #4]
 800e98a:	3201      	adds	r2, #1
 800e98c:	430c      	orrs	r4, r1
 800e98e:	6044      	str	r4, [r0, #4]
 800e990:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800e994:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800e998:	3908      	subs	r1, #8
 800e99a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800e99e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800e9a2:	60e3      	str	r3, [r4, #12]
 800e9a4:	e7bd      	b.n	800e922 <_free_r+0x62>
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	e7d0      	b.n	800e94c <_free_r+0x8c>
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	e7ce      	b.n	800e94c <_free_r+0x8c>
 800e9ae:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800e9b2:	60ce      	str	r6, [r1, #12]
 800e9b4:	60b1      	str	r1, [r6, #8]
 800e9b6:	e7da      	b.n	800e96e <_free_r+0xae>
 800e9b8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800e9bc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800e9c0:	d214      	bcs.n	800e9ec <_free_r+0x12c>
 800e9c2:	09a2      	lsrs	r2, r4, #6
 800e9c4:	3238      	adds	r2, #56	; 0x38
 800e9c6:	1c51      	adds	r1, r2, #1
 800e9c8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800e9cc:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800e9d0:	428e      	cmp	r6, r1
 800e9d2:	d125      	bne.n	800ea20 <_free_r+0x160>
 800e9d4:	2401      	movs	r4, #1
 800e9d6:	1092      	asrs	r2, r2, #2
 800e9d8:	fa04 f202 	lsl.w	r2, r4, r2
 800e9dc:	6844      	ldr	r4, [r0, #4]
 800e9de:	4322      	orrs	r2, r4
 800e9e0:	6042      	str	r2, [r0, #4]
 800e9e2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e9e6:	60b3      	str	r3, [r6, #8]
 800e9e8:	60cb      	str	r3, [r1, #12]
 800e9ea:	e79a      	b.n	800e922 <_free_r+0x62>
 800e9ec:	2a14      	cmp	r2, #20
 800e9ee:	d801      	bhi.n	800e9f4 <_free_r+0x134>
 800e9f0:	325b      	adds	r2, #91	; 0x5b
 800e9f2:	e7e8      	b.n	800e9c6 <_free_r+0x106>
 800e9f4:	2a54      	cmp	r2, #84	; 0x54
 800e9f6:	d802      	bhi.n	800e9fe <_free_r+0x13e>
 800e9f8:	0b22      	lsrs	r2, r4, #12
 800e9fa:	326e      	adds	r2, #110	; 0x6e
 800e9fc:	e7e3      	b.n	800e9c6 <_free_r+0x106>
 800e9fe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ea02:	d802      	bhi.n	800ea0a <_free_r+0x14a>
 800ea04:	0be2      	lsrs	r2, r4, #15
 800ea06:	3277      	adds	r2, #119	; 0x77
 800ea08:	e7dd      	b.n	800e9c6 <_free_r+0x106>
 800ea0a:	f240 5154 	movw	r1, #1364	; 0x554
 800ea0e:	428a      	cmp	r2, r1
 800ea10:	bf96      	itet	ls
 800ea12:	0ca2      	lsrls	r2, r4, #18
 800ea14:	227e      	movhi	r2, #126	; 0x7e
 800ea16:	327c      	addls	r2, #124	; 0x7c
 800ea18:	e7d5      	b.n	800e9c6 <_free_r+0x106>
 800ea1a:	6889      	ldr	r1, [r1, #8]
 800ea1c:	428e      	cmp	r6, r1
 800ea1e:	d004      	beq.n	800ea2a <_free_r+0x16a>
 800ea20:	684a      	ldr	r2, [r1, #4]
 800ea22:	f022 0203 	bic.w	r2, r2, #3
 800ea26:	42a2      	cmp	r2, r4
 800ea28:	d8f7      	bhi.n	800ea1a <_free_r+0x15a>
 800ea2a:	68ce      	ldr	r6, [r1, #12]
 800ea2c:	e7d9      	b.n	800e9e2 <_free_r+0x122>
 800ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea30:	20000440 	.word	0x20000440
 800ea34:	2000084c 	.word	0x2000084c
 800ea38:	20000ad0 	.word	0x20000ad0
 800ea3c:	20000448 	.word	0x20000448

0800ea40 <_fwalk_reent>:
 800ea40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea44:	4606      	mov	r6, r0
 800ea46:	4688      	mov	r8, r1
 800ea48:	2700      	movs	r7, #0
 800ea4a:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800ea4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea52:	f1b9 0901 	subs.w	r9, r9, #1
 800ea56:	d505      	bpl.n	800ea64 <_fwalk_reent+0x24>
 800ea58:	6824      	ldr	r4, [r4, #0]
 800ea5a:	2c00      	cmp	r4, #0
 800ea5c:	d1f7      	bne.n	800ea4e <_fwalk_reent+0xe>
 800ea5e:	4638      	mov	r0, r7
 800ea60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea64:	89ab      	ldrh	r3, [r5, #12]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d907      	bls.n	800ea7a <_fwalk_reent+0x3a>
 800ea6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	d003      	beq.n	800ea7a <_fwalk_reent+0x3a>
 800ea72:	4629      	mov	r1, r5
 800ea74:	4630      	mov	r0, r6
 800ea76:	47c0      	blx	r8
 800ea78:	4307      	orrs	r7, r0
 800ea7a:	3568      	adds	r5, #104	; 0x68
 800ea7c:	e7e9      	b.n	800ea52 <_fwalk_reent+0x12>

0800ea7e <__swhatbuf_r>:
 800ea7e:	b570      	push	{r4, r5, r6, lr}
 800ea80:	460e      	mov	r6, r1
 800ea82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea86:	4614      	mov	r4, r2
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	461d      	mov	r5, r3
 800ea8c:	b096      	sub	sp, #88	; 0x58
 800ea8e:	da0a      	bge.n	800eaa6 <__swhatbuf_r+0x28>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800ea96:	602b      	str	r3, [r5, #0]
 800ea98:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800ea9c:	d116      	bne.n	800eacc <__swhatbuf_r+0x4e>
 800ea9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa2:	6023      	str	r3, [r4, #0]
 800eaa4:	e015      	b.n	800ead2 <__swhatbuf_r+0x54>
 800eaa6:	466a      	mov	r2, sp
 800eaa8:	f000 f934 	bl	800ed14 <_fstat_r>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	dbef      	blt.n	800ea90 <__swhatbuf_r+0x12>
 800eab0:	9a01      	ldr	r2, [sp, #4]
 800eab2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eabe:	425a      	negs	r2, r3
 800eac0:	415a      	adcs	r2, r3
 800eac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eac6:	602a      	str	r2, [r5, #0]
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	e002      	b.n	800ead2 <__swhatbuf_r+0x54>
 800eacc:	2240      	movs	r2, #64	; 0x40
 800eace:	4618      	mov	r0, r3
 800ead0:	6022      	str	r2, [r4, #0]
 800ead2:	b016      	add	sp, #88	; 0x58
 800ead4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ead8 <__smakebuf_r>:
 800ead8:	898b      	ldrh	r3, [r1, #12]
 800eada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eadc:	079d      	lsls	r5, r3, #30
 800eade:	4606      	mov	r6, r0
 800eae0:	460c      	mov	r4, r1
 800eae2:	d507      	bpl.n	800eaf4 <__smakebuf_r+0x1c>
 800eae4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	6123      	str	r3, [r4, #16]
 800eaec:	2301      	movs	r3, #1
 800eaee:	6163      	str	r3, [r4, #20]
 800eaf0:	b002      	add	sp, #8
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	466a      	mov	r2, sp
 800eaf6:	ab01      	add	r3, sp, #4
 800eaf8:	f7ff ffc1 	bl	800ea7e <__swhatbuf_r>
 800eafc:	9900      	ldr	r1, [sp, #0]
 800eafe:	4605      	mov	r5, r0
 800eb00:	4630      	mov	r0, r6
 800eb02:	f7fe ffa1 	bl	800da48 <_malloc_r>
 800eb06:	b948      	cbnz	r0, 800eb1c <__smakebuf_r+0x44>
 800eb08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb0c:	059a      	lsls	r2, r3, #22
 800eb0e:	d4ef      	bmi.n	800eaf0 <__smakebuf_r+0x18>
 800eb10:	f023 0303 	bic.w	r3, r3, #3
 800eb14:	f043 0302 	orr.w	r3, r3, #2
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	e7e3      	b.n	800eae4 <__smakebuf_r+0xc>
 800eb1c:	4b0d      	ldr	r3, [pc, #52]	; (800eb54 <__smakebuf_r+0x7c>)
 800eb1e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	6020      	str	r0, [r4, #0]
 800eb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb28:	81a3      	strh	r3, [r4, #12]
 800eb2a:	9b00      	ldr	r3, [sp, #0]
 800eb2c:	6120      	str	r0, [r4, #16]
 800eb2e:	6163      	str	r3, [r4, #20]
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	b15b      	cbz	r3, 800eb4c <__smakebuf_r+0x74>
 800eb34:	4630      	mov	r0, r6
 800eb36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb3a:	f000 f8fd 	bl	800ed38 <_isatty_r>
 800eb3e:	b128      	cbz	r0, 800eb4c <__smakebuf_r+0x74>
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	f023 0303 	bic.w	r3, r3, #3
 800eb46:	f043 0301 	orr.w	r3, r3, #1
 800eb4a:	81a3      	strh	r3, [r4, #12]
 800eb4c:	89a0      	ldrh	r0, [r4, #12]
 800eb4e:	4305      	orrs	r5, r0
 800eb50:	81a5      	strh	r5, [r4, #12]
 800eb52:	e7cd      	b.n	800eaf0 <__smakebuf_r+0x18>
 800eb54:	0800e765 	.word	0x0800e765

0800eb58 <__sread>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb60:	f000 f90c 	bl	800ed7c <_read_r>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	bfab      	itete	ge
 800eb68:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800eb6a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb6c:	181b      	addge	r3, r3, r0
 800eb6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb72:	bfac      	ite	ge
 800eb74:	6523      	strge	r3, [r4, #80]	; 0x50
 800eb76:	81a3      	strhlt	r3, [r4, #12]
 800eb78:	bd10      	pop	{r4, pc}

0800eb7a <__swrite>:
 800eb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7e:	461f      	mov	r7, r3
 800eb80:	898b      	ldrh	r3, [r1, #12]
 800eb82:	4605      	mov	r5, r0
 800eb84:	05db      	lsls	r3, r3, #23
 800eb86:	460c      	mov	r4, r1
 800eb88:	4616      	mov	r6, r2
 800eb8a:	d505      	bpl.n	800eb98 <__swrite+0x1e>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb94:	f000 f8e0 	bl	800ed58 <_lseek_r>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	4632      	mov	r2, r6
 800eb9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eba0:	81a3      	strh	r3, [r4, #12]
 800eba2:	4628      	mov	r0, r5
 800eba4:	463b      	mov	r3, r7
 800eba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebae:	f7ff bc77 	b.w	800e4a0 <_write_r>

0800ebb2 <__sseek>:
 800ebb2:	b510      	push	{r4, lr}
 800ebb4:	460c      	mov	r4, r1
 800ebb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebba:	f000 f8cd 	bl	800ed58 <_lseek_r>
 800ebbe:	1c43      	adds	r3, r0, #1
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	bf15      	itete	ne
 800ebc4:	6520      	strne	r0, [r4, #80]	; 0x50
 800ebc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebce:	81a3      	strheq	r3, [r4, #12]
 800ebd0:	bf18      	it	ne
 800ebd2:	81a3      	strhne	r3, [r4, #12]
 800ebd4:	bd10      	pop	{r4, pc}

0800ebd6 <__sclose>:
 800ebd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebda:	f7ff bcdb 	b.w	800e594 <_close_r>
	...

0800ebe0 <__register_exitproc>:
 800ebe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ec5c <__register_exitproc+0x7c>
 800ebe8:	4606      	mov	r6, r0
 800ebea:	f8da 0000 	ldr.w	r0, [sl]
 800ebee:	4698      	mov	r8, r3
 800ebf0:	460f      	mov	r7, r1
 800ebf2:	4691      	mov	r9, r2
 800ebf4:	f7fe ff16 	bl	800da24 <__retarget_lock_acquire_recursive>
 800ebf8:	4b19      	ldr	r3, [pc, #100]	; (800ec60 <__register_exitproc+0x80>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800ec00:	b91c      	cbnz	r4, 800ec0a <__register_exitproc+0x2a>
 800ec02:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800ec06:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800ec0a:	6865      	ldr	r5, [r4, #4]
 800ec0c:	f8da 0000 	ldr.w	r0, [sl]
 800ec10:	2d1f      	cmp	r5, #31
 800ec12:	dd05      	ble.n	800ec20 <__register_exitproc+0x40>
 800ec14:	f7fe ff07 	bl	800da26 <__retarget_lock_release_recursive>
 800ec18:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec20:	b19e      	cbz	r6, 800ec4a <__register_exitproc+0x6a>
 800ec22:	2201      	movs	r2, #1
 800ec24:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800ec28:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800ec2c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800ec30:	40aa      	lsls	r2, r5
 800ec32:	4313      	orrs	r3, r2
 800ec34:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800ec38:	2e02      	cmp	r6, #2
 800ec3a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800ec3e:	bf02      	ittt	eq
 800ec40:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800ec44:	4313      	orreq	r3, r2
 800ec46:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800ec4a:	1c6b      	adds	r3, r5, #1
 800ec4c:	3502      	adds	r5, #2
 800ec4e:	6063      	str	r3, [r4, #4]
 800ec50:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800ec54:	f7fe fee7 	bl	800da26 <__retarget_lock_release_recursive>
 800ec58:	2000      	movs	r0, #0
 800ec5a:	e7df      	b.n	800ec1c <__register_exitproc+0x3c>
 800ec5c:	20000850 	.word	0x20000850
 800ec60:	08010224 	.word	0x08010224

0800ec64 <_fclose_r>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	4606      	mov	r6, r0
 800ec68:	460c      	mov	r4, r1
 800ec6a:	b911      	cbnz	r1, 800ec72 <_fclose_r+0xe>
 800ec6c:	2500      	movs	r5, #0
 800ec6e:	4628      	mov	r0, r5
 800ec70:	bd70      	pop	{r4, r5, r6, pc}
 800ec72:	b118      	cbz	r0, 800ec7c <_fclose_r+0x18>
 800ec74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ec76:	b90b      	cbnz	r3, 800ec7c <_fclose_r+0x18>
 800ec78:	f7ff fd92 	bl	800e7a0 <__sinit>
 800ec7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec7e:	07d8      	lsls	r0, r3, #31
 800ec80:	d405      	bmi.n	800ec8e <_fclose_r+0x2a>
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	0599      	lsls	r1, r3, #22
 800ec86:	d402      	bmi.n	800ec8e <_fclose_r+0x2a>
 800ec88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec8a:	f7fe fecb 	bl	800da24 <__retarget_lock_acquire_recursive>
 800ec8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec92:	b93b      	cbnz	r3, 800eca4 <_fclose_r+0x40>
 800ec94:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ec96:	f015 0501 	ands.w	r5, r5, #1
 800ec9a:	d1e7      	bne.n	800ec6c <_fclose_r+0x8>
 800ec9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec9e:	f7fe fec2 	bl	800da26 <__retarget_lock_release_recursive>
 800eca2:	e7e4      	b.n	800ec6e <_fclose_r+0xa>
 800eca4:	4621      	mov	r1, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	f7ff fc84 	bl	800e5b4 <__sflush_r>
 800ecac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b133      	cbz	r3, 800ecc0 <_fclose_r+0x5c>
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	69e1      	ldr	r1, [r4, #28]
 800ecb6:	4798      	blx	r3
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	bfb8      	it	lt
 800ecbc:	f04f 35ff 	movlt.w	r5, #4294967295
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	061a      	lsls	r2, r3, #24
 800ecc4:	d503      	bpl.n	800ecce <_fclose_r+0x6a>
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	6921      	ldr	r1, [r4, #16]
 800ecca:	f7ff fdf9 	bl	800e8c0 <_free_r>
 800ecce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ecd0:	b141      	cbz	r1, 800ece4 <_fclose_r+0x80>
 800ecd2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ecd6:	4299      	cmp	r1, r3
 800ecd8:	d002      	beq.n	800ece0 <_fclose_r+0x7c>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f7ff fdf0 	bl	800e8c0 <_free_r>
 800ece0:	2300      	movs	r3, #0
 800ece2:	6323      	str	r3, [r4, #48]	; 0x30
 800ece4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ece6:	b121      	cbz	r1, 800ecf2 <_fclose_r+0x8e>
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7ff fde9 	bl	800e8c0 <_free_r>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	6463      	str	r3, [r4, #68]	; 0x44
 800ecf2:	f7ff fd3d 	bl	800e770 <__sfp_lock_acquire>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	81a3      	strh	r3, [r4, #12]
 800ecfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecfc:	07db      	lsls	r3, r3, #31
 800ecfe:	d402      	bmi.n	800ed06 <_fclose_r+0xa2>
 800ed00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed02:	f7fe fe90 	bl	800da26 <__retarget_lock_release_recursive>
 800ed06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed08:	f7fe fe8b 	bl	800da22 <__retarget_lock_close_recursive>
 800ed0c:	f7ff fd36 	bl	800e77c <__sfp_lock_release>
 800ed10:	e7ad      	b.n	800ec6e <_fclose_r+0xa>
	...

0800ed14 <_fstat_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	2300      	movs	r3, #0
 800ed18:	4d06      	ldr	r5, [pc, #24]	; (800ed34 <_fstat_r+0x20>)
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	4608      	mov	r0, r1
 800ed1e:	4611      	mov	r1, r2
 800ed20:	602b      	str	r3, [r5, #0]
 800ed22:	f000 f84b 	bl	800edbc <_fstat>
 800ed26:	1c43      	adds	r3, r0, #1
 800ed28:	d102      	bne.n	800ed30 <_fstat_r+0x1c>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	b103      	cbz	r3, 800ed30 <_fstat_r+0x1c>
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	bd38      	pop	{r3, r4, r5, pc}
 800ed32:	bf00      	nop
 800ed34:	20000ad4 	.word	0x20000ad4

0800ed38 <_isatty_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	4d05      	ldr	r5, [pc, #20]	; (800ed54 <_isatty_r+0x1c>)
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	602b      	str	r3, [r5, #0]
 800ed44:	f000 f84a 	bl	800eddc <_isatty>
 800ed48:	1c43      	adds	r3, r0, #1
 800ed4a:	d102      	bne.n	800ed52 <_isatty_r+0x1a>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	b103      	cbz	r3, 800ed52 <_isatty_r+0x1a>
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	bd38      	pop	{r3, r4, r5, pc}
 800ed54:	20000ad4 	.word	0x20000ad4

0800ed58 <_lseek_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	4611      	mov	r1, r2
 800ed60:	2200      	movs	r2, #0
 800ed62:	4d05      	ldr	r5, [pc, #20]	; (800ed78 <_lseek_r+0x20>)
 800ed64:	602a      	str	r2, [r5, #0]
 800ed66:	461a      	mov	r2, r3
 800ed68:	f000 f848 	bl	800edfc <_lseek>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	d102      	bne.n	800ed76 <_lseek_r+0x1e>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b103      	cbz	r3, 800ed76 <_lseek_r+0x1e>
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	bd38      	pop	{r3, r4, r5, pc}
 800ed78:	20000ad4 	.word	0x20000ad4

0800ed7c <_read_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	4611      	mov	r1, r2
 800ed84:	2200      	movs	r2, #0
 800ed86:	4d05      	ldr	r5, [pc, #20]	; (800ed9c <_read_r+0x20>)
 800ed88:	602a      	str	r2, [r5, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f000 f83e 	bl	800ee0c <_read>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	d102      	bne.n	800ed9a <_read_r+0x1e>
 800ed94:	682b      	ldr	r3, [r5, #0]
 800ed96:	b103      	cbz	r3, 800ed9a <_read_r+0x1e>
 800ed98:	6023      	str	r3, [r4, #0]
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	20000ad4 	.word	0x20000ad4

0800eda0 <_Unwind_GetDataRelBase>:
 800eda0:	b508      	push	{r3, lr}
 800eda2:	f7fe fddf 	bl	800d964 <abort>

0800eda6 <_Unwind_GetTextRelBase>:
 800eda6:	b508      	push	{r3, lr}
 800eda8:	f7ff fffa 	bl	800eda0 <_Unwind_GetDataRelBase>

0800edac <_close>:
 800edac:	2258      	movs	r2, #88	; 0x58
 800edae:	4b02      	ldr	r3, [pc, #8]	; (800edb8 <_close+0xc>)
 800edb0:	f04f 30ff 	mov.w	r0, #4294967295
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	4770      	bx	lr
 800edb8:	20000ad4 	.word	0x20000ad4

0800edbc <_fstat>:
 800edbc:	2258      	movs	r2, #88	; 0x58
 800edbe:	4b02      	ldr	r3, [pc, #8]	; (800edc8 <_fstat+0xc>)
 800edc0:	f04f 30ff 	mov.w	r0, #4294967295
 800edc4:	601a      	str	r2, [r3, #0]
 800edc6:	4770      	bx	lr
 800edc8:	20000ad4 	.word	0x20000ad4

0800edcc <_getpid>:
 800edcc:	2258      	movs	r2, #88	; 0x58
 800edce:	4b02      	ldr	r3, [pc, #8]	; (800edd8 <_getpid+0xc>)
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	4770      	bx	lr
 800edd8:	20000ad4 	.word	0x20000ad4

0800eddc <_isatty>:
 800eddc:	2258      	movs	r2, #88	; 0x58
 800edde:	4b02      	ldr	r3, [pc, #8]	; (800ede8 <_isatty+0xc>)
 800ede0:	2000      	movs	r0, #0
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	20000ad4 	.word	0x20000ad4

0800edec <_kill>:
 800edec:	2258      	movs	r2, #88	; 0x58
 800edee:	4b02      	ldr	r3, [pc, #8]	; (800edf8 <_kill+0xc>)
 800edf0:	f04f 30ff 	mov.w	r0, #4294967295
 800edf4:	601a      	str	r2, [r3, #0]
 800edf6:	4770      	bx	lr
 800edf8:	20000ad4 	.word	0x20000ad4

0800edfc <_lseek>:
 800edfc:	2258      	movs	r2, #88	; 0x58
 800edfe:	4b02      	ldr	r3, [pc, #8]	; (800ee08 <_lseek+0xc>)
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	4770      	bx	lr
 800ee08:	20000ad4 	.word	0x20000ad4

0800ee0c <_read>:
 800ee0c:	2258      	movs	r2, #88	; 0x58
 800ee0e:	4b02      	ldr	r3, [pc, #8]	; (800ee18 <_read+0xc>)
 800ee10:	f04f 30ff 	mov.w	r0, #4294967295
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	4770      	bx	lr
 800ee18:	20000ad4 	.word	0x20000ad4

0800ee1c <_sbrk>:
 800ee1c:	4a04      	ldr	r2, [pc, #16]	; (800ee30 <_sbrk+0x14>)
 800ee1e:	4603      	mov	r3, r0
 800ee20:	6811      	ldr	r1, [r2, #0]
 800ee22:	b909      	cbnz	r1, 800ee28 <_sbrk+0xc>
 800ee24:	4903      	ldr	r1, [pc, #12]	; (800ee34 <_sbrk+0x18>)
 800ee26:	6011      	str	r1, [r2, #0]
 800ee28:	6810      	ldr	r0, [r2, #0]
 800ee2a:	4403      	add	r3, r0
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	4770      	bx	lr
 800ee30:	20000ad8 	.word	0x20000ad8
 800ee34:	20000adc 	.word	0x20000adc

0800ee38 <_exit>:
 800ee38:	e7fe      	b.n	800ee38 <_exit>
	...

0800ee3c <_init>:
 800ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3e:	bf00      	nop
 800ee40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee42:	bc08      	pop	{r3}
 800ee44:	469e      	mov	lr, r3
 800ee46:	4770      	bx	lr

0800ee48 <_fini>:
 800ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4a:	bf00      	nop
 800ee4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee4e:	bc08      	pop	{r3}
 800ee50:	469e      	mov	lr, r3
 800ee52:	4770      	bx	lr
